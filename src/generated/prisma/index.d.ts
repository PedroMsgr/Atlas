
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Professional
 * 
 */
export type Professional = $Result.DefaultSelection<Prisma.$ProfessionalPayload>
/**
 * Model Case
 * 
 */
export type Case = $Result.DefaultSelection<Prisma.$CasePayload>
/**
 * Model Chat
 * 
 */
export type Chat = $Result.DefaultSelection<Prisma.$ChatPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model Constellation
 * 
 */
export type Constellation = $Result.DefaultSelection<Prisma.$ConstellationPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model ManualArticle
 * 
 */
export type ManualArticle = $Result.DefaultSelection<Prisma.$ManualArticlePayload>
/**
 * Model AutoSource
 * 
 */
export type AutoSource = $Result.DefaultSelection<Prisma.$AutoSourcePayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model UnitServer
 * 
 */
export type UnitServer = $Result.DefaultSelection<Prisma.$UnitServerPayload>
/**
 * Model UnitConfig
 * 
 */
export type UnitConfig = $Result.DefaultSelection<Prisma.$UnitConfigPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  client: 'client',
  professional: 'professional',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Sender: {
  client: 'client',
  professional: 'professional'
};

export type Sender = (typeof Sender)[keyof typeof Sender]


export const CaseStatus: {
  open: 'open',
  inProgress: 'inProgress',
  pending: 'pending',
  closed: 'closed'
};

export type CaseStatus = (typeof CaseStatus)[keyof typeof CaseStatus]


export const SectionType: {
  text: 'text',
  legalGuide: 'legalGuide',
  manual: 'manual',
  newsConfig: 'newsConfig'
};

export type SectionType = (typeof SectionType)[keyof typeof SectionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Sender = $Enums.Sender

export const Sender: typeof $Enums.Sender

export type CaseStatus = $Enums.CaseStatus

export const CaseStatus: typeof $Enums.CaseStatus

export type SectionType = $Enums.SectionType

export const SectionType: typeof $Enums.SectionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professional`: Exposes CRUD operations for the **Professional** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professionals
    * const professionals = await prisma.professional.findMany()
    * ```
    */
  get professional(): Prisma.ProfessionalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.case`: Exposes CRUD operations for the **Case** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.case.findMany()
    * ```
    */
  get case(): Prisma.CaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.constellation`: Exposes CRUD operations for the **Constellation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Constellations
    * const constellations = await prisma.constellation.findMany()
    * ```
    */
  get constellation(): Prisma.ConstellationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.manualArticle`: Exposes CRUD operations for the **ManualArticle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ManualArticles
    * const manualArticles = await prisma.manualArticle.findMany()
    * ```
    */
  get manualArticle(): Prisma.ManualArticleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.autoSource`: Exposes CRUD operations for the **AutoSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AutoSources
    * const autoSources = await prisma.autoSource.findMany()
    * ```
    */
  get autoSource(): Prisma.AutoSourceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unitServer`: Exposes CRUD operations for the **UnitServer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UnitServers
    * const unitServers = await prisma.unitServer.findMany()
    * ```
    */
  get unitServer(): Prisma.UnitServerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unitConfig`: Exposes CRUD operations for the **UnitConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UnitConfigs
    * const unitConfigs = await prisma.unitConfig.findMany()
    * ```
    */
  get unitConfig(): Prisma.UnitConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Client: 'Client',
    Professional: 'Professional',
    Case: 'Case',
    Chat: 'Chat',
    Message: 'Message',
    File: 'File',
    Report: 'Report',
    Constellation: 'Constellation',
    Section: 'Section',
    ManualArticle: 'ManualArticle',
    AutoSource: 'AutoSource',
    Image: 'Image',
    UnitServer: 'UnitServer',
    UnitConfig: 'UnitConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "client" | "professional" | "case" | "chat" | "message" | "file" | "report" | "constellation" | "section" | "manualArticle" | "autoSource" | "image" | "unitServer" | "unitConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Professional: {
        payload: Prisma.$ProfessionalPayload<ExtArgs>
        fields: Prisma.ProfessionalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          findMany: {
            args: Prisma.ProfessionalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>[]
          }
          create: {
            args: Prisma.ProfessionalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          createMany: {
            args: Prisma.ProfessionalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>[]
          }
          delete: {
            args: Prisma.ProfessionalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          update: {
            args: Prisma.ProfessionalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessional>
          }
          groupBy: {
            args: Prisma.ProfessionalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalCountAggregateOutputType> | number
          }
        }
      }
      Case: {
        payload: Prisma.$CasePayload<ExtArgs>
        fields: Prisma.CaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findFirst: {
            args: Prisma.CaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          findMany: {
            args: Prisma.CaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          create: {
            args: Prisma.CaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          createMany: {
            args: Prisma.CaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          delete: {
            args: Prisma.CaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          update: {
            args: Prisma.CaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          deleteMany: {
            args: Prisma.CaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>[]
          }
          upsert: {
            args: Prisma.CaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePayload>
          }
          aggregate: {
            args: Prisma.CaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCase>
          }
          groupBy: {
            args: Prisma.CaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseCountArgs<ExtArgs>
            result: $Utils.Optional<CaseCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: Prisma.$ChatPayload<ExtArgs>
        fields: Prisma.ChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      Constellation: {
        payload: Prisma.$ConstellationPayload<ExtArgs>
        fields: Prisma.ConstellationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConstellationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConstellationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          findFirst: {
            args: Prisma.ConstellationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConstellationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          findMany: {
            args: Prisma.ConstellationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>[]
          }
          create: {
            args: Prisma.ConstellationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          createMany: {
            args: Prisma.ConstellationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConstellationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>[]
          }
          delete: {
            args: Prisma.ConstellationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          update: {
            args: Prisma.ConstellationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          deleteMany: {
            args: Prisma.ConstellationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConstellationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConstellationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>[]
          }
          upsert: {
            args: Prisma.ConstellationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstellationPayload>
          }
          aggregate: {
            args: Prisma.ConstellationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConstellation>
          }
          groupBy: {
            args: Prisma.ConstellationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConstellationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConstellationCountArgs<ExtArgs>
            result: $Utils.Optional<ConstellationCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      ManualArticle: {
        payload: Prisma.$ManualArticlePayload<ExtArgs>
        fields: Prisma.ManualArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManualArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManualArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          findFirst: {
            args: Prisma.ManualArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManualArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          findMany: {
            args: Prisma.ManualArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>[]
          }
          create: {
            args: Prisma.ManualArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          createMany: {
            args: Prisma.ManualArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ManualArticleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>[]
          }
          delete: {
            args: Prisma.ManualArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          update: {
            args: Prisma.ManualArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          deleteMany: {
            args: Prisma.ManualArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManualArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ManualArticleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>[]
          }
          upsert: {
            args: Prisma.ManualArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualArticlePayload>
          }
          aggregate: {
            args: Prisma.ManualArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManualArticle>
          }
          groupBy: {
            args: Prisma.ManualArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManualArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManualArticleCountArgs<ExtArgs>
            result: $Utils.Optional<ManualArticleCountAggregateOutputType> | number
          }
        }
      }
      AutoSource: {
        payload: Prisma.$AutoSourcePayload<ExtArgs>
        fields: Prisma.AutoSourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AutoSourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AutoSourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          findFirst: {
            args: Prisma.AutoSourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AutoSourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          findMany: {
            args: Prisma.AutoSourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>[]
          }
          create: {
            args: Prisma.AutoSourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          createMany: {
            args: Prisma.AutoSourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AutoSourceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>[]
          }
          delete: {
            args: Prisma.AutoSourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          update: {
            args: Prisma.AutoSourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          deleteMany: {
            args: Prisma.AutoSourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AutoSourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AutoSourceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>[]
          }
          upsert: {
            args: Prisma.AutoSourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutoSourcePayload>
          }
          aggregate: {
            args: Prisma.AutoSourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAutoSource>
          }
          groupBy: {
            args: Prisma.AutoSourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AutoSourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AutoSourceCountArgs<ExtArgs>
            result: $Utils.Optional<AutoSourceCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      UnitServer: {
        payload: Prisma.$UnitServerPayload<ExtArgs>
        fields: Prisma.UnitServerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitServerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitServerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          findFirst: {
            args: Prisma.UnitServerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitServerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          findMany: {
            args: Prisma.UnitServerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>[]
          }
          create: {
            args: Prisma.UnitServerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          createMany: {
            args: Prisma.UnitServerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnitServerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>[]
          }
          delete: {
            args: Prisma.UnitServerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          update: {
            args: Prisma.UnitServerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          deleteMany: {
            args: Prisma.UnitServerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitServerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UnitServerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>[]
          }
          upsert: {
            args: Prisma.UnitServerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitServerPayload>
          }
          aggregate: {
            args: Prisma.UnitServerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnitServer>
          }
          groupBy: {
            args: Prisma.UnitServerGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitServerGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitServerCountArgs<ExtArgs>
            result: $Utils.Optional<UnitServerCountAggregateOutputType> | number
          }
        }
      }
      UnitConfig: {
        payload: Prisma.$UnitConfigPayload<ExtArgs>
        fields: Prisma.UnitConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          findFirst: {
            args: Prisma.UnitConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          findMany: {
            args: Prisma.UnitConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>[]
          }
          create: {
            args: Prisma.UnitConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          createMany: {
            args: Prisma.UnitConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnitConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>[]
          }
          delete: {
            args: Prisma.UnitConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          update: {
            args: Prisma.UnitConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          deleteMany: {
            args: Prisma.UnitConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UnitConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>[]
          }
          upsert: {
            args: Prisma.UnitConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitConfigPayload>
          }
          aggregate: {
            args: Prisma.UnitConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnitConfig>
          }
          groupBy: {
            args: Prisma.UnitConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitConfigCountArgs<ExtArgs>
            result: $Utils.Optional<UnitConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    client?: ClientOmit
    professional?: ProfessionalOmit
    case?: CaseOmit
    chat?: ChatOmit
    message?: MessageOmit
    file?: FileOmit
    report?: ReportOmit
    constellation?: ConstellationOmit
    section?: SectionOmit
    manualArticle?: ManualArticleOmit
    autoSource?: AutoSourceOmit
    image?: ImageOmit
    unitServer?: UnitServerOmit
    unitConfig?: UnitConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    clients: number
    professionals: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | UserCountOutputTypeCountClientsArgs
    professionals?: boolean | UserCountOutputTypeCountProfessionalsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    cases: number
    files: number
    reports: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | ClientCountOutputTypeCountCasesArgs
    files?: boolean | ClientCountOutputTypeCountFilesArgs
    reports?: boolean | ClientCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type ProfessionalCountOutputType
   */

  export type ProfessionalCountOutputType = {
    cases: number
    files: number
  }

  export type ProfessionalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | ProfessionalCountOutputTypeCountCasesArgs
    files?: boolean | ProfessionalCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * ProfessionalCountOutputType without action
   */
  export type ProfessionalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCountOutputType
     */
    select?: ProfessionalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionalCountOutputType without action
   */
  export type ProfessionalCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * ProfessionalCountOutputType without action
   */
  export type ProfessionalCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type CaseCountOutputType
   */

  export type CaseCountOutputType = {
    files: number
    reports: number
  }

  export type CaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | CaseCountOutputTypeCountFilesArgs
    reports?: boolean | CaseCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseCountOutputType
     */
    select?: CaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * CaseCountOutputType without action
   */
  export type CaseCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    messages: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ConstellationCountOutputType
   */

  export type ConstellationCountOutputType = {
    servers: number
  }

  export type ConstellationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servers?: boolean | ConstellationCountOutputTypeCountServersArgs
  }

  // Custom InputTypes
  /**
   * ConstellationCountOutputType without action
   */
  export type ConstellationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstellationCountOutputType
     */
    select?: ConstellationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConstellationCountOutputType without action
   */
  export type ConstellationCountOutputTypeCountServersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitServerWhereInput
  }


  /**
   * Count Type UnitServerCountOutputType
   */

  export type UnitServerCountOutputType = {
    clients: number
    professionals: number
    cases: number
    sections: number
    manualArticles: number
    autoSources: number
  }

  export type UnitServerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | UnitServerCountOutputTypeCountClientsArgs
    professionals?: boolean | UnitServerCountOutputTypeCountProfessionalsArgs
    cases?: boolean | UnitServerCountOutputTypeCountCasesArgs
    sections?: boolean | UnitServerCountOutputTypeCountSectionsArgs
    manualArticles?: boolean | UnitServerCountOutputTypeCountManualArticlesArgs
    autoSources?: boolean | UnitServerCountOutputTypeCountAutoSourcesArgs
  }

  // Custom InputTypes
  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServerCountOutputType
     */
    select?: UnitServerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountProfessionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalWhereInput
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountManualArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManualArticleWhereInput
  }

  /**
   * UnitServerCountOutputType without action
   */
  export type UnitServerCountOutputTypeCountAutoSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutoSourceWhereInput
  }


  /**
   * Count Type UnitConfigCountOutputType
   */

  export type UnitConfigCountOutputType = {
    servers: number
    sections: number
    manualArticles: number
    autoSources: number
    images: number
  }

  export type UnitConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servers?: boolean | UnitConfigCountOutputTypeCountServersArgs
    sections?: boolean | UnitConfigCountOutputTypeCountSectionsArgs
    manualArticles?: boolean | UnitConfigCountOutputTypeCountManualArticlesArgs
    autoSources?: boolean | UnitConfigCountOutputTypeCountAutoSourcesArgs
    images?: boolean | UnitConfigCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfigCountOutputType
     */
    select?: UnitConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeCountServersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitServerWhereInput
  }

  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeCountManualArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManualArticleWhereInput
  }

  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeCountAutoSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutoSourceWhereInput
  }

  /**
   * UnitConfigCountOutputType without action
   */
  export type UnitConfigCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    address: string | null
    avatarUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    address: string | null
    avatarUrl: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    firstName: number
    lastName: number
    phone: number
    address: number
    avatarUrl: number
    isActive: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    address?: true
    avatarUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    address?: true
    avatarUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    phone?: true
    address?: true
    avatarUrl?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone: string | null
    address: string | null
    avatarUrl: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    address?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    clients?: boolean | User$clientsArgs<ExtArgs>
    professionals?: boolean | User$professionalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    address?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    address?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    address?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "firstName" | "lastName" | "phone" | "address" | "avatarUrl" | "isActive" | "createdAt" | "updatedAt" | "lastLoginAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | User$clientsArgs<ExtArgs>
    professionals?: boolean | User$professionalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      clients: Prisma.$ClientPayload<ExtArgs>[]
      professionals: Prisma.$ProfessionalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.Role
      firstName: string
      lastName: string
      phone: string | null
      address: string | null
      avatarUrl: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clients<T extends User$clientsArgs<ExtArgs> = {}>(args?: Subset<T, User$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionals<T extends User$professionalsArgs<ExtArgs> = {}>(args?: Subset<T, User$professionalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.clients
   */
  export type User$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * User.professionals
   */
  export type User$professionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    where?: ProfessionalWhereInput
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    cursor?: ProfessionalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalScalarFieldEnum | ProfessionalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    userId: string | null
    serverId: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    serverId: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    userId: number
    serverId: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    userId: string
    serverId: string
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    cases?: boolean | Client$casesArgs<ExtArgs>
    files?: boolean | Client$filesArgs<ExtArgs>
    reports?: boolean | Client$reportsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    userId?: boolean
    serverId?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "serverId", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    cases?: boolean | Client$casesArgs<ExtArgs>
    files?: boolean | Client$filesArgs<ExtArgs>
    reports?: boolean | Client$reportsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs>
      cases: Prisma.$CasePayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      serverId: string
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends UnitServerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitServerDefaultArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cases<T extends Client$casesArgs<ExtArgs> = {}>(args?: Subset<T, Client$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Client$filesArgs<ExtArgs> = {}>(args?: Subset<T, Client$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Client$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Client$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly userId: FieldRef<"Client", 'String'>
    readonly serverId: FieldRef<"Client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.cases
   */
  export type Client$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Client.files
   */
  export type Client$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Client.reports
   */
  export type Client$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Professional
   */

  export type AggregateProfessional = {
    _count: ProfessionalCountAggregateOutputType | null
    _min: ProfessionalMinAggregateOutputType | null
    _max: ProfessionalMaxAggregateOutputType | null
  }

  export type ProfessionalMinAggregateOutputType = {
    id: string | null
    userId: string | null
    serverId: string | null
  }

  export type ProfessionalMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    serverId: string | null
  }

  export type ProfessionalCountAggregateOutputType = {
    id: number
    userId: number
    serverId: number
    _all: number
  }


  export type ProfessionalMinAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
  }

  export type ProfessionalMaxAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
  }

  export type ProfessionalCountAggregateInputType = {
    id?: true
    userId?: true
    serverId?: true
    _all?: true
  }

  export type ProfessionalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professional to aggregate.
     */
    where?: ProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professionals to fetch.
     */
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professionals
    **/
    _count?: true | ProfessionalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalMaxAggregateInputType
  }

  export type GetProfessionalAggregateType<T extends ProfessionalAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessional]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessional[P]>
      : GetScalarType<T[P], AggregateProfessional[P]>
  }




  export type ProfessionalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalWhereInput
    orderBy?: ProfessionalOrderByWithAggregationInput | ProfessionalOrderByWithAggregationInput[]
    by: ProfessionalScalarFieldEnum[] | ProfessionalScalarFieldEnum
    having?: ProfessionalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalCountAggregateInputType | true
    _min?: ProfessionalMinAggregateInputType
    _max?: ProfessionalMaxAggregateInputType
  }

  export type ProfessionalGroupByOutputType = {
    id: string
    userId: string
    serverId: string
    _count: ProfessionalCountAggregateOutputType | null
    _min: ProfessionalMinAggregateOutputType | null
    _max: ProfessionalMaxAggregateOutputType | null
  }

  type GetProfessionalGroupByPayload<T extends ProfessionalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    cases?: boolean | Professional$casesArgs<ExtArgs>
    files?: boolean | Professional$filesArgs<ExtArgs>
    _count?: boolean | ProfessionalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professional"]>

  export type ProfessionalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professional"]>

  export type ProfessionalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professional"]>

  export type ProfessionalSelectScalar = {
    id?: boolean
    userId?: boolean
    serverId?: boolean
  }

  export type ProfessionalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "serverId", ExtArgs["result"]["professional"]>
  export type ProfessionalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    cases?: boolean | Professional$casesArgs<ExtArgs>
    files?: boolean | Professional$filesArgs<ExtArgs>
    _count?: boolean | ProfessionalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }
  export type ProfessionalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }

  export type $ProfessionalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professional"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs>
      cases: Prisma.$CasePayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      serverId: string
    }, ExtArgs["result"]["professional"]>
    composites: {}
  }

  type ProfessionalGetPayload<S extends boolean | null | undefined | ProfessionalDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalPayload, S>

  type ProfessionalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalCountAggregateInputType | true
    }

  export interface ProfessionalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professional'], meta: { name: 'Professional' } }
    /**
     * Find zero or one Professional that matches the filter.
     * @param {ProfessionalFindUniqueArgs} args - Arguments to find a Professional
     * @example
     * // Get one Professional
     * const professional = await prisma.professional.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalFindUniqueArgs>(args: SelectSubset<T, ProfessionalFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professional that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionalFindUniqueOrThrowArgs} args - Arguments to find a Professional
     * @example
     * // Get one Professional
     * const professional = await prisma.professional.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professional that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalFindFirstArgs} args - Arguments to find a Professional
     * @example
     * // Get one Professional
     * const professional = await prisma.professional.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalFindFirstArgs>(args?: SelectSubset<T, ProfessionalFindFirstArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professional that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalFindFirstOrThrowArgs} args - Arguments to find a Professional
     * @example
     * // Get one Professional
     * const professional = await prisma.professional.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professionals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professionals
     * const professionals = await prisma.professional.findMany()
     * 
     * // Get first 10 Professionals
     * const professionals = await prisma.professional.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalWithIdOnly = await prisma.professional.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalFindManyArgs>(args?: SelectSubset<T, ProfessionalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professional.
     * @param {ProfessionalCreateArgs} args - Arguments to create a Professional.
     * @example
     * // Create one Professional
     * const Professional = await prisma.professional.create({
     *   data: {
     *     // ... data to create a Professional
     *   }
     * })
     * 
     */
    create<T extends ProfessionalCreateArgs>(args: SelectSubset<T, ProfessionalCreateArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professionals.
     * @param {ProfessionalCreateManyArgs} args - Arguments to create many Professionals.
     * @example
     * // Create many Professionals
     * const professional = await prisma.professional.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalCreateManyArgs>(args?: SelectSubset<T, ProfessionalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professionals and returns the data saved in the database.
     * @param {ProfessionalCreateManyAndReturnArgs} args - Arguments to create many Professionals.
     * @example
     * // Create many Professionals
     * const professional = await prisma.professional.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professionals and only return the `id`
     * const professionalWithIdOnly = await prisma.professional.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Professional.
     * @param {ProfessionalDeleteArgs} args - Arguments to delete one Professional.
     * @example
     * // Delete one Professional
     * const Professional = await prisma.professional.delete({
     *   where: {
     *     // ... filter to delete one Professional
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalDeleteArgs>(args: SelectSubset<T, ProfessionalDeleteArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professional.
     * @param {ProfessionalUpdateArgs} args - Arguments to update one Professional.
     * @example
     * // Update one Professional
     * const professional = await prisma.professional.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalUpdateArgs>(args: SelectSubset<T, ProfessionalUpdateArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professionals.
     * @param {ProfessionalDeleteManyArgs} args - Arguments to filter Professionals to delete.
     * @example
     * // Delete a few Professionals
     * const { count } = await prisma.professional.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalDeleteManyArgs>(args?: SelectSubset<T, ProfessionalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professionals
     * const professional = await prisma.professional.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalUpdateManyArgs>(args: SelectSubset<T, ProfessionalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professionals and returns the data updated in the database.
     * @param {ProfessionalUpdateManyAndReturnArgs} args - Arguments to update many Professionals.
     * @example
     * // Update many Professionals
     * const professional = await prisma.professional.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professionals and only return the `id`
     * const professionalWithIdOnly = await prisma.professional.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionalUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Professional.
     * @param {ProfessionalUpsertArgs} args - Arguments to update or create a Professional.
     * @example
     * // Update or create a Professional
     * const professional = await prisma.professional.upsert({
     *   create: {
     *     // ... data to create a Professional
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professional we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalUpsertArgs>(args: SelectSubset<T, ProfessionalUpsertArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCountArgs} args - Arguments to filter Professionals to count.
     * @example
     * // Count the number of Professionals
     * const count = await prisma.professional.count({
     *   where: {
     *     // ... the filter for the Professionals we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalCountArgs>(
      args?: Subset<T, ProfessionalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professional.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalAggregateArgs>(args: Subset<T, ProfessionalAggregateArgs>): Prisma.PrismaPromise<GetProfessionalAggregateType<T>>

    /**
     * Group by Professional.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professional model
   */
  readonly fields: ProfessionalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professional.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends UnitServerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitServerDefaultArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cases<T extends Professional$casesArgs<ExtArgs> = {}>(args?: Subset<T, Professional$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Professional$filesArgs<ExtArgs> = {}>(args?: Subset<T, Professional$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Professional model
   */
  interface ProfessionalFieldRefs {
    readonly id: FieldRef<"Professional", 'String'>
    readonly userId: FieldRef<"Professional", 'String'>
    readonly serverId: FieldRef<"Professional", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Professional findUnique
   */
  export type ProfessionalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which Professional to fetch.
     */
    where: ProfessionalWhereUniqueInput
  }

  /**
   * Professional findUniqueOrThrow
   */
  export type ProfessionalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which Professional to fetch.
     */
    where: ProfessionalWhereUniqueInput
  }

  /**
   * Professional findFirst
   */
  export type ProfessionalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which Professional to fetch.
     */
    where?: ProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professionals to fetch.
     */
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professionals.
     */
    cursor?: ProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professionals.
     */
    distinct?: ProfessionalScalarFieldEnum | ProfessionalScalarFieldEnum[]
  }

  /**
   * Professional findFirstOrThrow
   */
  export type ProfessionalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which Professional to fetch.
     */
    where?: ProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professionals to fetch.
     */
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professionals.
     */
    cursor?: ProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professionals.
     */
    distinct?: ProfessionalScalarFieldEnum | ProfessionalScalarFieldEnum[]
  }

  /**
   * Professional findMany
   */
  export type ProfessionalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which Professionals to fetch.
     */
    where?: ProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professionals to fetch.
     */
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professionals.
     */
    cursor?: ProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professionals.
     */
    skip?: number
    distinct?: ProfessionalScalarFieldEnum | ProfessionalScalarFieldEnum[]
  }

  /**
   * Professional create
   */
  export type ProfessionalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * The data needed to create a Professional.
     */
    data: XOR<ProfessionalCreateInput, ProfessionalUncheckedCreateInput>
  }

  /**
   * Professional createMany
   */
  export type ProfessionalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professionals.
     */
    data: ProfessionalCreateManyInput | ProfessionalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professional createManyAndReturn
   */
  export type ProfessionalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * The data used to create many Professionals.
     */
    data: ProfessionalCreateManyInput | ProfessionalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Professional update
   */
  export type ProfessionalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * The data needed to update a Professional.
     */
    data: XOR<ProfessionalUpdateInput, ProfessionalUncheckedUpdateInput>
    /**
     * Choose, which Professional to update.
     */
    where: ProfessionalWhereUniqueInput
  }

  /**
   * Professional updateMany
   */
  export type ProfessionalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professionals.
     */
    data: XOR<ProfessionalUpdateManyMutationInput, ProfessionalUncheckedUpdateManyInput>
    /**
     * Filter which Professionals to update
     */
    where?: ProfessionalWhereInput
    /**
     * Limit how many Professionals to update.
     */
    limit?: number
  }

  /**
   * Professional updateManyAndReturn
   */
  export type ProfessionalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * The data used to update Professionals.
     */
    data: XOR<ProfessionalUpdateManyMutationInput, ProfessionalUncheckedUpdateManyInput>
    /**
     * Filter which Professionals to update
     */
    where?: ProfessionalWhereInput
    /**
     * Limit how many Professionals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Professional upsert
   */
  export type ProfessionalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * The filter to search for the Professional to update in case it exists.
     */
    where: ProfessionalWhereUniqueInput
    /**
     * In case the Professional found by the `where` argument doesn't exist, create a new Professional with this data.
     */
    create: XOR<ProfessionalCreateInput, ProfessionalUncheckedCreateInput>
    /**
     * In case the Professional was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalUpdateInput, ProfessionalUncheckedUpdateInput>
  }

  /**
   * Professional delete
   */
  export type ProfessionalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    /**
     * Filter which Professional to delete.
     */
    where: ProfessionalWhereUniqueInput
  }

  /**
   * Professional deleteMany
   */
  export type ProfessionalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professionals to delete
     */
    where?: ProfessionalWhereInput
    /**
     * Limit how many Professionals to delete.
     */
    limit?: number
  }

  /**
   * Professional.cases
   */
  export type Professional$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Professional.files
   */
  export type Professional$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Professional without action
   */
  export type ProfessionalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
  }


  /**
   * Model Case
   */

  export type AggregateCase = {
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  export type CaseMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    professionalId: string | null
    serverId: string | null
    status: $Enums.CaseStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    professionalId: string | null
    serverId: string | null
    status: $Enums.CaseStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CaseCountAggregateOutputType = {
    id: number
    clientId: number
    professionalId: number
    serverId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CaseMinAggregateInputType = {
    id?: true
    clientId?: true
    professionalId?: true
    serverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseMaxAggregateInputType = {
    id?: true
    clientId?: true
    professionalId?: true
    serverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CaseCountAggregateInputType = {
    id?: true
    clientId?: true
    professionalId?: true
    serverId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Case to aggregate.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cases
    **/
    _count?: true | CaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseMaxAggregateInputType
  }

  export type GetCaseAggregateType<T extends CaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase[P]>
      : GetScalarType<T[P], AggregateCase[P]>
  }




  export type CaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithAggregationInput | CaseOrderByWithAggregationInput[]
    by: CaseScalarFieldEnum[] | CaseScalarFieldEnum
    having?: CaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseCountAggregateInputType | true
    _min?: CaseMinAggregateInputType
    _max?: CaseMaxAggregateInputType
  }

  export type CaseGroupByOutputType = {
    id: string
    clientId: string
    professionalId: string
    serverId: string
    status: $Enums.CaseStatus
    createdAt: Date
    updatedAt: Date
    _count: CaseCountAggregateOutputType | null
    _min: CaseMinAggregateOutputType | null
    _max: CaseMaxAggregateOutputType | null
  }

  type GetCaseGroupByPayload<T extends CaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseGroupByOutputType[P]>
            : GetScalarType<T[P], CaseGroupByOutputType[P]>
        }
      >
    >


  export type CaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    professionalId?: boolean
    serverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    chat?: boolean | Case$chatArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    reports?: boolean | Case$reportsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    professionalId?: boolean
    serverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    professionalId?: boolean
    serverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["case"]>

  export type CaseSelectScalar = {
    id?: boolean
    clientId?: boolean
    professionalId?: boolean
    serverId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "professionalId" | "serverId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["case"]>
  export type CaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
    chat?: boolean | Case$chatArgs<ExtArgs>
    files?: boolean | Case$filesArgs<ExtArgs>
    reports?: boolean | Case$reportsArgs<ExtArgs>
    _count?: boolean | CaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }
  export type CaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    professional?: boolean | ProfessionalDefaultArgs<ExtArgs>
    server?: boolean | UnitServerDefaultArgs<ExtArgs>
  }

  export type $CasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Case"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      professional: Prisma.$ProfessionalPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs>
      chat: Prisma.$ChatPayload<ExtArgs> | null
      files: Prisma.$FilePayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      professionalId: string
      serverId: string
      status: $Enums.CaseStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["case"]>
    composites: {}
  }

  type CaseGetPayload<S extends boolean | null | undefined | CaseDefaultArgs> = $Result.GetResult<Prisma.$CasePayload, S>

  type CaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseCountAggregateInputType | true
    }

  export interface CaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Case'], meta: { name: 'Case' } }
    /**
     * Find zero or one Case that matches the filter.
     * @param {CaseFindUniqueArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseFindUniqueArgs>(args: SelectSubset<T, CaseFindUniqueArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Case that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseFindUniqueOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseFindFirstArgs>(args?: SelectSubset<T, CaseFindFirstArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Case that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindFirstOrThrowArgs} args - Arguments to find a Case
     * @example
     * // Get one Case
     * const case = await prisma.case.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.case.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.case.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseWithIdOnly = await prisma.case.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseFindManyArgs>(args?: SelectSubset<T, CaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Case.
     * @param {CaseCreateArgs} args - Arguments to create a Case.
     * @example
     * // Create one Case
     * const Case = await prisma.case.create({
     *   data: {
     *     // ... data to create a Case
     *   }
     * })
     * 
     */
    create<T extends CaseCreateArgs>(args: SelectSubset<T, CaseCreateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cases.
     * @param {CaseCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseCreateManyArgs>(args?: SelectSubset<T, CaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cases and returns the data saved in the database.
     * @param {CaseCreateManyAndReturnArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const case = await prisma.case.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Case.
     * @param {CaseDeleteArgs} args - Arguments to delete one Case.
     * @example
     * // Delete one Case
     * const Case = await prisma.case.delete({
     *   where: {
     *     // ... filter to delete one Case
     *   }
     * })
     * 
     */
    delete<T extends CaseDeleteArgs>(args: SelectSubset<T, CaseDeleteArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Case.
     * @param {CaseUpdateArgs} args - Arguments to update one Case.
     * @example
     * // Update one Case
     * const case = await prisma.case.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseUpdateArgs>(args: SelectSubset<T, CaseUpdateArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cases.
     * @param {CaseDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.case.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseDeleteManyArgs>(args?: SelectSubset<T, CaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseUpdateManyArgs>(args: SelectSubset<T, CaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases and returns the data updated in the database.
     * @param {CaseUpdateManyAndReturnArgs} args - Arguments to update many Cases.
     * @example
     * // Update many Cases
     * const case = await prisma.case.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cases and only return the `id`
     * const caseWithIdOnly = await prisma.case.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Case.
     * @param {CaseUpsertArgs} args - Arguments to update or create a Case.
     * @example
     * // Update or create a Case
     * const case = await prisma.case.upsert({
     *   create: {
     *     // ... data to create a Case
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case we want to update
     *   }
     * })
     */
    upsert<T extends CaseUpsertArgs>(args: SelectSubset<T, CaseUpsertArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.case.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends CaseCountArgs>(
      args?: Subset<T, CaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAggregateArgs>(args: Subset<T, CaseAggregateArgs>): Prisma.PrismaPromise<GetCaseAggregateType<T>>

    /**
     * Group by Case.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseGroupByArgs['orderBy'] }
        : { orderBy?: CaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Case model
   */
  readonly fields: CaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Case.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professional<T extends ProfessionalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalDefaultArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends UnitServerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitServerDefaultArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chat<T extends Case$chatArgs<ExtArgs> = {}>(args?: Subset<T, Case$chatArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    files<T extends Case$filesArgs<ExtArgs> = {}>(args?: Subset<T, Case$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Case$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Case$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Case model
   */
  interface CaseFieldRefs {
    readonly id: FieldRef<"Case", 'String'>
    readonly clientId: FieldRef<"Case", 'String'>
    readonly professionalId: FieldRef<"Case", 'String'>
    readonly serverId: FieldRef<"Case", 'String'>
    readonly status: FieldRef<"Case", 'CaseStatus'>
    readonly createdAt: FieldRef<"Case", 'DateTime'>
    readonly updatedAt: FieldRef<"Case", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Case findUnique
   */
  export type CaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findUniqueOrThrow
   */
  export type CaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case findFirst
   */
  export type CaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findFirstOrThrow
   */
  export type CaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Case to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cases.
     */
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case findMany
   */
  export type CaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter, which Cases to fetch.
     */
    where?: CaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cases to fetch.
     */
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cases.
     */
    cursor?: CaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cases.
     */
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * Case create
   */
  export type CaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Case.
     */
    data: XOR<CaseCreateInput, CaseUncheckedCreateInput>
  }

  /**
   * Case createMany
   */
  export type CaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Case createManyAndReturn
   */
  export type CaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to create many Cases.
     */
    data: CaseCreateManyInput | CaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case update
   */
  export type CaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Case.
     */
    data: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
    /**
     * Choose, which Case to update.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case updateMany
   */
  export type CaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
  }

  /**
   * Case updateManyAndReturn
   */
  export type CaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * The data used to update Cases.
     */
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyInput>
    /**
     * Filter which Cases to update
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Case upsert
   */
  export type CaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Case to update in case it exists.
     */
    where: CaseWhereUniqueInput
    /**
     * In case the Case found by the `where` argument doesn't exist, create a new Case with this data.
     */
    create: XOR<CaseCreateInput, CaseUncheckedCreateInput>
    /**
     * In case the Case was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseUpdateInput, CaseUncheckedUpdateInput>
  }

  /**
   * Case delete
   */
  export type CaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    /**
     * Filter which Case to delete.
     */
    where: CaseWhereUniqueInput
  }

  /**
   * Case deleteMany
   */
  export type CaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cases to delete
     */
    where?: CaseWhereInput
    /**
     * Limit how many Cases to delete.
     */
    limit?: number
  }

  /**
   * Case.chat
   */
  export type Case$chatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
  }

  /**
   * Case.files
   */
  export type Case$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Case.reports
   */
  export type Case$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Case without action
   */
  export type CaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
  }


  /**
   * Model Chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    caseId: string | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    caseId: number
    _all: number
  }


  export type ChatMinAggregateInputType = {
    id?: true
    caseId?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    caseId?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    caseId?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithAggregationInput | ChatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    id: string
    caseId: string
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    id?: boolean
    caseId?: boolean
  }

  export type ChatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId", ExtArgs["result"]["chat"]>
  export type ChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }
  export type ChatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
  }

  export type $ChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chat"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }

  type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = $Result.GetResult<Prisma.$ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatFindUniqueArgs>(args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatFindFirstArgs>(args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatFindManyArgs>(args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
     */
    create<T extends ChatCreateArgs>(args: SelectSubset<T, ChatCreateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chats.
     * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatCreateManyArgs>(args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chats and returns the data saved in the database.
     * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chats and only return the `id`
     * const chatWithIdOnly = await prisma.chat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
     */
    delete<T extends ChatDeleteArgs>(args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatUpdateArgs>(args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatDeleteManyArgs>(args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatUpdateManyArgs>(args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats and returns the data updated in the database.
     * @param {ChatUpdateManyAndReturnArgs} args - Arguments to update many Chats.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chats and only return the `id`
     * const chatWithIdOnly = await prisma.chat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
     */
    upsert<T extends ChatUpsertArgs>(args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends Chat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chat model
   */
  interface ChatFieldRefs {
    readonly id: FieldRef<"Chat", 'String'>
    readonly caseId: FieldRef<"Chat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Chat findUnique
   */
  export type ChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findFirst
   */
  export type ChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }

  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chat createManyAndReturn
   */
  export type ChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
    /**
     * Limit how many Chats to update.
     */
    limit?: number
  }

  /**
   * Chat updateManyAndReturn
   */
  export type ChatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
    /**
     * Limit how many Chats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }

  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
    /**
     * Limit how many Chats to delete.
     */
    limit?: number
  }

  /**
   * Chat.messages
   */
  export type Chat$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Chat without action
   */
  export type ChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chat
     */
    omit?: ChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    chatId: string | null
    sender: $Enums.Sender | null
    content: string | null
    date: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    chatId: string | null
    sender: $Enums.Sender | null
    content: string | null
    date: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    chatId: number
    sender: number
    content: number
    date: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    chatId?: true
    sender?: true
    content?: true
    date?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    chatId?: true
    sender?: true
    content?: true
    date?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    chatId?: true
    sender?: true
    content?: true
    date?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    chatId: string
    sender: $Enums.Sender
    content: string
    date: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatId?: boolean
    sender?: boolean
    content?: boolean
    date?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatId?: boolean
    sender?: boolean
    content?: boolean
    date?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatId?: boolean
    sender?: boolean
    content?: boolean
    date?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    chatId?: boolean
    sender?: boolean
    content?: boolean
    date?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chatId" | "sender" | "content" | "date", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      chat: Prisma.$ChatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chatId: string
      sender: $Enums.Sender
      content: string
      date: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat<T extends ChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatDefaultArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly chatId: FieldRef<"Message", 'String'>
    readonly sender: FieldRef<"Message", 'Sender'>
    readonly content: FieldRef<"Message", 'String'>
    readonly date: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    clientId: string | null
    professionalId: string | null
    name: string | null
    url: string | null
    type: string | null
    date: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    clientId: string | null
    professionalId: string | null
    name: string | null
    url: string | null
    type: string | null
    date: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    caseId: number
    clientId: number
    professionalId: number
    name: number
    url: number
    type: number
    date: number
    _all: number
  }


  export type FileMinAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    professionalId?: true
    name?: true
    url?: true
    type?: true
    date?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    professionalId?: true
    name?: true
    url?: true
    type?: true
    date?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    professionalId?: true
    name?: true
    url?: true
    type?: true
    date?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    caseId: string
    clientId: string | null
    professionalId: string | null
    name: string
    url: string
    type: string
    date: Date
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    professionalId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    date?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    professionalId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    date?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    professionalId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    date?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    professionalId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    date?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "clientId" | "professionalId" | "name" | "url" | "type" | "date", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | File$clientArgs<ExtArgs>
    professional?: boolean | File$professionalArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs> | null
      professional: Prisma.$ProfessionalPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      clientId: string | null
      professionalId: string | null
      name: string
      url: string
      type: string
      date: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends File$clientArgs<ExtArgs> = {}>(args?: Subset<T, File$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    professional<T extends File$professionalArgs<ExtArgs> = {}>(args?: Subset<T, File$professionalArgs<ExtArgs>>): Prisma__ProfessionalClient<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly caseId: FieldRef<"File", 'String'>
    readonly clientId: FieldRef<"File", 'String'>
    readonly professionalId: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly url: FieldRef<"File", 'String'>
    readonly type: FieldRef<"File", 'String'>
    readonly date: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.client
   */
  export type File$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * File.professional
   */
  export type File$professionalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    where?: ProfessionalWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    clientId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    clientId: string | null
    reason: string | null
    createdAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    caseId: number
    clientId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    reason?: true
    createdAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    caseId?: true
    clientId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    caseId: string
    clientId: string
    reason: string
    createdAt: Date
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    reason?: boolean
    createdAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    reason?: boolean
    createdAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    reason?: boolean
    createdAt?: boolean
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    caseId?: boolean
    clientId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "clientId" | "reason" | "createdAt", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | CaseDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      case: Prisma.$CasePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      clientId: string
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends CaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaseDefaultArgs<ExtArgs>>): Prisma__CaseClient<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly caseId: FieldRef<"Report", 'String'>
    readonly clientId: FieldRef<"Report", 'String'>
    readonly reason: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model Constellation
   */

  export type AggregateConstellation = {
    _count: ConstellationCountAggregateOutputType | null
    _min: ConstellationMinAggregateOutputType | null
    _max: ConstellationMaxAggregateOutputType | null
  }

  export type ConstellationMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type ConstellationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type ConstellationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type ConstellationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ConstellationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ConstellationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type ConstellationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Constellation to aggregate.
     */
    where?: ConstellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Constellations to fetch.
     */
    orderBy?: ConstellationOrderByWithRelationInput | ConstellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConstellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Constellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Constellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Constellations
    **/
    _count?: true | ConstellationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConstellationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConstellationMaxAggregateInputType
  }

  export type GetConstellationAggregateType<T extends ConstellationAggregateArgs> = {
        [P in keyof T & keyof AggregateConstellation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConstellation[P]>
      : GetScalarType<T[P], AggregateConstellation[P]>
  }




  export type ConstellationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConstellationWhereInput
    orderBy?: ConstellationOrderByWithAggregationInput | ConstellationOrderByWithAggregationInput[]
    by: ConstellationScalarFieldEnum[] | ConstellationScalarFieldEnum
    having?: ConstellationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConstellationCountAggregateInputType | true
    _min?: ConstellationMinAggregateInputType
    _max?: ConstellationMaxAggregateInputType
  }

  export type ConstellationGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: ConstellationCountAggregateOutputType | null
    _min: ConstellationMinAggregateOutputType | null
    _max: ConstellationMaxAggregateOutputType | null
  }

  type GetConstellationGroupByPayload<T extends ConstellationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConstellationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConstellationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConstellationGroupByOutputType[P]>
            : GetScalarType<T[P], ConstellationGroupByOutputType[P]>
        }
      >
    >


  export type ConstellationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    servers?: boolean | Constellation$serversArgs<ExtArgs>
    _count?: boolean | ConstellationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["constellation"]>

  export type ConstellationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["constellation"]>

  export type ConstellationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["constellation"]>

  export type ConstellationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type ConstellationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["constellation"]>
  export type ConstellationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servers?: boolean | Constellation$serversArgs<ExtArgs>
    _count?: boolean | ConstellationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConstellationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConstellationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConstellationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Constellation"
    objects: {
      servers: Prisma.$UnitServerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["constellation"]>
    composites: {}
  }

  type ConstellationGetPayload<S extends boolean | null | undefined | ConstellationDefaultArgs> = $Result.GetResult<Prisma.$ConstellationPayload, S>

  type ConstellationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConstellationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConstellationCountAggregateInputType | true
    }

  export interface ConstellationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Constellation'], meta: { name: 'Constellation' } }
    /**
     * Find zero or one Constellation that matches the filter.
     * @param {ConstellationFindUniqueArgs} args - Arguments to find a Constellation
     * @example
     * // Get one Constellation
     * const constellation = await prisma.constellation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConstellationFindUniqueArgs>(args: SelectSubset<T, ConstellationFindUniqueArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Constellation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConstellationFindUniqueOrThrowArgs} args - Arguments to find a Constellation
     * @example
     * // Get one Constellation
     * const constellation = await prisma.constellation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConstellationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConstellationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Constellation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationFindFirstArgs} args - Arguments to find a Constellation
     * @example
     * // Get one Constellation
     * const constellation = await prisma.constellation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConstellationFindFirstArgs>(args?: SelectSubset<T, ConstellationFindFirstArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Constellation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationFindFirstOrThrowArgs} args - Arguments to find a Constellation
     * @example
     * // Get one Constellation
     * const constellation = await prisma.constellation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConstellationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConstellationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Constellations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Constellations
     * const constellations = await prisma.constellation.findMany()
     * 
     * // Get first 10 Constellations
     * const constellations = await prisma.constellation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const constellationWithIdOnly = await prisma.constellation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConstellationFindManyArgs>(args?: SelectSubset<T, ConstellationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Constellation.
     * @param {ConstellationCreateArgs} args - Arguments to create a Constellation.
     * @example
     * // Create one Constellation
     * const Constellation = await prisma.constellation.create({
     *   data: {
     *     // ... data to create a Constellation
     *   }
     * })
     * 
     */
    create<T extends ConstellationCreateArgs>(args: SelectSubset<T, ConstellationCreateArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Constellations.
     * @param {ConstellationCreateManyArgs} args - Arguments to create many Constellations.
     * @example
     * // Create many Constellations
     * const constellation = await prisma.constellation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConstellationCreateManyArgs>(args?: SelectSubset<T, ConstellationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Constellations and returns the data saved in the database.
     * @param {ConstellationCreateManyAndReturnArgs} args - Arguments to create many Constellations.
     * @example
     * // Create many Constellations
     * const constellation = await prisma.constellation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Constellations and only return the `id`
     * const constellationWithIdOnly = await prisma.constellation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConstellationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConstellationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Constellation.
     * @param {ConstellationDeleteArgs} args - Arguments to delete one Constellation.
     * @example
     * // Delete one Constellation
     * const Constellation = await prisma.constellation.delete({
     *   where: {
     *     // ... filter to delete one Constellation
     *   }
     * })
     * 
     */
    delete<T extends ConstellationDeleteArgs>(args: SelectSubset<T, ConstellationDeleteArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Constellation.
     * @param {ConstellationUpdateArgs} args - Arguments to update one Constellation.
     * @example
     * // Update one Constellation
     * const constellation = await prisma.constellation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConstellationUpdateArgs>(args: SelectSubset<T, ConstellationUpdateArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Constellations.
     * @param {ConstellationDeleteManyArgs} args - Arguments to filter Constellations to delete.
     * @example
     * // Delete a few Constellations
     * const { count } = await prisma.constellation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConstellationDeleteManyArgs>(args?: SelectSubset<T, ConstellationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Constellations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Constellations
     * const constellation = await prisma.constellation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConstellationUpdateManyArgs>(args: SelectSubset<T, ConstellationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Constellations and returns the data updated in the database.
     * @param {ConstellationUpdateManyAndReturnArgs} args - Arguments to update many Constellations.
     * @example
     * // Update many Constellations
     * const constellation = await prisma.constellation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Constellations and only return the `id`
     * const constellationWithIdOnly = await prisma.constellation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConstellationUpdateManyAndReturnArgs>(args: SelectSubset<T, ConstellationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Constellation.
     * @param {ConstellationUpsertArgs} args - Arguments to update or create a Constellation.
     * @example
     * // Update or create a Constellation
     * const constellation = await prisma.constellation.upsert({
     *   create: {
     *     // ... data to create a Constellation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Constellation we want to update
     *   }
     * })
     */
    upsert<T extends ConstellationUpsertArgs>(args: SelectSubset<T, ConstellationUpsertArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Constellations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationCountArgs} args - Arguments to filter Constellations to count.
     * @example
     * // Count the number of Constellations
     * const count = await prisma.constellation.count({
     *   where: {
     *     // ... the filter for the Constellations we want to count
     *   }
     * })
    **/
    count<T extends ConstellationCountArgs>(
      args?: Subset<T, ConstellationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConstellationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Constellation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConstellationAggregateArgs>(args: Subset<T, ConstellationAggregateArgs>): Prisma.PrismaPromise<GetConstellationAggregateType<T>>

    /**
     * Group by Constellation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstellationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConstellationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConstellationGroupByArgs['orderBy'] }
        : { orderBy?: ConstellationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConstellationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConstellationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Constellation model
   */
  readonly fields: ConstellationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Constellation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConstellationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    servers<T extends Constellation$serversArgs<ExtArgs> = {}>(args?: Subset<T, Constellation$serversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Constellation model
   */
  interface ConstellationFieldRefs {
    readonly id: FieldRef<"Constellation", 'String'>
    readonly name: FieldRef<"Constellation", 'String'>
    readonly description: FieldRef<"Constellation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Constellation findUnique
   */
  export type ConstellationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter, which Constellation to fetch.
     */
    where: ConstellationWhereUniqueInput
  }

  /**
   * Constellation findUniqueOrThrow
   */
  export type ConstellationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter, which Constellation to fetch.
     */
    where: ConstellationWhereUniqueInput
  }

  /**
   * Constellation findFirst
   */
  export type ConstellationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter, which Constellation to fetch.
     */
    where?: ConstellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Constellations to fetch.
     */
    orderBy?: ConstellationOrderByWithRelationInput | ConstellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Constellations.
     */
    cursor?: ConstellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Constellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Constellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Constellations.
     */
    distinct?: ConstellationScalarFieldEnum | ConstellationScalarFieldEnum[]
  }

  /**
   * Constellation findFirstOrThrow
   */
  export type ConstellationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter, which Constellation to fetch.
     */
    where?: ConstellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Constellations to fetch.
     */
    orderBy?: ConstellationOrderByWithRelationInput | ConstellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Constellations.
     */
    cursor?: ConstellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Constellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Constellations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Constellations.
     */
    distinct?: ConstellationScalarFieldEnum | ConstellationScalarFieldEnum[]
  }

  /**
   * Constellation findMany
   */
  export type ConstellationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter, which Constellations to fetch.
     */
    where?: ConstellationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Constellations to fetch.
     */
    orderBy?: ConstellationOrderByWithRelationInput | ConstellationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Constellations.
     */
    cursor?: ConstellationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Constellations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Constellations.
     */
    skip?: number
    distinct?: ConstellationScalarFieldEnum | ConstellationScalarFieldEnum[]
  }

  /**
   * Constellation create
   */
  export type ConstellationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * The data needed to create a Constellation.
     */
    data: XOR<ConstellationCreateInput, ConstellationUncheckedCreateInput>
  }

  /**
   * Constellation createMany
   */
  export type ConstellationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Constellations.
     */
    data: ConstellationCreateManyInput | ConstellationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Constellation createManyAndReturn
   */
  export type ConstellationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * The data used to create many Constellations.
     */
    data: ConstellationCreateManyInput | ConstellationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Constellation update
   */
  export type ConstellationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * The data needed to update a Constellation.
     */
    data: XOR<ConstellationUpdateInput, ConstellationUncheckedUpdateInput>
    /**
     * Choose, which Constellation to update.
     */
    where: ConstellationWhereUniqueInput
  }

  /**
   * Constellation updateMany
   */
  export type ConstellationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Constellations.
     */
    data: XOR<ConstellationUpdateManyMutationInput, ConstellationUncheckedUpdateManyInput>
    /**
     * Filter which Constellations to update
     */
    where?: ConstellationWhereInput
    /**
     * Limit how many Constellations to update.
     */
    limit?: number
  }

  /**
   * Constellation updateManyAndReturn
   */
  export type ConstellationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * The data used to update Constellations.
     */
    data: XOR<ConstellationUpdateManyMutationInput, ConstellationUncheckedUpdateManyInput>
    /**
     * Filter which Constellations to update
     */
    where?: ConstellationWhereInput
    /**
     * Limit how many Constellations to update.
     */
    limit?: number
  }

  /**
   * Constellation upsert
   */
  export type ConstellationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * The filter to search for the Constellation to update in case it exists.
     */
    where: ConstellationWhereUniqueInput
    /**
     * In case the Constellation found by the `where` argument doesn't exist, create a new Constellation with this data.
     */
    create: XOR<ConstellationCreateInput, ConstellationUncheckedCreateInput>
    /**
     * In case the Constellation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConstellationUpdateInput, ConstellationUncheckedUpdateInput>
  }

  /**
   * Constellation delete
   */
  export type ConstellationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
    /**
     * Filter which Constellation to delete.
     */
    where: ConstellationWhereUniqueInput
  }

  /**
   * Constellation deleteMany
   */
  export type ConstellationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Constellations to delete
     */
    where?: ConstellationWhereInput
    /**
     * Limit how many Constellations to delete.
     */
    limit?: number
  }

  /**
   * Constellation.servers
   */
  export type Constellation$serversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    where?: UnitServerWhereInput
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    cursor?: UnitServerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitServerScalarFieldEnum | UnitServerScalarFieldEnum[]
  }

  /**
   * Constellation without action
   */
  export type ConstellationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Constellation
     */
    select?: ConstellationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Constellation
     */
    omit?: ConstellationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstellationInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    order: number | null
  }

  export type SectionSumAggregateOutputType = {
    order: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    type: $Enums.SectionType | null
    title: string | null
    content: string | null
    order: number | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    type: $Enums.SectionType | null
    title: string | null
    content: string | null
    order: number | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    configId: number
    serverId: number
    type: number
    title: number
    content: number
    order: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    order?: true
  }

  export type SectionSumAggregateInputType = {
    order?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    type?: true
    title?: true
    content?: true
    order?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    type?: true
    title?: true
    content?: true
    order?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    type?: true
    title?: true
    content?: true
    order?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    configId: string
    serverId: string | null
    type: $Enums.SectionType
    title: string
    content: string
    order: number
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    configId?: boolean
    serverId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    order?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "configId" | "serverId" | "type" | "title" | "content" | "order", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }
  export type SectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | Section$serverArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      config: Prisma.$UnitConfigPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      configId: string
      serverId: string | null
      type: $Enums.SectionType
      title: string
      content: string
      order: number
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections and returns the data updated in the database.
     * @param {SectionUpdateManyAndReturnArgs} args - Arguments to update many Sections.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    config<T extends UnitConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfigDefaultArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends Section$serverArgs<ExtArgs> = {}>(args?: Subset<T, Section$serverArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly configId: FieldRef<"Section", 'String'>
    readonly serverId: FieldRef<"Section", 'String'>
    readonly type: FieldRef<"Section", 'SectionType'>
    readonly title: FieldRef<"Section", 'String'>
    readonly content: FieldRef<"Section", 'String'>
    readonly order: FieldRef<"Section", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section updateManyAndReturn
   */
  export type SectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.server
   */
  export type Section$serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    where?: UnitServerWhereInput
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model ManualArticle
   */

  export type AggregateManualArticle = {
    _count: ManualArticleCountAggregateOutputType | null
    _min: ManualArticleMinAggregateOutputType | null
    _max: ManualArticleMaxAggregateOutputType | null
  }

  export type ManualArticleMinAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    title: string | null
    content: string | null
    publishedAt: Date | null
  }

  export type ManualArticleMaxAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    title: string | null
    content: string | null
    publishedAt: Date | null
  }

  export type ManualArticleCountAggregateOutputType = {
    id: number
    configId: number
    serverId: number
    title: number
    content: number
    publishedAt: number
    _all: number
  }


  export type ManualArticleMinAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    title?: true
    content?: true
    publishedAt?: true
  }

  export type ManualArticleMaxAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    title?: true
    content?: true
    publishedAt?: true
  }

  export type ManualArticleCountAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    title?: true
    content?: true
    publishedAt?: true
    _all?: true
  }

  export type ManualArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManualArticle to aggregate.
     */
    where?: ManualArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualArticles to fetch.
     */
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManualArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ManualArticles
    **/
    _count?: true | ManualArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManualArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManualArticleMaxAggregateInputType
  }

  export type GetManualArticleAggregateType<T extends ManualArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateManualArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManualArticle[P]>
      : GetScalarType<T[P], AggregateManualArticle[P]>
  }




  export type ManualArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManualArticleWhereInput
    orderBy?: ManualArticleOrderByWithAggregationInput | ManualArticleOrderByWithAggregationInput[]
    by: ManualArticleScalarFieldEnum[] | ManualArticleScalarFieldEnum
    having?: ManualArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManualArticleCountAggregateInputType | true
    _min?: ManualArticleMinAggregateInputType
    _max?: ManualArticleMaxAggregateInputType
  }

  export type ManualArticleGroupByOutputType = {
    id: string
    configId: string
    serverId: string | null
    title: string
    content: string
    publishedAt: Date
    _count: ManualArticleCountAggregateOutputType | null
    _min: ManualArticleMinAggregateOutputType | null
    _max: ManualArticleMaxAggregateOutputType | null
  }

  type GetManualArticleGroupByPayload<T extends ManualArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManualArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManualArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManualArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ManualArticleGroupByOutputType[P]>
        }
      >
    >


  export type ManualArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    title?: boolean
    content?: boolean
    publishedAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }, ExtArgs["result"]["manualArticle"]>

  export type ManualArticleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    title?: boolean
    content?: boolean
    publishedAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }, ExtArgs["result"]["manualArticle"]>

  export type ManualArticleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    title?: boolean
    content?: boolean
    publishedAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }, ExtArgs["result"]["manualArticle"]>

  export type ManualArticleSelectScalar = {
    id?: boolean
    configId?: boolean
    serverId?: boolean
    title?: boolean
    content?: boolean
    publishedAt?: boolean
  }

  export type ManualArticleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "configId" | "serverId" | "title" | "content" | "publishedAt", ExtArgs["result"]["manualArticle"]>
  export type ManualArticleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }
  export type ManualArticleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }
  export type ManualArticleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | ManualArticle$serverArgs<ExtArgs>
  }

  export type $ManualArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ManualArticle"
    objects: {
      config: Prisma.$UnitConfigPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      configId: string
      serverId: string | null
      title: string
      content: string
      publishedAt: Date
    }, ExtArgs["result"]["manualArticle"]>
    composites: {}
  }

  type ManualArticleGetPayload<S extends boolean | null | undefined | ManualArticleDefaultArgs> = $Result.GetResult<Prisma.$ManualArticlePayload, S>

  type ManualArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ManualArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ManualArticleCountAggregateInputType | true
    }

  export interface ManualArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ManualArticle'], meta: { name: 'ManualArticle' } }
    /**
     * Find zero or one ManualArticle that matches the filter.
     * @param {ManualArticleFindUniqueArgs} args - Arguments to find a ManualArticle
     * @example
     * // Get one ManualArticle
     * const manualArticle = await prisma.manualArticle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManualArticleFindUniqueArgs>(args: SelectSubset<T, ManualArticleFindUniqueArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ManualArticle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ManualArticleFindUniqueOrThrowArgs} args - Arguments to find a ManualArticle
     * @example
     * // Get one ManualArticle
     * const manualArticle = await prisma.manualArticle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManualArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, ManualArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ManualArticle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleFindFirstArgs} args - Arguments to find a ManualArticle
     * @example
     * // Get one ManualArticle
     * const manualArticle = await prisma.manualArticle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManualArticleFindFirstArgs>(args?: SelectSubset<T, ManualArticleFindFirstArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ManualArticle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleFindFirstOrThrowArgs} args - Arguments to find a ManualArticle
     * @example
     * // Get one ManualArticle
     * const manualArticle = await prisma.manualArticle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManualArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, ManualArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ManualArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManualArticles
     * const manualArticles = await prisma.manualArticle.findMany()
     * 
     * // Get first 10 ManualArticles
     * const manualArticles = await prisma.manualArticle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manualArticleWithIdOnly = await prisma.manualArticle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManualArticleFindManyArgs>(args?: SelectSubset<T, ManualArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ManualArticle.
     * @param {ManualArticleCreateArgs} args - Arguments to create a ManualArticle.
     * @example
     * // Create one ManualArticle
     * const ManualArticle = await prisma.manualArticle.create({
     *   data: {
     *     // ... data to create a ManualArticle
     *   }
     * })
     * 
     */
    create<T extends ManualArticleCreateArgs>(args: SelectSubset<T, ManualArticleCreateArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ManualArticles.
     * @param {ManualArticleCreateManyArgs} args - Arguments to create many ManualArticles.
     * @example
     * // Create many ManualArticles
     * const manualArticle = await prisma.manualArticle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManualArticleCreateManyArgs>(args?: SelectSubset<T, ManualArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ManualArticles and returns the data saved in the database.
     * @param {ManualArticleCreateManyAndReturnArgs} args - Arguments to create many ManualArticles.
     * @example
     * // Create many ManualArticles
     * const manualArticle = await prisma.manualArticle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ManualArticles and only return the `id`
     * const manualArticleWithIdOnly = await prisma.manualArticle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ManualArticleCreateManyAndReturnArgs>(args?: SelectSubset<T, ManualArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ManualArticle.
     * @param {ManualArticleDeleteArgs} args - Arguments to delete one ManualArticle.
     * @example
     * // Delete one ManualArticle
     * const ManualArticle = await prisma.manualArticle.delete({
     *   where: {
     *     // ... filter to delete one ManualArticle
     *   }
     * })
     * 
     */
    delete<T extends ManualArticleDeleteArgs>(args: SelectSubset<T, ManualArticleDeleteArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ManualArticle.
     * @param {ManualArticleUpdateArgs} args - Arguments to update one ManualArticle.
     * @example
     * // Update one ManualArticle
     * const manualArticle = await prisma.manualArticle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManualArticleUpdateArgs>(args: SelectSubset<T, ManualArticleUpdateArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ManualArticles.
     * @param {ManualArticleDeleteManyArgs} args - Arguments to filter ManualArticles to delete.
     * @example
     * // Delete a few ManualArticles
     * const { count } = await prisma.manualArticle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManualArticleDeleteManyArgs>(args?: SelectSubset<T, ManualArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManualArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManualArticles
     * const manualArticle = await prisma.manualArticle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManualArticleUpdateManyArgs>(args: SelectSubset<T, ManualArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManualArticles and returns the data updated in the database.
     * @param {ManualArticleUpdateManyAndReturnArgs} args - Arguments to update many ManualArticles.
     * @example
     * // Update many ManualArticles
     * const manualArticle = await prisma.manualArticle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ManualArticles and only return the `id`
     * const manualArticleWithIdOnly = await prisma.manualArticle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ManualArticleUpdateManyAndReturnArgs>(args: SelectSubset<T, ManualArticleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ManualArticle.
     * @param {ManualArticleUpsertArgs} args - Arguments to update or create a ManualArticle.
     * @example
     * // Update or create a ManualArticle
     * const manualArticle = await prisma.manualArticle.upsert({
     *   create: {
     *     // ... data to create a ManualArticle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManualArticle we want to update
     *   }
     * })
     */
    upsert<T extends ManualArticleUpsertArgs>(args: SelectSubset<T, ManualArticleUpsertArgs<ExtArgs>>): Prisma__ManualArticleClient<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ManualArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleCountArgs} args - Arguments to filter ManualArticles to count.
     * @example
     * // Count the number of ManualArticles
     * const count = await prisma.manualArticle.count({
     *   where: {
     *     // ... the filter for the ManualArticles we want to count
     *   }
     * })
    **/
    count<T extends ManualArticleCountArgs>(
      args?: Subset<T, ManualArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManualArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ManualArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManualArticleAggregateArgs>(args: Subset<T, ManualArticleAggregateArgs>): Prisma.PrismaPromise<GetManualArticleAggregateType<T>>

    /**
     * Group by ManualArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManualArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManualArticleGroupByArgs['orderBy'] }
        : { orderBy?: ManualArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManualArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManualArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ManualArticle model
   */
  readonly fields: ManualArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ManualArticle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManualArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    config<T extends UnitConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfigDefaultArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends ManualArticle$serverArgs<ExtArgs> = {}>(args?: Subset<T, ManualArticle$serverArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ManualArticle model
   */
  interface ManualArticleFieldRefs {
    readonly id: FieldRef<"ManualArticle", 'String'>
    readonly configId: FieldRef<"ManualArticle", 'String'>
    readonly serverId: FieldRef<"ManualArticle", 'String'>
    readonly title: FieldRef<"ManualArticle", 'String'>
    readonly content: FieldRef<"ManualArticle", 'String'>
    readonly publishedAt: FieldRef<"ManualArticle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ManualArticle findUnique
   */
  export type ManualArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter, which ManualArticle to fetch.
     */
    where: ManualArticleWhereUniqueInput
  }

  /**
   * ManualArticle findUniqueOrThrow
   */
  export type ManualArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter, which ManualArticle to fetch.
     */
    where: ManualArticleWhereUniqueInput
  }

  /**
   * ManualArticle findFirst
   */
  export type ManualArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter, which ManualArticle to fetch.
     */
    where?: ManualArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualArticles to fetch.
     */
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManualArticles.
     */
    cursor?: ManualArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManualArticles.
     */
    distinct?: ManualArticleScalarFieldEnum | ManualArticleScalarFieldEnum[]
  }

  /**
   * ManualArticle findFirstOrThrow
   */
  export type ManualArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter, which ManualArticle to fetch.
     */
    where?: ManualArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualArticles to fetch.
     */
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManualArticles.
     */
    cursor?: ManualArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManualArticles.
     */
    distinct?: ManualArticleScalarFieldEnum | ManualArticleScalarFieldEnum[]
  }

  /**
   * ManualArticle findMany
   */
  export type ManualArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter, which ManualArticles to fetch.
     */
    where?: ManualArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualArticles to fetch.
     */
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ManualArticles.
     */
    cursor?: ManualArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualArticles.
     */
    skip?: number
    distinct?: ManualArticleScalarFieldEnum | ManualArticleScalarFieldEnum[]
  }

  /**
   * ManualArticle create
   */
  export type ManualArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * The data needed to create a ManualArticle.
     */
    data: XOR<ManualArticleCreateInput, ManualArticleUncheckedCreateInput>
  }

  /**
   * ManualArticle createMany
   */
  export type ManualArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ManualArticles.
     */
    data: ManualArticleCreateManyInput | ManualArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ManualArticle createManyAndReturn
   */
  export type ManualArticleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * The data used to create many ManualArticles.
     */
    data: ManualArticleCreateManyInput | ManualArticleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ManualArticle update
   */
  export type ManualArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * The data needed to update a ManualArticle.
     */
    data: XOR<ManualArticleUpdateInput, ManualArticleUncheckedUpdateInput>
    /**
     * Choose, which ManualArticle to update.
     */
    where: ManualArticleWhereUniqueInput
  }

  /**
   * ManualArticle updateMany
   */
  export type ManualArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ManualArticles.
     */
    data: XOR<ManualArticleUpdateManyMutationInput, ManualArticleUncheckedUpdateManyInput>
    /**
     * Filter which ManualArticles to update
     */
    where?: ManualArticleWhereInput
    /**
     * Limit how many ManualArticles to update.
     */
    limit?: number
  }

  /**
   * ManualArticle updateManyAndReturn
   */
  export type ManualArticleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * The data used to update ManualArticles.
     */
    data: XOR<ManualArticleUpdateManyMutationInput, ManualArticleUncheckedUpdateManyInput>
    /**
     * Filter which ManualArticles to update
     */
    where?: ManualArticleWhereInput
    /**
     * Limit how many ManualArticles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ManualArticle upsert
   */
  export type ManualArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * The filter to search for the ManualArticle to update in case it exists.
     */
    where: ManualArticleWhereUniqueInput
    /**
     * In case the ManualArticle found by the `where` argument doesn't exist, create a new ManualArticle with this data.
     */
    create: XOR<ManualArticleCreateInput, ManualArticleUncheckedCreateInput>
    /**
     * In case the ManualArticle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManualArticleUpdateInput, ManualArticleUncheckedUpdateInput>
  }

  /**
   * ManualArticle delete
   */
  export type ManualArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    /**
     * Filter which ManualArticle to delete.
     */
    where: ManualArticleWhereUniqueInput
  }

  /**
   * ManualArticle deleteMany
   */
  export type ManualArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManualArticles to delete
     */
    where?: ManualArticleWhereInput
    /**
     * Limit how many ManualArticles to delete.
     */
    limit?: number
  }

  /**
   * ManualArticle.server
   */
  export type ManualArticle$serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    where?: UnitServerWhereInput
  }

  /**
   * ManualArticle without action
   */
  export type ManualArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
  }


  /**
   * Model AutoSource
   */

  export type AggregateAutoSource = {
    _count: AutoSourceCountAggregateOutputType | null
    _min: AutoSourceMinAggregateOutputType | null
    _max: AutoSourceMaxAggregateOutputType | null
  }

  export type AutoSourceMinAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    name: string | null
    url: string | null
    type: string | null
    createdAt: Date | null
  }

  export type AutoSourceMaxAggregateOutputType = {
    id: string | null
    configId: string | null
    serverId: string | null
    name: string | null
    url: string | null
    type: string | null
    createdAt: Date | null
  }

  export type AutoSourceCountAggregateOutputType = {
    id: number
    configId: number
    serverId: number
    name: number
    url: number
    type: number
    createdAt: number
    _all: number
  }


  export type AutoSourceMinAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    name?: true
    url?: true
    type?: true
    createdAt?: true
  }

  export type AutoSourceMaxAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    name?: true
    url?: true
    type?: true
    createdAt?: true
  }

  export type AutoSourceCountAggregateInputType = {
    id?: true
    configId?: true
    serverId?: true
    name?: true
    url?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type AutoSourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AutoSource to aggregate.
     */
    where?: AutoSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutoSources to fetch.
     */
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AutoSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutoSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutoSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AutoSources
    **/
    _count?: true | AutoSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutoSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutoSourceMaxAggregateInputType
  }

  export type GetAutoSourceAggregateType<T extends AutoSourceAggregateArgs> = {
        [P in keyof T & keyof AggregateAutoSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutoSource[P]>
      : GetScalarType<T[P], AggregateAutoSource[P]>
  }




  export type AutoSourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutoSourceWhereInput
    orderBy?: AutoSourceOrderByWithAggregationInput | AutoSourceOrderByWithAggregationInput[]
    by: AutoSourceScalarFieldEnum[] | AutoSourceScalarFieldEnum
    having?: AutoSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutoSourceCountAggregateInputType | true
    _min?: AutoSourceMinAggregateInputType
    _max?: AutoSourceMaxAggregateInputType
  }

  export type AutoSourceGroupByOutputType = {
    id: string
    configId: string
    serverId: string | null
    name: string
    url: string
    type: string
    createdAt: Date
    _count: AutoSourceCountAggregateOutputType | null
    _min: AutoSourceMinAggregateOutputType | null
    _max: AutoSourceMaxAggregateOutputType | null
  }

  type GetAutoSourceGroupByPayload<T extends AutoSourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AutoSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutoSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutoSourceGroupByOutputType[P]>
            : GetScalarType<T[P], AutoSourceGroupByOutputType[P]>
        }
      >
    >


  export type AutoSourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }, ExtArgs["result"]["autoSource"]>

  export type AutoSourceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }, ExtArgs["result"]["autoSource"]>

  export type AutoSourceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    serverId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }, ExtArgs["result"]["autoSource"]>

  export type AutoSourceSelectScalar = {
    id?: boolean
    configId?: boolean
    serverId?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type AutoSourceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "configId" | "serverId" | "name" | "url" | "type" | "createdAt", ExtArgs["result"]["autoSource"]>
  export type AutoSourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }
  export type AutoSourceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }
  export type AutoSourceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
    server?: boolean | AutoSource$serverArgs<ExtArgs>
  }

  export type $AutoSourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AutoSource"
    objects: {
      config: Prisma.$UnitConfigPayload<ExtArgs>
      server: Prisma.$UnitServerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      configId: string
      serverId: string | null
      name: string
      url: string
      type: string
      createdAt: Date
    }, ExtArgs["result"]["autoSource"]>
    composites: {}
  }

  type AutoSourceGetPayload<S extends boolean | null | undefined | AutoSourceDefaultArgs> = $Result.GetResult<Prisma.$AutoSourcePayload, S>

  type AutoSourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AutoSourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AutoSourceCountAggregateInputType | true
    }

  export interface AutoSourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AutoSource'], meta: { name: 'AutoSource' } }
    /**
     * Find zero or one AutoSource that matches the filter.
     * @param {AutoSourceFindUniqueArgs} args - Arguments to find a AutoSource
     * @example
     * // Get one AutoSource
     * const autoSource = await prisma.autoSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AutoSourceFindUniqueArgs>(args: SelectSubset<T, AutoSourceFindUniqueArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AutoSource that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AutoSourceFindUniqueOrThrowArgs} args - Arguments to find a AutoSource
     * @example
     * // Get one AutoSource
     * const autoSource = await prisma.autoSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AutoSourceFindUniqueOrThrowArgs>(args: SelectSubset<T, AutoSourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AutoSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceFindFirstArgs} args - Arguments to find a AutoSource
     * @example
     * // Get one AutoSource
     * const autoSource = await prisma.autoSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AutoSourceFindFirstArgs>(args?: SelectSubset<T, AutoSourceFindFirstArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AutoSource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceFindFirstOrThrowArgs} args - Arguments to find a AutoSource
     * @example
     * // Get one AutoSource
     * const autoSource = await prisma.autoSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AutoSourceFindFirstOrThrowArgs>(args?: SelectSubset<T, AutoSourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AutoSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AutoSources
     * const autoSources = await prisma.autoSource.findMany()
     * 
     * // Get first 10 AutoSources
     * const autoSources = await prisma.autoSource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const autoSourceWithIdOnly = await prisma.autoSource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AutoSourceFindManyArgs>(args?: SelectSubset<T, AutoSourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AutoSource.
     * @param {AutoSourceCreateArgs} args - Arguments to create a AutoSource.
     * @example
     * // Create one AutoSource
     * const AutoSource = await prisma.autoSource.create({
     *   data: {
     *     // ... data to create a AutoSource
     *   }
     * })
     * 
     */
    create<T extends AutoSourceCreateArgs>(args: SelectSubset<T, AutoSourceCreateArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AutoSources.
     * @param {AutoSourceCreateManyArgs} args - Arguments to create many AutoSources.
     * @example
     * // Create many AutoSources
     * const autoSource = await prisma.autoSource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AutoSourceCreateManyArgs>(args?: SelectSubset<T, AutoSourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AutoSources and returns the data saved in the database.
     * @param {AutoSourceCreateManyAndReturnArgs} args - Arguments to create many AutoSources.
     * @example
     * // Create many AutoSources
     * const autoSource = await prisma.autoSource.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AutoSources and only return the `id`
     * const autoSourceWithIdOnly = await prisma.autoSource.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AutoSourceCreateManyAndReturnArgs>(args?: SelectSubset<T, AutoSourceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AutoSource.
     * @param {AutoSourceDeleteArgs} args - Arguments to delete one AutoSource.
     * @example
     * // Delete one AutoSource
     * const AutoSource = await prisma.autoSource.delete({
     *   where: {
     *     // ... filter to delete one AutoSource
     *   }
     * })
     * 
     */
    delete<T extends AutoSourceDeleteArgs>(args: SelectSubset<T, AutoSourceDeleteArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AutoSource.
     * @param {AutoSourceUpdateArgs} args - Arguments to update one AutoSource.
     * @example
     * // Update one AutoSource
     * const autoSource = await prisma.autoSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AutoSourceUpdateArgs>(args: SelectSubset<T, AutoSourceUpdateArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AutoSources.
     * @param {AutoSourceDeleteManyArgs} args - Arguments to filter AutoSources to delete.
     * @example
     * // Delete a few AutoSources
     * const { count } = await prisma.autoSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AutoSourceDeleteManyArgs>(args?: SelectSubset<T, AutoSourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AutoSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AutoSources
     * const autoSource = await prisma.autoSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AutoSourceUpdateManyArgs>(args: SelectSubset<T, AutoSourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AutoSources and returns the data updated in the database.
     * @param {AutoSourceUpdateManyAndReturnArgs} args - Arguments to update many AutoSources.
     * @example
     * // Update many AutoSources
     * const autoSource = await prisma.autoSource.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AutoSources and only return the `id`
     * const autoSourceWithIdOnly = await prisma.autoSource.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AutoSourceUpdateManyAndReturnArgs>(args: SelectSubset<T, AutoSourceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AutoSource.
     * @param {AutoSourceUpsertArgs} args - Arguments to update or create a AutoSource.
     * @example
     * // Update or create a AutoSource
     * const autoSource = await prisma.autoSource.upsert({
     *   create: {
     *     // ... data to create a AutoSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AutoSource we want to update
     *   }
     * })
     */
    upsert<T extends AutoSourceUpsertArgs>(args: SelectSubset<T, AutoSourceUpsertArgs<ExtArgs>>): Prisma__AutoSourceClient<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AutoSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceCountArgs} args - Arguments to filter AutoSources to count.
     * @example
     * // Count the number of AutoSources
     * const count = await prisma.autoSource.count({
     *   where: {
     *     // ... the filter for the AutoSources we want to count
     *   }
     * })
    **/
    count<T extends AutoSourceCountArgs>(
      args?: Subset<T, AutoSourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutoSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AutoSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutoSourceAggregateArgs>(args: Subset<T, AutoSourceAggregateArgs>): Prisma.PrismaPromise<GetAutoSourceAggregateType<T>>

    /**
     * Group by AutoSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutoSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutoSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutoSourceGroupByArgs['orderBy'] }
        : { orderBy?: AutoSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutoSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutoSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AutoSource model
   */
  readonly fields: AutoSourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AutoSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AutoSourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    config<T extends UnitConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfigDefaultArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    server<T extends AutoSource$serverArgs<ExtArgs> = {}>(args?: Subset<T, AutoSource$serverArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AutoSource model
   */
  interface AutoSourceFieldRefs {
    readonly id: FieldRef<"AutoSource", 'String'>
    readonly configId: FieldRef<"AutoSource", 'String'>
    readonly serverId: FieldRef<"AutoSource", 'String'>
    readonly name: FieldRef<"AutoSource", 'String'>
    readonly url: FieldRef<"AutoSource", 'String'>
    readonly type: FieldRef<"AutoSource", 'String'>
    readonly createdAt: FieldRef<"AutoSource", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AutoSource findUnique
   */
  export type AutoSourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter, which AutoSource to fetch.
     */
    where: AutoSourceWhereUniqueInput
  }

  /**
   * AutoSource findUniqueOrThrow
   */
  export type AutoSourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter, which AutoSource to fetch.
     */
    where: AutoSourceWhereUniqueInput
  }

  /**
   * AutoSource findFirst
   */
  export type AutoSourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter, which AutoSource to fetch.
     */
    where?: AutoSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutoSources to fetch.
     */
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AutoSources.
     */
    cursor?: AutoSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutoSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutoSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AutoSources.
     */
    distinct?: AutoSourceScalarFieldEnum | AutoSourceScalarFieldEnum[]
  }

  /**
   * AutoSource findFirstOrThrow
   */
  export type AutoSourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter, which AutoSource to fetch.
     */
    where?: AutoSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutoSources to fetch.
     */
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AutoSources.
     */
    cursor?: AutoSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutoSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutoSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AutoSources.
     */
    distinct?: AutoSourceScalarFieldEnum | AutoSourceScalarFieldEnum[]
  }

  /**
   * AutoSource findMany
   */
  export type AutoSourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter, which AutoSources to fetch.
     */
    where?: AutoSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutoSources to fetch.
     */
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AutoSources.
     */
    cursor?: AutoSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutoSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutoSources.
     */
    skip?: number
    distinct?: AutoSourceScalarFieldEnum | AutoSourceScalarFieldEnum[]
  }

  /**
   * AutoSource create
   */
  export type AutoSourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * The data needed to create a AutoSource.
     */
    data: XOR<AutoSourceCreateInput, AutoSourceUncheckedCreateInput>
  }

  /**
   * AutoSource createMany
   */
  export type AutoSourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AutoSources.
     */
    data: AutoSourceCreateManyInput | AutoSourceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AutoSource createManyAndReturn
   */
  export type AutoSourceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * The data used to create many AutoSources.
     */
    data: AutoSourceCreateManyInput | AutoSourceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AutoSource update
   */
  export type AutoSourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * The data needed to update a AutoSource.
     */
    data: XOR<AutoSourceUpdateInput, AutoSourceUncheckedUpdateInput>
    /**
     * Choose, which AutoSource to update.
     */
    where: AutoSourceWhereUniqueInput
  }

  /**
   * AutoSource updateMany
   */
  export type AutoSourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AutoSources.
     */
    data: XOR<AutoSourceUpdateManyMutationInput, AutoSourceUncheckedUpdateManyInput>
    /**
     * Filter which AutoSources to update
     */
    where?: AutoSourceWhereInput
    /**
     * Limit how many AutoSources to update.
     */
    limit?: number
  }

  /**
   * AutoSource updateManyAndReturn
   */
  export type AutoSourceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * The data used to update AutoSources.
     */
    data: XOR<AutoSourceUpdateManyMutationInput, AutoSourceUncheckedUpdateManyInput>
    /**
     * Filter which AutoSources to update
     */
    where?: AutoSourceWhereInput
    /**
     * Limit how many AutoSources to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AutoSource upsert
   */
  export type AutoSourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * The filter to search for the AutoSource to update in case it exists.
     */
    where: AutoSourceWhereUniqueInput
    /**
     * In case the AutoSource found by the `where` argument doesn't exist, create a new AutoSource with this data.
     */
    create: XOR<AutoSourceCreateInput, AutoSourceUncheckedCreateInput>
    /**
     * In case the AutoSource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AutoSourceUpdateInput, AutoSourceUncheckedUpdateInput>
  }

  /**
   * AutoSource delete
   */
  export type AutoSourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    /**
     * Filter which AutoSource to delete.
     */
    where: AutoSourceWhereUniqueInput
  }

  /**
   * AutoSource deleteMany
   */
  export type AutoSourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AutoSources to delete
     */
    where?: AutoSourceWhereInput
    /**
     * Limit how many AutoSources to delete.
     */
    limit?: number
  }

  /**
   * AutoSource.server
   */
  export type AutoSource$serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    where?: UnitServerWhereInput
  }

  /**
   * AutoSource without action
   */
  export type AutoSourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    order: number | null
  }

  export type ImageSumAggregateOutputType = {
    order: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    configId: string | null
    url: string | null
    altText: string | null
    type: string | null
    order: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    configId: string | null
    url: string | null
    altText: string | null
    type: string | null
    order: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    configId: number
    url: number
    altText: number
    type: number
    order: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    order?: true
  }

  export type ImageSumAggregateInputType = {
    order?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    configId?: true
    url?: true
    altText?: true
    type?: true
    order?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    configId?: true
    url?: true
    altText?: true
    type?: true
    order?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    configId?: true
    url?: true
    altText?: true
    type?: true
    order?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    configId: string
    url: string
    altText: string
    type: string
    order: number | null
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    url?: boolean
    altText?: boolean
    type?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    url?: boolean
    altText?: boolean
    type?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    configId?: boolean
    url?: boolean
    altText?: boolean
    type?: boolean
    order?: boolean
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    configId?: boolean
    url?: boolean
    altText?: boolean
    type?: boolean
    order?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "configId" | "url" | "altText" | "type" | "order", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    config?: boolean | UnitConfigDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      config: Prisma.$UnitConfigPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      configId: string
      url: string
      altText: string
      type: string
      order: number | null
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    config<T extends UnitConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfigDefaultArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly configId: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly altText: FieldRef<"Image", 'String'>
    readonly type: FieldRef<"Image", 'String'>
    readonly order: FieldRef<"Image", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model UnitServer
   */

  export type AggregateUnitServer = {
    _count: UnitServerCountAggregateOutputType | null
    _min: UnitServerMinAggregateOutputType | null
    _max: UnitServerMaxAggregateOutputType | null
  }

  export type UnitServerMinAggregateOutputType = {
    id: string | null
    domain: string | null
    name: string | null
    orchestratorToken: string | null
    unitToken: string | null
    requiresUpdate: boolean | null
    constellationId: string | null
    activeConfigId: string | null
  }

  export type UnitServerMaxAggregateOutputType = {
    id: string | null
    domain: string | null
    name: string | null
    orchestratorToken: string | null
    unitToken: string | null
    requiresUpdate: boolean | null
    constellationId: string | null
    activeConfigId: string | null
  }

  export type UnitServerCountAggregateOutputType = {
    id: number
    domain: number
    name: number
    orchestratorToken: number
    unitToken: number
    requiresUpdate: number
    constellationId: number
    activeConfigId: number
    _all: number
  }


  export type UnitServerMinAggregateInputType = {
    id?: true
    domain?: true
    name?: true
    orchestratorToken?: true
    unitToken?: true
    requiresUpdate?: true
    constellationId?: true
    activeConfigId?: true
  }

  export type UnitServerMaxAggregateInputType = {
    id?: true
    domain?: true
    name?: true
    orchestratorToken?: true
    unitToken?: true
    requiresUpdate?: true
    constellationId?: true
    activeConfigId?: true
  }

  export type UnitServerCountAggregateInputType = {
    id?: true
    domain?: true
    name?: true
    orchestratorToken?: true
    unitToken?: true
    requiresUpdate?: true
    constellationId?: true
    activeConfigId?: true
    _all?: true
  }

  export type UnitServerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnitServer to aggregate.
     */
    where?: UnitServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitServers to fetch.
     */
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UnitServers
    **/
    _count?: true | UnitServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitServerMaxAggregateInputType
  }

  export type GetUnitServerAggregateType<T extends UnitServerAggregateArgs> = {
        [P in keyof T & keyof AggregateUnitServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnitServer[P]>
      : GetScalarType<T[P], AggregateUnitServer[P]>
  }




  export type UnitServerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitServerWhereInput
    orderBy?: UnitServerOrderByWithAggregationInput | UnitServerOrderByWithAggregationInput[]
    by: UnitServerScalarFieldEnum[] | UnitServerScalarFieldEnum
    having?: UnitServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitServerCountAggregateInputType | true
    _min?: UnitServerMinAggregateInputType
    _max?: UnitServerMaxAggregateInputType
  }

  export type UnitServerGroupByOutputType = {
    id: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate: boolean
    constellationId: string
    activeConfigId: string | null
    _count: UnitServerCountAggregateOutputType | null
    _min: UnitServerMinAggregateOutputType | null
    _max: UnitServerMaxAggregateOutputType | null
  }

  type GetUnitServerGroupByPayload<T extends UnitServerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitServerGroupByOutputType[P]>
            : GetScalarType<T[P], UnitServerGroupByOutputType[P]>
        }
      >
    >


  export type UnitServerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    name?: boolean
    orchestratorToken?: boolean
    unitToken?: boolean
    requiresUpdate?: boolean
    constellationId?: boolean
    activeConfigId?: boolean
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
    clients?: boolean | UnitServer$clientsArgs<ExtArgs>
    professionals?: boolean | UnitServer$professionalsArgs<ExtArgs>
    cases?: boolean | UnitServer$casesArgs<ExtArgs>
    sections?: boolean | UnitServer$sectionsArgs<ExtArgs>
    manualArticles?: boolean | UnitServer$manualArticlesArgs<ExtArgs>
    autoSources?: boolean | UnitServer$autoSourcesArgs<ExtArgs>
    _count?: boolean | UnitServerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unitServer"]>

  export type UnitServerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    name?: boolean
    orchestratorToken?: boolean
    unitToken?: boolean
    requiresUpdate?: boolean
    constellationId?: boolean
    activeConfigId?: boolean
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
  }, ExtArgs["result"]["unitServer"]>

  export type UnitServerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    name?: boolean
    orchestratorToken?: boolean
    unitToken?: boolean
    requiresUpdate?: boolean
    constellationId?: boolean
    activeConfigId?: boolean
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
  }, ExtArgs["result"]["unitServer"]>

  export type UnitServerSelectScalar = {
    id?: boolean
    domain?: boolean
    name?: boolean
    orchestratorToken?: boolean
    unitToken?: boolean
    requiresUpdate?: boolean
    constellationId?: boolean
    activeConfigId?: boolean
  }

  export type UnitServerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "domain" | "name" | "orchestratorToken" | "unitToken" | "requiresUpdate" | "constellationId" | "activeConfigId", ExtArgs["result"]["unitServer"]>
  export type UnitServerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
    clients?: boolean | UnitServer$clientsArgs<ExtArgs>
    professionals?: boolean | UnitServer$professionalsArgs<ExtArgs>
    cases?: boolean | UnitServer$casesArgs<ExtArgs>
    sections?: boolean | UnitServer$sectionsArgs<ExtArgs>
    manualArticles?: boolean | UnitServer$manualArticlesArgs<ExtArgs>
    autoSources?: boolean | UnitServer$autoSourcesArgs<ExtArgs>
    _count?: boolean | UnitServerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UnitServerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
  }
  export type UnitServerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    constellation?: boolean | ConstellationDefaultArgs<ExtArgs>
    activeConfig?: boolean | UnitServer$activeConfigArgs<ExtArgs>
  }

  export type $UnitServerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UnitServer"
    objects: {
      constellation: Prisma.$ConstellationPayload<ExtArgs>
      activeConfig: Prisma.$UnitConfigPayload<ExtArgs> | null
      clients: Prisma.$ClientPayload<ExtArgs>[]
      professionals: Prisma.$ProfessionalPayload<ExtArgs>[]
      cases: Prisma.$CasePayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
      manualArticles: Prisma.$ManualArticlePayload<ExtArgs>[]
      autoSources: Prisma.$AutoSourcePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      domain: string
      name: string
      orchestratorToken: string
      unitToken: string
      requiresUpdate: boolean
      constellationId: string
      activeConfigId: string | null
    }, ExtArgs["result"]["unitServer"]>
    composites: {}
  }

  type UnitServerGetPayload<S extends boolean | null | undefined | UnitServerDefaultArgs> = $Result.GetResult<Prisma.$UnitServerPayload, S>

  type UnitServerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitServerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitServerCountAggregateInputType | true
    }

  export interface UnitServerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UnitServer'], meta: { name: 'UnitServer' } }
    /**
     * Find zero or one UnitServer that matches the filter.
     * @param {UnitServerFindUniqueArgs} args - Arguments to find a UnitServer
     * @example
     * // Get one UnitServer
     * const unitServer = await prisma.unitServer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitServerFindUniqueArgs>(args: SelectSubset<T, UnitServerFindUniqueArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UnitServer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitServerFindUniqueOrThrowArgs} args - Arguments to find a UnitServer
     * @example
     * // Get one UnitServer
     * const unitServer = await prisma.unitServer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitServerFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnitServer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerFindFirstArgs} args - Arguments to find a UnitServer
     * @example
     * // Get one UnitServer
     * const unitServer = await prisma.unitServer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitServerFindFirstArgs>(args?: SelectSubset<T, UnitServerFindFirstArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnitServer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerFindFirstOrThrowArgs} args - Arguments to find a UnitServer
     * @example
     * // Get one UnitServer
     * const unitServer = await prisma.unitServer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitServerFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitServerFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UnitServers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UnitServers
     * const unitServers = await prisma.unitServer.findMany()
     * 
     * // Get first 10 UnitServers
     * const unitServers = await prisma.unitServer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitServerWithIdOnly = await prisma.unitServer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitServerFindManyArgs>(args?: SelectSubset<T, UnitServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UnitServer.
     * @param {UnitServerCreateArgs} args - Arguments to create a UnitServer.
     * @example
     * // Create one UnitServer
     * const UnitServer = await prisma.unitServer.create({
     *   data: {
     *     // ... data to create a UnitServer
     *   }
     * })
     * 
     */
    create<T extends UnitServerCreateArgs>(args: SelectSubset<T, UnitServerCreateArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UnitServers.
     * @param {UnitServerCreateManyArgs} args - Arguments to create many UnitServers.
     * @example
     * // Create many UnitServers
     * const unitServer = await prisma.unitServer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitServerCreateManyArgs>(args?: SelectSubset<T, UnitServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UnitServers and returns the data saved in the database.
     * @param {UnitServerCreateManyAndReturnArgs} args - Arguments to create many UnitServers.
     * @example
     * // Create many UnitServers
     * const unitServer = await prisma.unitServer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UnitServers and only return the `id`
     * const unitServerWithIdOnly = await prisma.unitServer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnitServerCreateManyAndReturnArgs>(args?: SelectSubset<T, UnitServerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UnitServer.
     * @param {UnitServerDeleteArgs} args - Arguments to delete one UnitServer.
     * @example
     * // Delete one UnitServer
     * const UnitServer = await prisma.unitServer.delete({
     *   where: {
     *     // ... filter to delete one UnitServer
     *   }
     * })
     * 
     */
    delete<T extends UnitServerDeleteArgs>(args: SelectSubset<T, UnitServerDeleteArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UnitServer.
     * @param {UnitServerUpdateArgs} args - Arguments to update one UnitServer.
     * @example
     * // Update one UnitServer
     * const unitServer = await prisma.unitServer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitServerUpdateArgs>(args: SelectSubset<T, UnitServerUpdateArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UnitServers.
     * @param {UnitServerDeleteManyArgs} args - Arguments to filter UnitServers to delete.
     * @example
     * // Delete a few UnitServers
     * const { count } = await prisma.unitServer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitServerDeleteManyArgs>(args?: SelectSubset<T, UnitServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnitServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UnitServers
     * const unitServer = await prisma.unitServer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitServerUpdateManyArgs>(args: SelectSubset<T, UnitServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnitServers and returns the data updated in the database.
     * @param {UnitServerUpdateManyAndReturnArgs} args - Arguments to update many UnitServers.
     * @example
     * // Update many UnitServers
     * const unitServer = await prisma.unitServer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UnitServers and only return the `id`
     * const unitServerWithIdOnly = await prisma.unitServer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UnitServerUpdateManyAndReturnArgs>(args: SelectSubset<T, UnitServerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UnitServer.
     * @param {UnitServerUpsertArgs} args - Arguments to update or create a UnitServer.
     * @example
     * // Update or create a UnitServer
     * const unitServer = await prisma.unitServer.upsert({
     *   create: {
     *     // ... data to create a UnitServer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UnitServer we want to update
     *   }
     * })
     */
    upsert<T extends UnitServerUpsertArgs>(args: SelectSubset<T, UnitServerUpsertArgs<ExtArgs>>): Prisma__UnitServerClient<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UnitServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerCountArgs} args - Arguments to filter UnitServers to count.
     * @example
     * // Count the number of UnitServers
     * const count = await prisma.unitServer.count({
     *   where: {
     *     // ... the filter for the UnitServers we want to count
     *   }
     * })
    **/
    count<T extends UnitServerCountArgs>(
      args?: Subset<T, UnitServerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UnitServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitServerAggregateArgs>(args: Subset<T, UnitServerAggregateArgs>): Prisma.PrismaPromise<GetUnitServerAggregateType<T>>

    /**
     * Group by UnitServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitServerGroupByArgs['orderBy'] }
        : { orderBy?: UnitServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UnitServer model
   */
  readonly fields: UnitServerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UnitServer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitServerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    constellation<T extends ConstellationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConstellationDefaultArgs<ExtArgs>>): Prisma__ConstellationClient<$Result.GetResult<Prisma.$ConstellationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    activeConfig<T extends UnitServer$activeConfigArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$activeConfigArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    clients<T extends UnitServer$clientsArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionals<T extends UnitServer$professionalsArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$professionalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cases<T extends UnitServer$casesArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sections<T extends UnitServer$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    manualArticles<T extends UnitServer$manualArticlesArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$manualArticlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    autoSources<T extends UnitServer$autoSourcesArgs<ExtArgs> = {}>(args?: Subset<T, UnitServer$autoSourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UnitServer model
   */
  interface UnitServerFieldRefs {
    readonly id: FieldRef<"UnitServer", 'String'>
    readonly domain: FieldRef<"UnitServer", 'String'>
    readonly name: FieldRef<"UnitServer", 'String'>
    readonly orchestratorToken: FieldRef<"UnitServer", 'String'>
    readonly unitToken: FieldRef<"UnitServer", 'String'>
    readonly requiresUpdate: FieldRef<"UnitServer", 'Boolean'>
    readonly constellationId: FieldRef<"UnitServer", 'String'>
    readonly activeConfigId: FieldRef<"UnitServer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UnitServer findUnique
   */
  export type UnitServerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter, which UnitServer to fetch.
     */
    where: UnitServerWhereUniqueInput
  }

  /**
   * UnitServer findUniqueOrThrow
   */
  export type UnitServerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter, which UnitServer to fetch.
     */
    where: UnitServerWhereUniqueInput
  }

  /**
   * UnitServer findFirst
   */
  export type UnitServerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter, which UnitServer to fetch.
     */
    where?: UnitServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitServers to fetch.
     */
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnitServers.
     */
    cursor?: UnitServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnitServers.
     */
    distinct?: UnitServerScalarFieldEnum | UnitServerScalarFieldEnum[]
  }

  /**
   * UnitServer findFirstOrThrow
   */
  export type UnitServerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter, which UnitServer to fetch.
     */
    where?: UnitServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitServers to fetch.
     */
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnitServers.
     */
    cursor?: UnitServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitServers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnitServers.
     */
    distinct?: UnitServerScalarFieldEnum | UnitServerScalarFieldEnum[]
  }

  /**
   * UnitServer findMany
   */
  export type UnitServerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter, which UnitServers to fetch.
     */
    where?: UnitServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitServers to fetch.
     */
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UnitServers.
     */
    cursor?: UnitServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitServers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitServers.
     */
    skip?: number
    distinct?: UnitServerScalarFieldEnum | UnitServerScalarFieldEnum[]
  }

  /**
   * UnitServer create
   */
  export type UnitServerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * The data needed to create a UnitServer.
     */
    data: XOR<UnitServerCreateInput, UnitServerUncheckedCreateInput>
  }

  /**
   * UnitServer createMany
   */
  export type UnitServerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UnitServers.
     */
    data: UnitServerCreateManyInput | UnitServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UnitServer createManyAndReturn
   */
  export type UnitServerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * The data used to create many UnitServers.
     */
    data: UnitServerCreateManyInput | UnitServerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UnitServer update
   */
  export type UnitServerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * The data needed to update a UnitServer.
     */
    data: XOR<UnitServerUpdateInput, UnitServerUncheckedUpdateInput>
    /**
     * Choose, which UnitServer to update.
     */
    where: UnitServerWhereUniqueInput
  }

  /**
   * UnitServer updateMany
   */
  export type UnitServerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UnitServers.
     */
    data: XOR<UnitServerUpdateManyMutationInput, UnitServerUncheckedUpdateManyInput>
    /**
     * Filter which UnitServers to update
     */
    where?: UnitServerWhereInput
    /**
     * Limit how many UnitServers to update.
     */
    limit?: number
  }

  /**
   * UnitServer updateManyAndReturn
   */
  export type UnitServerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * The data used to update UnitServers.
     */
    data: XOR<UnitServerUpdateManyMutationInput, UnitServerUncheckedUpdateManyInput>
    /**
     * Filter which UnitServers to update
     */
    where?: UnitServerWhereInput
    /**
     * Limit how many UnitServers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UnitServer upsert
   */
  export type UnitServerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * The filter to search for the UnitServer to update in case it exists.
     */
    where: UnitServerWhereUniqueInput
    /**
     * In case the UnitServer found by the `where` argument doesn't exist, create a new UnitServer with this data.
     */
    create: XOR<UnitServerCreateInput, UnitServerUncheckedCreateInput>
    /**
     * In case the UnitServer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitServerUpdateInput, UnitServerUncheckedUpdateInput>
  }

  /**
   * UnitServer delete
   */
  export type UnitServerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    /**
     * Filter which UnitServer to delete.
     */
    where: UnitServerWhereUniqueInput
  }

  /**
   * UnitServer deleteMany
   */
  export type UnitServerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnitServers to delete
     */
    where?: UnitServerWhereInput
    /**
     * Limit how many UnitServers to delete.
     */
    limit?: number
  }

  /**
   * UnitServer.activeConfig
   */
  export type UnitServer$activeConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    where?: UnitConfigWhereInput
  }

  /**
   * UnitServer.clients
   */
  export type UnitServer$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * UnitServer.professionals
   */
  export type UnitServer$professionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professional
     */
    select?: ProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professional
     */
    omit?: ProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalInclude<ExtArgs> | null
    where?: ProfessionalWhereInput
    orderBy?: ProfessionalOrderByWithRelationInput | ProfessionalOrderByWithRelationInput[]
    cursor?: ProfessionalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalScalarFieldEnum | ProfessionalScalarFieldEnum[]
  }

  /**
   * UnitServer.cases
   */
  export type UnitServer$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Case
     */
    select?: CaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Case
     */
    omit?: CaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseInclude<ExtArgs> | null
    where?: CaseWhereInput
    orderBy?: CaseOrderByWithRelationInput | CaseOrderByWithRelationInput[]
    cursor?: CaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseScalarFieldEnum | CaseScalarFieldEnum[]
  }

  /**
   * UnitServer.sections
   */
  export type UnitServer$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * UnitServer.manualArticles
   */
  export type UnitServer$manualArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    where?: ManualArticleWhereInput
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    cursor?: ManualArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManualArticleScalarFieldEnum | ManualArticleScalarFieldEnum[]
  }

  /**
   * UnitServer.autoSources
   */
  export type UnitServer$autoSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    where?: AutoSourceWhereInput
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    cursor?: AutoSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AutoSourceScalarFieldEnum | AutoSourceScalarFieldEnum[]
  }

  /**
   * UnitServer without action
   */
  export type UnitServerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
  }


  /**
   * Model UnitConfig
   */

  export type AggregateUnitConfig = {
    _count: UnitConfigCountAggregateOutputType | null
    _avg: UnitConfigAvgAggregateOutputType | null
    _sum: UnitConfigSumAggregateOutputType | null
    _min: UnitConfigMinAggregateOutputType | null
    _max: UnitConfigMaxAggregateOutputType | null
  }

  export type UnitConfigAvgAggregateOutputType = {
    legalStepsCount: number | null
  }

  export type UnitConfigSumAggregateOutputType = {
    legalStepsCount: number | null
  }

  export type UnitConfigMinAggregateOutputType = {
    id: string | null
    name: string | null
    pageTitle: string | null
    footerInfo: string | null
    legalStepsCount: number | null
    pageType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnitConfigMaxAggregateOutputType = {
    id: string | null
    name: string | null
    pageTitle: string | null
    footerInfo: string | null
    legalStepsCount: number | null
    pageType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnitConfigCountAggregateOutputType = {
    id: number
    name: number
    pageTitle: number
    footerInfo: number
    legalStepsCount: number
    pageType: number
    externalLinks: number
    newsParams: number
    selectedNews: number
    infoSections: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UnitConfigAvgAggregateInputType = {
    legalStepsCount?: true
  }

  export type UnitConfigSumAggregateInputType = {
    legalStepsCount?: true
  }

  export type UnitConfigMinAggregateInputType = {
    id?: true
    name?: true
    pageTitle?: true
    footerInfo?: true
    legalStepsCount?: true
    pageType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnitConfigMaxAggregateInputType = {
    id?: true
    name?: true
    pageTitle?: true
    footerInfo?: true
    legalStepsCount?: true
    pageType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnitConfigCountAggregateInputType = {
    id?: true
    name?: true
    pageTitle?: true
    footerInfo?: true
    legalStepsCount?: true
    pageType?: true
    externalLinks?: true
    newsParams?: true
    selectedNews?: true
    infoSections?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UnitConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnitConfig to aggregate.
     */
    where?: UnitConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitConfigs to fetch.
     */
    orderBy?: UnitConfigOrderByWithRelationInput | UnitConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UnitConfigs
    **/
    _count?: true | UnitConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnitConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnitConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitConfigMaxAggregateInputType
  }

  export type GetUnitConfigAggregateType<T extends UnitConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateUnitConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnitConfig[P]>
      : GetScalarType<T[P], AggregateUnitConfig[P]>
  }




  export type UnitConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitConfigWhereInput
    orderBy?: UnitConfigOrderByWithAggregationInput | UnitConfigOrderByWithAggregationInput[]
    by: UnitConfigScalarFieldEnum[] | UnitConfigScalarFieldEnum
    having?: UnitConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitConfigCountAggregateInputType | true
    _avg?: UnitConfigAvgAggregateInputType
    _sum?: UnitConfigSumAggregateInputType
    _min?: UnitConfigMinAggregateInputType
    _max?: UnitConfigMaxAggregateInputType
  }

  export type UnitConfigGroupByOutputType = {
    id: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonValue
    newsParams: JsonValue
    selectedNews: JsonValue
    infoSections: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: UnitConfigCountAggregateOutputType | null
    _avg: UnitConfigAvgAggregateOutputType | null
    _sum: UnitConfigSumAggregateOutputType | null
    _min: UnitConfigMinAggregateOutputType | null
    _max: UnitConfigMaxAggregateOutputType | null
  }

  type GetUnitConfigGroupByPayload<T extends UnitConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitConfigGroupByOutputType[P]>
            : GetScalarType<T[P], UnitConfigGroupByOutputType[P]>
        }
      >
    >


  export type UnitConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pageTitle?: boolean
    footerInfo?: boolean
    legalStepsCount?: boolean
    pageType?: boolean
    externalLinks?: boolean
    newsParams?: boolean
    selectedNews?: boolean
    infoSections?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    servers?: boolean | UnitConfig$serversArgs<ExtArgs>
    sections?: boolean | UnitConfig$sectionsArgs<ExtArgs>
    manualArticles?: boolean | UnitConfig$manualArticlesArgs<ExtArgs>
    autoSources?: boolean | UnitConfig$autoSourcesArgs<ExtArgs>
    images?: boolean | UnitConfig$imagesArgs<ExtArgs>
    _count?: boolean | UnitConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unitConfig"]>

  export type UnitConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pageTitle?: boolean
    footerInfo?: boolean
    legalStepsCount?: boolean
    pageType?: boolean
    externalLinks?: boolean
    newsParams?: boolean
    selectedNews?: boolean
    infoSections?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["unitConfig"]>

  export type UnitConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pageTitle?: boolean
    footerInfo?: boolean
    legalStepsCount?: boolean
    pageType?: boolean
    externalLinks?: boolean
    newsParams?: boolean
    selectedNews?: boolean
    infoSections?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["unitConfig"]>

  export type UnitConfigSelectScalar = {
    id?: boolean
    name?: boolean
    pageTitle?: boolean
    footerInfo?: boolean
    legalStepsCount?: boolean
    pageType?: boolean
    externalLinks?: boolean
    newsParams?: boolean
    selectedNews?: boolean
    infoSections?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UnitConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "pageTitle" | "footerInfo" | "legalStepsCount" | "pageType" | "externalLinks" | "newsParams" | "selectedNews" | "infoSections" | "createdAt" | "updatedAt", ExtArgs["result"]["unitConfig"]>
  export type UnitConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servers?: boolean | UnitConfig$serversArgs<ExtArgs>
    sections?: boolean | UnitConfig$sectionsArgs<ExtArgs>
    manualArticles?: boolean | UnitConfig$manualArticlesArgs<ExtArgs>
    autoSources?: boolean | UnitConfig$autoSourcesArgs<ExtArgs>
    images?: boolean | UnitConfig$imagesArgs<ExtArgs>
    _count?: boolean | UnitConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UnitConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UnitConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UnitConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UnitConfig"
    objects: {
      servers: Prisma.$UnitServerPayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
      manualArticles: Prisma.$ManualArticlePayload<ExtArgs>[]
      autoSources: Prisma.$AutoSourcePayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      pageTitle: string
      footerInfo: string
      legalStepsCount: number
      pageType: string
      externalLinks: Prisma.JsonValue
      newsParams: Prisma.JsonValue
      selectedNews: Prisma.JsonValue
      infoSections: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["unitConfig"]>
    composites: {}
  }

  type UnitConfigGetPayload<S extends boolean | null | undefined | UnitConfigDefaultArgs> = $Result.GetResult<Prisma.$UnitConfigPayload, S>

  type UnitConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitConfigCountAggregateInputType | true
    }

  export interface UnitConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UnitConfig'], meta: { name: 'UnitConfig' } }
    /**
     * Find zero or one UnitConfig that matches the filter.
     * @param {UnitConfigFindUniqueArgs} args - Arguments to find a UnitConfig
     * @example
     * // Get one UnitConfig
     * const unitConfig = await prisma.unitConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitConfigFindUniqueArgs>(args: SelectSubset<T, UnitConfigFindUniqueArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UnitConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitConfigFindUniqueOrThrowArgs} args - Arguments to find a UnitConfig
     * @example
     * // Get one UnitConfig
     * const unitConfig = await prisma.unitConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnitConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigFindFirstArgs} args - Arguments to find a UnitConfig
     * @example
     * // Get one UnitConfig
     * const unitConfig = await prisma.unitConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitConfigFindFirstArgs>(args?: SelectSubset<T, UnitConfigFindFirstArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnitConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigFindFirstOrThrowArgs} args - Arguments to find a UnitConfig
     * @example
     * // Get one UnitConfig
     * const unitConfig = await prisma.unitConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UnitConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UnitConfigs
     * const unitConfigs = await prisma.unitConfig.findMany()
     * 
     * // Get first 10 UnitConfigs
     * const unitConfigs = await prisma.unitConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitConfigWithIdOnly = await prisma.unitConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitConfigFindManyArgs>(args?: SelectSubset<T, UnitConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UnitConfig.
     * @param {UnitConfigCreateArgs} args - Arguments to create a UnitConfig.
     * @example
     * // Create one UnitConfig
     * const UnitConfig = await prisma.unitConfig.create({
     *   data: {
     *     // ... data to create a UnitConfig
     *   }
     * })
     * 
     */
    create<T extends UnitConfigCreateArgs>(args: SelectSubset<T, UnitConfigCreateArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UnitConfigs.
     * @param {UnitConfigCreateManyArgs} args - Arguments to create many UnitConfigs.
     * @example
     * // Create many UnitConfigs
     * const unitConfig = await prisma.unitConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitConfigCreateManyArgs>(args?: SelectSubset<T, UnitConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UnitConfigs and returns the data saved in the database.
     * @param {UnitConfigCreateManyAndReturnArgs} args - Arguments to create many UnitConfigs.
     * @example
     * // Create many UnitConfigs
     * const unitConfig = await prisma.unitConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UnitConfigs and only return the `id`
     * const unitConfigWithIdOnly = await prisma.unitConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnitConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, UnitConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UnitConfig.
     * @param {UnitConfigDeleteArgs} args - Arguments to delete one UnitConfig.
     * @example
     * // Delete one UnitConfig
     * const UnitConfig = await prisma.unitConfig.delete({
     *   where: {
     *     // ... filter to delete one UnitConfig
     *   }
     * })
     * 
     */
    delete<T extends UnitConfigDeleteArgs>(args: SelectSubset<T, UnitConfigDeleteArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UnitConfig.
     * @param {UnitConfigUpdateArgs} args - Arguments to update one UnitConfig.
     * @example
     * // Update one UnitConfig
     * const unitConfig = await prisma.unitConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitConfigUpdateArgs>(args: SelectSubset<T, UnitConfigUpdateArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UnitConfigs.
     * @param {UnitConfigDeleteManyArgs} args - Arguments to filter UnitConfigs to delete.
     * @example
     * // Delete a few UnitConfigs
     * const { count } = await prisma.unitConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitConfigDeleteManyArgs>(args?: SelectSubset<T, UnitConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnitConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UnitConfigs
     * const unitConfig = await prisma.unitConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitConfigUpdateManyArgs>(args: SelectSubset<T, UnitConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnitConfigs and returns the data updated in the database.
     * @param {UnitConfigUpdateManyAndReturnArgs} args - Arguments to update many UnitConfigs.
     * @example
     * // Update many UnitConfigs
     * const unitConfig = await prisma.unitConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UnitConfigs and only return the `id`
     * const unitConfigWithIdOnly = await prisma.unitConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UnitConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, UnitConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UnitConfig.
     * @param {UnitConfigUpsertArgs} args - Arguments to update or create a UnitConfig.
     * @example
     * // Update or create a UnitConfig
     * const unitConfig = await prisma.unitConfig.upsert({
     *   create: {
     *     // ... data to create a UnitConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UnitConfig we want to update
     *   }
     * })
     */
    upsert<T extends UnitConfigUpsertArgs>(args: SelectSubset<T, UnitConfigUpsertArgs<ExtArgs>>): Prisma__UnitConfigClient<$Result.GetResult<Prisma.$UnitConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UnitConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigCountArgs} args - Arguments to filter UnitConfigs to count.
     * @example
     * // Count the number of UnitConfigs
     * const count = await prisma.unitConfig.count({
     *   where: {
     *     // ... the filter for the UnitConfigs we want to count
     *   }
     * })
    **/
    count<T extends UnitConfigCountArgs>(
      args?: Subset<T, UnitConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UnitConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitConfigAggregateArgs>(args: Subset<T, UnitConfigAggregateArgs>): Prisma.PrismaPromise<GetUnitConfigAggregateType<T>>

    /**
     * Group by UnitConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitConfigGroupByArgs['orderBy'] }
        : { orderBy?: UnitConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UnitConfig model
   */
  readonly fields: UnitConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UnitConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    servers<T extends UnitConfig$serversArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfig$serversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitServerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sections<T extends UnitConfig$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfig$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    manualArticles<T extends UnitConfig$manualArticlesArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfig$manualArticlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    autoSources<T extends UnitConfig$autoSourcesArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfig$autoSourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutoSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends UnitConfig$imagesArgs<ExtArgs> = {}>(args?: Subset<T, UnitConfig$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UnitConfig model
   */
  interface UnitConfigFieldRefs {
    readonly id: FieldRef<"UnitConfig", 'String'>
    readonly name: FieldRef<"UnitConfig", 'String'>
    readonly pageTitle: FieldRef<"UnitConfig", 'String'>
    readonly footerInfo: FieldRef<"UnitConfig", 'String'>
    readonly legalStepsCount: FieldRef<"UnitConfig", 'Int'>
    readonly pageType: FieldRef<"UnitConfig", 'String'>
    readonly externalLinks: FieldRef<"UnitConfig", 'Json'>
    readonly newsParams: FieldRef<"UnitConfig", 'Json'>
    readonly selectedNews: FieldRef<"UnitConfig", 'Json'>
    readonly infoSections: FieldRef<"UnitConfig", 'Json'>
    readonly createdAt: FieldRef<"UnitConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"UnitConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UnitConfig findUnique
   */
  export type UnitConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter, which UnitConfig to fetch.
     */
    where: UnitConfigWhereUniqueInput
  }

  /**
   * UnitConfig findUniqueOrThrow
   */
  export type UnitConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter, which UnitConfig to fetch.
     */
    where: UnitConfigWhereUniqueInput
  }

  /**
   * UnitConfig findFirst
   */
  export type UnitConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter, which UnitConfig to fetch.
     */
    where?: UnitConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitConfigs to fetch.
     */
    orderBy?: UnitConfigOrderByWithRelationInput | UnitConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnitConfigs.
     */
    cursor?: UnitConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnitConfigs.
     */
    distinct?: UnitConfigScalarFieldEnum | UnitConfigScalarFieldEnum[]
  }

  /**
   * UnitConfig findFirstOrThrow
   */
  export type UnitConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter, which UnitConfig to fetch.
     */
    where?: UnitConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitConfigs to fetch.
     */
    orderBy?: UnitConfigOrderByWithRelationInput | UnitConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnitConfigs.
     */
    cursor?: UnitConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnitConfigs.
     */
    distinct?: UnitConfigScalarFieldEnum | UnitConfigScalarFieldEnum[]
  }

  /**
   * UnitConfig findMany
   */
  export type UnitConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter, which UnitConfigs to fetch.
     */
    where?: UnitConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnitConfigs to fetch.
     */
    orderBy?: UnitConfigOrderByWithRelationInput | UnitConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UnitConfigs.
     */
    cursor?: UnitConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnitConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnitConfigs.
     */
    skip?: number
    distinct?: UnitConfigScalarFieldEnum | UnitConfigScalarFieldEnum[]
  }

  /**
   * UnitConfig create
   */
  export type UnitConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a UnitConfig.
     */
    data: XOR<UnitConfigCreateInput, UnitConfigUncheckedCreateInput>
  }

  /**
   * UnitConfig createMany
   */
  export type UnitConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UnitConfigs.
     */
    data: UnitConfigCreateManyInput | UnitConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UnitConfig createManyAndReturn
   */
  export type UnitConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * The data used to create many UnitConfigs.
     */
    data: UnitConfigCreateManyInput | UnitConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UnitConfig update
   */
  export type UnitConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a UnitConfig.
     */
    data: XOR<UnitConfigUpdateInput, UnitConfigUncheckedUpdateInput>
    /**
     * Choose, which UnitConfig to update.
     */
    where: UnitConfigWhereUniqueInput
  }

  /**
   * UnitConfig updateMany
   */
  export type UnitConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UnitConfigs.
     */
    data: XOR<UnitConfigUpdateManyMutationInput, UnitConfigUncheckedUpdateManyInput>
    /**
     * Filter which UnitConfigs to update
     */
    where?: UnitConfigWhereInput
    /**
     * Limit how many UnitConfigs to update.
     */
    limit?: number
  }

  /**
   * UnitConfig updateManyAndReturn
   */
  export type UnitConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * The data used to update UnitConfigs.
     */
    data: XOR<UnitConfigUpdateManyMutationInput, UnitConfigUncheckedUpdateManyInput>
    /**
     * Filter which UnitConfigs to update
     */
    where?: UnitConfigWhereInput
    /**
     * Limit how many UnitConfigs to update.
     */
    limit?: number
  }

  /**
   * UnitConfig upsert
   */
  export type UnitConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the UnitConfig to update in case it exists.
     */
    where: UnitConfigWhereUniqueInput
    /**
     * In case the UnitConfig found by the `where` argument doesn't exist, create a new UnitConfig with this data.
     */
    create: XOR<UnitConfigCreateInput, UnitConfigUncheckedCreateInput>
    /**
     * In case the UnitConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitConfigUpdateInput, UnitConfigUncheckedUpdateInput>
  }

  /**
   * UnitConfig delete
   */
  export type UnitConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
    /**
     * Filter which UnitConfig to delete.
     */
    where: UnitConfigWhereUniqueInput
  }

  /**
   * UnitConfig deleteMany
   */
  export type UnitConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnitConfigs to delete
     */
    where?: UnitConfigWhereInput
    /**
     * Limit how many UnitConfigs to delete.
     */
    limit?: number
  }

  /**
   * UnitConfig.servers
   */
  export type UnitConfig$serversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitServer
     */
    select?: UnitServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitServer
     */
    omit?: UnitServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitServerInclude<ExtArgs> | null
    where?: UnitServerWhereInput
    orderBy?: UnitServerOrderByWithRelationInput | UnitServerOrderByWithRelationInput[]
    cursor?: UnitServerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitServerScalarFieldEnum | UnitServerScalarFieldEnum[]
  }

  /**
   * UnitConfig.sections
   */
  export type UnitConfig$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * UnitConfig.manualArticles
   */
  export type UnitConfig$manualArticlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualArticle
     */
    select?: ManualArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualArticle
     */
    omit?: ManualArticleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualArticleInclude<ExtArgs> | null
    where?: ManualArticleWhereInput
    orderBy?: ManualArticleOrderByWithRelationInput | ManualArticleOrderByWithRelationInput[]
    cursor?: ManualArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManualArticleScalarFieldEnum | ManualArticleScalarFieldEnum[]
  }

  /**
   * UnitConfig.autoSources
   */
  export type UnitConfig$autoSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutoSource
     */
    select?: AutoSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutoSource
     */
    omit?: AutoSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutoSourceInclude<ExtArgs> | null
    where?: AutoSourceWhereInput
    orderBy?: AutoSourceOrderByWithRelationInput | AutoSourceOrderByWithRelationInput[]
    cursor?: AutoSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AutoSourceScalarFieldEnum | AutoSourceScalarFieldEnum[]
  }

  /**
   * UnitConfig.images
   */
  export type UnitConfig$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * UnitConfig without action
   */
  export type UnitConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitConfig
     */
    select?: UnitConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnitConfig
     */
    omit?: UnitConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitConfigInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    address: 'address',
    avatarUrl: 'avatarUrl',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    serverId: 'serverId'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ProfessionalScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    serverId: 'serverId'
  };

  export type ProfessionalScalarFieldEnum = (typeof ProfessionalScalarFieldEnum)[keyof typeof ProfessionalScalarFieldEnum]


  export const CaseScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    professionalId: 'professionalId',
    serverId: 'serverId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CaseScalarFieldEnum = (typeof CaseScalarFieldEnum)[keyof typeof CaseScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    chatId: 'chatId',
    sender: 'sender',
    content: 'content',
    date: 'date'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    clientId: 'clientId',
    professionalId: 'professionalId',
    name: 'name',
    url: 'url',
    type: 'type',
    date: 'date'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    clientId: 'clientId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ConstellationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type ConstellationScalarFieldEnum = (typeof ConstellationScalarFieldEnum)[keyof typeof ConstellationScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    configId: 'configId',
    serverId: 'serverId',
    type: 'type',
    title: 'title',
    content: 'content',
    order: 'order'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const ManualArticleScalarFieldEnum: {
    id: 'id',
    configId: 'configId',
    serverId: 'serverId',
    title: 'title',
    content: 'content',
    publishedAt: 'publishedAt'
  };

  export type ManualArticleScalarFieldEnum = (typeof ManualArticleScalarFieldEnum)[keyof typeof ManualArticleScalarFieldEnum]


  export const AutoSourceScalarFieldEnum: {
    id: 'id',
    configId: 'configId',
    serverId: 'serverId',
    name: 'name',
    url: 'url',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type AutoSourceScalarFieldEnum = (typeof AutoSourceScalarFieldEnum)[keyof typeof AutoSourceScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    configId: 'configId',
    url: 'url',
    altText: 'altText',
    type: 'type',
    order: 'order'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const UnitServerScalarFieldEnum: {
    id: 'id',
    domain: 'domain',
    name: 'name',
    orchestratorToken: 'orchestratorToken',
    unitToken: 'unitToken',
    requiresUpdate: 'requiresUpdate',
    constellationId: 'constellationId',
    activeConfigId: 'activeConfigId'
  };

  export type UnitServerScalarFieldEnum = (typeof UnitServerScalarFieldEnum)[keyof typeof UnitServerScalarFieldEnum]


  export const UnitConfigScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pageTitle: 'pageTitle',
    footerInfo: 'footerInfo',
    legalStepsCount: 'legalStepsCount',
    pageType: 'pageType',
    externalLinks: 'externalLinks',
    newsParams: 'newsParams',
    selectedNews: 'selectedNews',
    infoSections: 'infoSections',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UnitConfigScalarFieldEnum = (typeof UnitConfigScalarFieldEnum)[keyof typeof UnitConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CaseStatus'
   */
  export type EnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus'>
    


  /**
   * Reference to a field of type 'CaseStatus[]'
   */
  export type ListEnumCaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseStatus[]'>
    


  /**
   * Reference to a field of type 'Sender'
   */
  export type EnumSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sender'>
    


  /**
   * Reference to a field of type 'Sender[]'
   */
  export type ListEnumSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sender[]'>
    


  /**
   * Reference to a field of type 'SectionType'
   */
  export type EnumSectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SectionType'>
    


  /**
   * Reference to a field of type 'SectionType[]'
   */
  export type ListEnumSectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SectionType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    clients?: ClientListRelationFilter
    professionals?: ProfessionalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    clients?: ClientOrderByRelationAggregateInput
    professionals?: ProfessionalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    clients?: ClientListRelationFilter
    professionals?: ProfessionalListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    userId?: StringFilter<"Client"> | string
    serverId?: StringFilter<"Client"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    cases?: CaseListRelationFilter
    files?: FileListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
    user?: UserOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
    cases?: CaseOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    userId?: StringFilter<"Client"> | string
    serverId?: StringFilter<"Client"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    cases?: CaseListRelationFilter
    files?: FileListRelationFilter
    reports?: ReportListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    userId?: StringWithAggregatesFilter<"Client"> | string
    serverId?: StringWithAggregatesFilter<"Client"> | string
  }

  export type ProfessionalWhereInput = {
    AND?: ProfessionalWhereInput | ProfessionalWhereInput[]
    OR?: ProfessionalWhereInput[]
    NOT?: ProfessionalWhereInput | ProfessionalWhereInput[]
    id?: StringFilter<"Professional"> | string
    userId?: StringFilter<"Professional"> | string
    serverId?: StringFilter<"Professional"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    cases?: CaseListRelationFilter
    files?: FileListRelationFilter
  }

  export type ProfessionalOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
    user?: UserOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
    cases?: CaseOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
  }

  export type ProfessionalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionalWhereInput | ProfessionalWhereInput[]
    OR?: ProfessionalWhereInput[]
    NOT?: ProfessionalWhereInput | ProfessionalWhereInput[]
    userId?: StringFilter<"Professional"> | string
    serverId?: StringFilter<"Professional"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    cases?: CaseListRelationFilter
    files?: FileListRelationFilter
  }, "id">

  export type ProfessionalOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
    _count?: ProfessionalCountOrderByAggregateInput
    _max?: ProfessionalMaxOrderByAggregateInput
    _min?: ProfessionalMinOrderByAggregateInput
  }

  export type ProfessionalScalarWhereWithAggregatesInput = {
    AND?: ProfessionalScalarWhereWithAggregatesInput | ProfessionalScalarWhereWithAggregatesInput[]
    OR?: ProfessionalScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalScalarWhereWithAggregatesInput | ProfessionalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Professional"> | string
    userId?: StringWithAggregatesFilter<"Professional"> | string
    serverId?: StringWithAggregatesFilter<"Professional"> | string
  }

  export type CaseWhereInput = {
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    id?: StringFilter<"Case"> | string
    clientId?: StringFilter<"Case"> | string
    professionalId?: StringFilter<"Case"> | string
    serverId?: StringFilter<"Case"> | string
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    professional?: XOR<ProfessionalScalarRelationFilter, ProfessionalWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    chat?: XOR<ChatNullableScalarRelationFilter, ChatWhereInput> | null
    files?: FileListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type CaseOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    serverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    professional?: ProfessionalOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
    chat?: ChatOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type CaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseWhereInput | CaseWhereInput[]
    OR?: CaseWhereInput[]
    NOT?: CaseWhereInput | CaseWhereInput[]
    clientId?: StringFilter<"Case"> | string
    professionalId?: StringFilter<"Case"> | string
    serverId?: StringFilter<"Case"> | string
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    professional?: XOR<ProfessionalScalarRelationFilter, ProfessionalWhereInput>
    server?: XOR<UnitServerScalarRelationFilter, UnitServerWhereInput>
    chat?: XOR<ChatNullableScalarRelationFilter, ChatWhereInput> | null
    files?: FileListRelationFilter
    reports?: ReportListRelationFilter
  }, "id">

  export type CaseOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    serverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CaseCountOrderByAggregateInput
    _max?: CaseMaxOrderByAggregateInput
    _min?: CaseMinOrderByAggregateInput
  }

  export type CaseScalarWhereWithAggregatesInput = {
    AND?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    OR?: CaseScalarWhereWithAggregatesInput[]
    NOT?: CaseScalarWhereWithAggregatesInput | CaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Case"> | string
    clientId?: StringWithAggregatesFilter<"Case"> | string
    professionalId?: StringWithAggregatesFilter<"Case"> | string
    serverId?: StringWithAggregatesFilter<"Case"> | string
    status?: EnumCaseStatusWithAggregatesFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Case"> | Date | string
  }

  export type ChatWhereInput = {
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    id?: StringFilter<"Chat"> | string
    caseId?: StringFilter<"Chat"> | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    case?: CaseOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "caseId">

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    OR?: ChatScalarWhereWithAggregatesInput[]
    NOT?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chat"> | string
    caseId?: StringWithAggregatesFilter<"Chat"> | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    chatId?: StringFilter<"Message"> | string
    sender?: EnumSenderFilter<"Message"> | $Enums.Sender
    content?: StringFilter<"Message"> | string
    date?: DateTimeFilter<"Message"> | Date | string
    chat?: XOR<ChatScalarRelationFilter, ChatWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    chatId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    date?: SortOrder
    chat?: ChatOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    chatId?: StringFilter<"Message"> | string
    sender?: EnumSenderFilter<"Message"> | $Enums.Sender
    content?: StringFilter<"Message"> | string
    date?: DateTimeFilter<"Message"> | Date | string
    chat?: XOR<ChatScalarRelationFilter, ChatWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    chatId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    date?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    chatId?: StringWithAggregatesFilter<"Message"> | string
    sender?: EnumSenderWithAggregatesFilter<"Message"> | $Enums.Sender
    content?: StringWithAggregatesFilter<"Message"> | string
    date?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    caseId?: StringFilter<"File"> | string
    clientId?: StringNullableFilter<"File"> | string | null
    professionalId?: StringNullableFilter<"File"> | string | null
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    type?: StringFilter<"File"> | string
    date?: DateTimeFilter<"File"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    professional?: XOR<ProfessionalNullableScalarRelationFilter, ProfessionalWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrderInput | SortOrder
    professionalId?: SortOrderInput | SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    date?: SortOrder
    case?: CaseOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    professional?: ProfessionalOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    caseId?: StringFilter<"File"> | string
    clientId?: StringNullableFilter<"File"> | string | null
    professionalId?: StringNullableFilter<"File"> | string | null
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    type?: StringFilter<"File"> | string
    date?: DateTimeFilter<"File"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    professional?: XOR<ProfessionalNullableScalarRelationFilter, ProfessionalWhereInput> | null
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrderInput | SortOrder
    professionalId?: SortOrderInput | SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    date?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    caseId?: StringWithAggregatesFilter<"File"> | string
    clientId?: StringNullableWithAggregatesFilter<"File"> | string | null
    professionalId?: StringNullableWithAggregatesFilter<"File"> | string | null
    name?: StringWithAggregatesFilter<"File"> | string
    url?: StringWithAggregatesFilter<"File"> | string
    type?: StringWithAggregatesFilter<"File"> | string
    date?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    caseId?: StringFilter<"Report"> | string
    clientId?: StringFilter<"Report"> | string
    reason?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    case?: CaseOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    caseId?: StringFilter<"Report"> | string
    clientId?: StringFilter<"Report"> | string
    reason?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    case?: XOR<CaseScalarRelationFilter, CaseWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    caseId?: StringWithAggregatesFilter<"Report"> | string
    clientId?: StringWithAggregatesFilter<"Report"> | string
    reason?: StringWithAggregatesFilter<"Report"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
  }

  export type ConstellationWhereInput = {
    AND?: ConstellationWhereInput | ConstellationWhereInput[]
    OR?: ConstellationWhereInput[]
    NOT?: ConstellationWhereInput | ConstellationWhereInput[]
    id?: StringFilter<"Constellation"> | string
    name?: StringFilter<"Constellation"> | string
    description?: StringNullableFilter<"Constellation"> | string | null
    servers?: UnitServerListRelationFilter
  }

  export type ConstellationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    servers?: UnitServerOrderByRelationAggregateInput
  }

  export type ConstellationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ConstellationWhereInput | ConstellationWhereInput[]
    OR?: ConstellationWhereInput[]
    NOT?: ConstellationWhereInput | ConstellationWhereInput[]
    description?: StringNullableFilter<"Constellation"> | string | null
    servers?: UnitServerListRelationFilter
  }, "id" | "name">

  export type ConstellationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ConstellationCountOrderByAggregateInput
    _max?: ConstellationMaxOrderByAggregateInput
    _min?: ConstellationMinOrderByAggregateInput
  }

  export type ConstellationScalarWhereWithAggregatesInput = {
    AND?: ConstellationScalarWhereWithAggregatesInput | ConstellationScalarWhereWithAggregatesInput[]
    OR?: ConstellationScalarWhereWithAggregatesInput[]
    NOT?: ConstellationScalarWhereWithAggregatesInput | ConstellationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Constellation"> | string
    name?: StringWithAggregatesFilter<"Constellation"> | string
    description?: StringNullableWithAggregatesFilter<"Constellation"> | string | null
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    configId?: StringFilter<"Section"> | string
    serverId?: StringNullableFilter<"Section"> | string | null
    type?: EnumSectionTypeFilter<"Section"> | $Enums.SectionType
    title?: StringFilter<"Section"> | string
    content?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    config?: UnitConfigOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    configId?: StringFilter<"Section"> | string
    serverId?: StringNullableFilter<"Section"> | string | null
    type?: EnumSectionTypeFilter<"Section"> | $Enums.SectionType
    title?: StringFilter<"Section"> | string
    content?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    configId?: StringWithAggregatesFilter<"Section"> | string
    serverId?: StringNullableWithAggregatesFilter<"Section"> | string | null
    type?: EnumSectionTypeWithAggregatesFilter<"Section"> | $Enums.SectionType
    title?: StringWithAggregatesFilter<"Section"> | string
    content?: StringWithAggregatesFilter<"Section"> | string
    order?: IntWithAggregatesFilter<"Section"> | number
  }

  export type ManualArticleWhereInput = {
    AND?: ManualArticleWhereInput | ManualArticleWhereInput[]
    OR?: ManualArticleWhereInput[]
    NOT?: ManualArticleWhereInput | ManualArticleWhereInput[]
    id?: StringFilter<"ManualArticle"> | string
    configId?: StringFilter<"ManualArticle"> | string
    serverId?: StringNullableFilter<"ManualArticle"> | string | null
    title?: StringFilter<"ManualArticle"> | string
    content?: StringFilter<"ManualArticle"> | string
    publishedAt?: DateTimeFilter<"ManualArticle"> | Date | string
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }

  export type ManualArticleOrderByWithRelationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    publishedAt?: SortOrder
    config?: UnitConfigOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
  }

  export type ManualArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ManualArticleWhereInput | ManualArticleWhereInput[]
    OR?: ManualArticleWhereInput[]
    NOT?: ManualArticleWhereInput | ManualArticleWhereInput[]
    configId?: StringFilter<"ManualArticle"> | string
    serverId?: StringNullableFilter<"ManualArticle"> | string | null
    title?: StringFilter<"ManualArticle"> | string
    content?: StringFilter<"ManualArticle"> | string
    publishedAt?: DateTimeFilter<"ManualArticle"> | Date | string
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }, "id">

  export type ManualArticleOrderByWithAggregationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    publishedAt?: SortOrder
    _count?: ManualArticleCountOrderByAggregateInput
    _max?: ManualArticleMaxOrderByAggregateInput
    _min?: ManualArticleMinOrderByAggregateInput
  }

  export type ManualArticleScalarWhereWithAggregatesInput = {
    AND?: ManualArticleScalarWhereWithAggregatesInput | ManualArticleScalarWhereWithAggregatesInput[]
    OR?: ManualArticleScalarWhereWithAggregatesInput[]
    NOT?: ManualArticleScalarWhereWithAggregatesInput | ManualArticleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ManualArticle"> | string
    configId?: StringWithAggregatesFilter<"ManualArticle"> | string
    serverId?: StringNullableWithAggregatesFilter<"ManualArticle"> | string | null
    title?: StringWithAggregatesFilter<"ManualArticle"> | string
    content?: StringWithAggregatesFilter<"ManualArticle"> | string
    publishedAt?: DateTimeWithAggregatesFilter<"ManualArticle"> | Date | string
  }

  export type AutoSourceWhereInput = {
    AND?: AutoSourceWhereInput | AutoSourceWhereInput[]
    OR?: AutoSourceWhereInput[]
    NOT?: AutoSourceWhereInput | AutoSourceWhereInput[]
    id?: StringFilter<"AutoSource"> | string
    configId?: StringFilter<"AutoSource"> | string
    serverId?: StringNullableFilter<"AutoSource"> | string | null
    name?: StringFilter<"AutoSource"> | string
    url?: StringFilter<"AutoSource"> | string
    type?: StringFilter<"AutoSource"> | string
    createdAt?: DateTimeFilter<"AutoSource"> | Date | string
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }

  export type AutoSourceOrderByWithRelationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    config?: UnitConfigOrderByWithRelationInput
    server?: UnitServerOrderByWithRelationInput
  }

  export type AutoSourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AutoSourceWhereInput | AutoSourceWhereInput[]
    OR?: AutoSourceWhereInput[]
    NOT?: AutoSourceWhereInput | AutoSourceWhereInput[]
    configId?: StringFilter<"AutoSource"> | string
    serverId?: StringNullableFilter<"AutoSource"> | string | null
    name?: StringFilter<"AutoSource"> | string
    url?: StringFilter<"AutoSource"> | string
    type?: StringFilter<"AutoSource"> | string
    createdAt?: DateTimeFilter<"AutoSource"> | Date | string
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
    server?: XOR<UnitServerNullableScalarRelationFilter, UnitServerWhereInput> | null
  }, "id">

  export type AutoSourceOrderByWithAggregationInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrderInput | SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: AutoSourceCountOrderByAggregateInput
    _max?: AutoSourceMaxOrderByAggregateInput
    _min?: AutoSourceMinOrderByAggregateInput
  }

  export type AutoSourceScalarWhereWithAggregatesInput = {
    AND?: AutoSourceScalarWhereWithAggregatesInput | AutoSourceScalarWhereWithAggregatesInput[]
    OR?: AutoSourceScalarWhereWithAggregatesInput[]
    NOT?: AutoSourceScalarWhereWithAggregatesInput | AutoSourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AutoSource"> | string
    configId?: StringWithAggregatesFilter<"AutoSource"> | string
    serverId?: StringNullableWithAggregatesFilter<"AutoSource"> | string | null
    name?: StringWithAggregatesFilter<"AutoSource"> | string
    url?: StringWithAggregatesFilter<"AutoSource"> | string
    type?: StringWithAggregatesFilter<"AutoSource"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AutoSource"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    configId?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    altText?: StringFilter<"Image"> | string
    type?: StringFilter<"Image"> | string
    order?: IntNullableFilter<"Image"> | number | null
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    configId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    type?: SortOrder
    order?: SortOrderInput | SortOrder
    config?: UnitConfigOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    configId?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    altText?: StringFilter<"Image"> | string
    type?: StringFilter<"Image"> | string
    order?: IntNullableFilter<"Image"> | number | null
    config?: XOR<UnitConfigScalarRelationFilter, UnitConfigWhereInput>
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    configId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    type?: SortOrder
    order?: SortOrderInput | SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    configId?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    altText?: StringWithAggregatesFilter<"Image"> | string
    type?: StringWithAggregatesFilter<"Image"> | string
    order?: IntNullableWithAggregatesFilter<"Image"> | number | null
  }

  export type UnitServerWhereInput = {
    AND?: UnitServerWhereInput | UnitServerWhereInput[]
    OR?: UnitServerWhereInput[]
    NOT?: UnitServerWhereInput | UnitServerWhereInput[]
    id?: StringFilter<"UnitServer"> | string
    domain?: StringFilter<"UnitServer"> | string
    name?: StringFilter<"UnitServer"> | string
    orchestratorToken?: StringFilter<"UnitServer"> | string
    unitToken?: StringFilter<"UnitServer"> | string
    requiresUpdate?: BoolFilter<"UnitServer"> | boolean
    constellationId?: StringFilter<"UnitServer"> | string
    activeConfigId?: StringNullableFilter<"UnitServer"> | string | null
    constellation?: XOR<ConstellationScalarRelationFilter, ConstellationWhereInput>
    activeConfig?: XOR<UnitConfigNullableScalarRelationFilter, UnitConfigWhereInput> | null
    clients?: ClientListRelationFilter
    professionals?: ProfessionalListRelationFilter
    cases?: CaseListRelationFilter
    sections?: SectionListRelationFilter
    manualArticles?: ManualArticleListRelationFilter
    autoSources?: AutoSourceListRelationFilter
  }

  export type UnitServerOrderByWithRelationInput = {
    id?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    orchestratorToken?: SortOrder
    unitToken?: SortOrder
    requiresUpdate?: SortOrder
    constellationId?: SortOrder
    activeConfigId?: SortOrderInput | SortOrder
    constellation?: ConstellationOrderByWithRelationInput
    activeConfig?: UnitConfigOrderByWithRelationInput
    clients?: ClientOrderByRelationAggregateInput
    professionals?: ProfessionalOrderByRelationAggregateInput
    cases?: CaseOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
    manualArticles?: ManualArticleOrderByRelationAggregateInput
    autoSources?: AutoSourceOrderByRelationAggregateInput
  }

  export type UnitServerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    domain?: string
    orchestratorToken?: string
    unitToken?: string
    AND?: UnitServerWhereInput | UnitServerWhereInput[]
    OR?: UnitServerWhereInput[]
    NOT?: UnitServerWhereInput | UnitServerWhereInput[]
    name?: StringFilter<"UnitServer"> | string
    requiresUpdate?: BoolFilter<"UnitServer"> | boolean
    constellationId?: StringFilter<"UnitServer"> | string
    activeConfigId?: StringNullableFilter<"UnitServer"> | string | null
    constellation?: XOR<ConstellationScalarRelationFilter, ConstellationWhereInput>
    activeConfig?: XOR<UnitConfigNullableScalarRelationFilter, UnitConfigWhereInput> | null
    clients?: ClientListRelationFilter
    professionals?: ProfessionalListRelationFilter
    cases?: CaseListRelationFilter
    sections?: SectionListRelationFilter
    manualArticles?: ManualArticleListRelationFilter
    autoSources?: AutoSourceListRelationFilter
  }, "id" | "domain" | "orchestratorToken" | "unitToken">

  export type UnitServerOrderByWithAggregationInput = {
    id?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    orchestratorToken?: SortOrder
    unitToken?: SortOrder
    requiresUpdate?: SortOrder
    constellationId?: SortOrder
    activeConfigId?: SortOrderInput | SortOrder
    _count?: UnitServerCountOrderByAggregateInput
    _max?: UnitServerMaxOrderByAggregateInput
    _min?: UnitServerMinOrderByAggregateInput
  }

  export type UnitServerScalarWhereWithAggregatesInput = {
    AND?: UnitServerScalarWhereWithAggregatesInput | UnitServerScalarWhereWithAggregatesInput[]
    OR?: UnitServerScalarWhereWithAggregatesInput[]
    NOT?: UnitServerScalarWhereWithAggregatesInput | UnitServerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UnitServer"> | string
    domain?: StringWithAggregatesFilter<"UnitServer"> | string
    name?: StringWithAggregatesFilter<"UnitServer"> | string
    orchestratorToken?: StringWithAggregatesFilter<"UnitServer"> | string
    unitToken?: StringWithAggregatesFilter<"UnitServer"> | string
    requiresUpdate?: BoolWithAggregatesFilter<"UnitServer"> | boolean
    constellationId?: StringWithAggregatesFilter<"UnitServer"> | string
    activeConfigId?: StringNullableWithAggregatesFilter<"UnitServer"> | string | null
  }

  export type UnitConfigWhereInput = {
    AND?: UnitConfigWhereInput | UnitConfigWhereInput[]
    OR?: UnitConfigWhereInput[]
    NOT?: UnitConfigWhereInput | UnitConfigWhereInput[]
    id?: StringFilter<"UnitConfig"> | string
    name?: StringFilter<"UnitConfig"> | string
    pageTitle?: StringFilter<"UnitConfig"> | string
    footerInfo?: StringFilter<"UnitConfig"> | string
    legalStepsCount?: IntFilter<"UnitConfig"> | number
    pageType?: StringFilter<"UnitConfig"> | string
    externalLinks?: JsonFilter<"UnitConfig">
    newsParams?: JsonFilter<"UnitConfig">
    selectedNews?: JsonFilter<"UnitConfig">
    infoSections?: JsonFilter<"UnitConfig">
    createdAt?: DateTimeFilter<"UnitConfig"> | Date | string
    updatedAt?: DateTimeFilter<"UnitConfig"> | Date | string
    servers?: UnitServerListRelationFilter
    sections?: SectionListRelationFilter
    manualArticles?: ManualArticleListRelationFilter
    autoSources?: AutoSourceListRelationFilter
    images?: ImageListRelationFilter
  }

  export type UnitConfigOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pageTitle?: SortOrder
    footerInfo?: SortOrder
    legalStepsCount?: SortOrder
    pageType?: SortOrder
    externalLinks?: SortOrder
    newsParams?: SortOrder
    selectedNews?: SortOrder
    infoSections?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    servers?: UnitServerOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
    manualArticles?: ManualArticleOrderByRelationAggregateInput
    autoSources?: AutoSourceOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
  }

  export type UnitConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: UnitConfigWhereInput | UnitConfigWhereInput[]
    OR?: UnitConfigWhereInput[]
    NOT?: UnitConfigWhereInput | UnitConfigWhereInput[]
    pageTitle?: StringFilter<"UnitConfig"> | string
    footerInfo?: StringFilter<"UnitConfig"> | string
    legalStepsCount?: IntFilter<"UnitConfig"> | number
    pageType?: StringFilter<"UnitConfig"> | string
    externalLinks?: JsonFilter<"UnitConfig">
    newsParams?: JsonFilter<"UnitConfig">
    selectedNews?: JsonFilter<"UnitConfig">
    infoSections?: JsonFilter<"UnitConfig">
    createdAt?: DateTimeFilter<"UnitConfig"> | Date | string
    updatedAt?: DateTimeFilter<"UnitConfig"> | Date | string
    servers?: UnitServerListRelationFilter
    sections?: SectionListRelationFilter
    manualArticles?: ManualArticleListRelationFilter
    autoSources?: AutoSourceListRelationFilter
    images?: ImageListRelationFilter
  }, "id" | "name">

  export type UnitConfigOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pageTitle?: SortOrder
    footerInfo?: SortOrder
    legalStepsCount?: SortOrder
    pageType?: SortOrder
    externalLinks?: SortOrder
    newsParams?: SortOrder
    selectedNews?: SortOrder
    infoSections?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UnitConfigCountOrderByAggregateInput
    _avg?: UnitConfigAvgOrderByAggregateInput
    _max?: UnitConfigMaxOrderByAggregateInput
    _min?: UnitConfigMinOrderByAggregateInput
    _sum?: UnitConfigSumOrderByAggregateInput
  }

  export type UnitConfigScalarWhereWithAggregatesInput = {
    AND?: UnitConfigScalarWhereWithAggregatesInput | UnitConfigScalarWhereWithAggregatesInput[]
    OR?: UnitConfigScalarWhereWithAggregatesInput[]
    NOT?: UnitConfigScalarWhereWithAggregatesInput | UnitConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UnitConfig"> | string
    name?: StringWithAggregatesFilter<"UnitConfig"> | string
    pageTitle?: StringWithAggregatesFilter<"UnitConfig"> | string
    footerInfo?: StringWithAggregatesFilter<"UnitConfig"> | string
    legalStepsCount?: IntWithAggregatesFilter<"UnitConfig"> | number
    pageType?: StringWithAggregatesFilter<"UnitConfig"> | string
    externalLinks?: JsonWithAggregatesFilter<"UnitConfig">
    newsParams?: JsonWithAggregatesFilter<"UnitConfig">
    selectedNews?: JsonWithAggregatesFilter<"UnitConfig">
    infoSections?: JsonWithAggregatesFilter<"UnitConfig">
    createdAt?: DateTimeWithAggregatesFilter<"UnitConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UnitConfig"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    clients?: ClientCreateNestedManyWithoutUserInput
    professionals?: ProfessionalCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    clients?: ClientUncheckedCreateNestedManyWithoutUserInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: ClientUpdateManyWithoutUserNestedInput
    professionals?: ProfessionalUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: ClientUncheckedUpdateManyWithoutUserNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutClientsInput
    server: UnitServerCreateNestedOneWithoutClientsInput
    cases?: CaseCreateNestedManyWithoutClientInput
    files?: FileCreateNestedManyWithoutClientInput
    reports?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    userId: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
    files?: FileUncheckedCreateNestedManyWithoutClientInput
    reports?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutClientsNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
    files?: FileUpdateManyWithoutClientNestedInput
    reports?: ReportUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
    files?: FileUncheckedUpdateManyWithoutClientNestedInput
    reports?: ReportUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    userId: string
    serverId: string
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutProfessionalsInput
    server: UnitServerCreateNestedOneWithoutProfessionalsInput
    cases?: CaseCreateNestedManyWithoutProfessionalInput
    files?: FileCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUncheckedCreateInput = {
    id?: string
    userId: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutProfessionalInput
    files?: FileUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfessionalsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutProfessionalsNestedInput
    cases?: CaseUpdateManyWithoutProfessionalNestedInput
    files?: FileUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutProfessionalNestedInput
    files?: FileUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalCreateManyInput = {
    id?: string
    userId: string
    serverId: string
  }

  export type ProfessionalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseCreateInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateInput = {
    id?: string
    clientId: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseCreateManyInput = {
    id?: string
    clientId: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatCreateInput = {
    id?: string
    case: CaseCreateNestedOneWithoutChatInput
    messages?: MessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: string
    caseId: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    case?: CaseUpdateOneRequiredWithoutChatNestedInput
    messages?: MessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: string
    caseId: string
  }

  export type ChatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateInput = {
    id?: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    chatId: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    chatId: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    url: string
    type: string
    date?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
    client?: ClientCreateNestedOneWithoutFilesInput
    professional?: ProfessionalCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    caseId: string
    clientId?: string | null
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
    client?: ClientUpdateOneWithoutFilesNestedInput
    professional?: ProfessionalUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyInput = {
    id?: string
    caseId: string
    clientId?: string | null
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutReportsInput
    client: ClientCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    caseId: string
    clientId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutReportsNestedInput
    client?: ClientUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateManyInput = {
    id?: string
    caseId: string
    clientId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConstellationCreateInput = {
    id?: string
    name: string
    description?: string | null
    servers?: UnitServerCreateNestedManyWithoutConstellationInput
  }

  export type ConstellationUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    servers?: UnitServerUncheckedCreateNestedManyWithoutConstellationInput
  }

  export type ConstellationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    servers?: UnitServerUpdateManyWithoutConstellationNestedInput
  }

  export type ConstellationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    servers?: UnitServerUncheckedUpdateManyWithoutConstellationNestedInput
  }

  export type ConstellationCreateManyInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ConstellationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConstellationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SectionCreateInput = {
    id?: string
    type: $Enums.SectionType
    title: string
    content: string
    order: number
    config: UnitConfigCreateNestedOneWithoutSectionsInput
    server?: UnitServerCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    configId: string
    serverId?: string | null
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    config?: UnitConfigUpdateOneRequiredWithoutSectionsNestedInput
    server?: UnitServerUpdateOneWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SectionCreateManyInput = {
    id?: string
    configId: string
    serverId?: string | null
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ManualArticleCreateInput = {
    id?: string
    title: string
    content: string
    publishedAt?: Date | string
    config: UnitConfigCreateNestedOneWithoutManualArticlesInput
    server?: UnitServerCreateNestedOneWithoutManualArticlesInput
  }

  export type ManualArticleUncheckedCreateInput = {
    id?: string
    configId: string
    serverId?: string | null
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type ManualArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    config?: UnitConfigUpdateOneRequiredWithoutManualArticlesNestedInput
    server?: UnitServerUpdateOneWithoutManualArticlesNestedInput
  }

  export type ManualArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualArticleCreateManyInput = {
    id?: string
    configId: string
    serverId?: string | null
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type ManualArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceCreateInput = {
    id?: string
    name: string
    url: string
    type: string
    createdAt?: Date | string
    config: UnitConfigCreateNestedOneWithoutAutoSourcesInput
    server?: UnitServerCreateNestedOneWithoutAutoSourcesInput
  }

  export type AutoSourceUncheckedCreateInput = {
    id?: string
    configId: string
    serverId?: string | null
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type AutoSourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    config?: UnitConfigUpdateOneRequiredWithoutAutoSourcesNestedInput
    server?: UnitServerUpdateOneWithoutAutoSourcesNestedInput
  }

  export type AutoSourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceCreateManyInput = {
    id?: string
    configId: string
    serverId?: string | null
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type AutoSourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    id?: string
    url: string
    altText: string
    type: string
    order?: number | null
    config: UnitConfigCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    configId: string
    url: string
    altText: string
    type: string
    order?: number | null
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
    config?: UnitConfigUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageCreateManyInput = {
    id?: string
    configId: string
    url: string
    altText: string
    type: string
    order?: number | null
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UnitServerCreateInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitServerCreateManyInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
  }

  export type UnitServerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UnitServerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnitConfigCreateInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerCreateNestedManyWithoutActiveConfigInput
    sections?: SectionCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceCreateNestedManyWithoutConfigInput
    images?: ImageCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput
    sections?: SectionUncheckedCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutConfigInput
    images?: ImageUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUpdateManyWithoutConfigNestedInput
    images?: ImageUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUncheckedUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutConfigNestedInput
    images?: ImageUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigCreateManyInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnitConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type ProfessionalListRelationFilter = {
    every?: ProfessionalWhereInput
    some?: ProfessionalWhereInput
    none?: ProfessionalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UnitServerScalarRelationFilter = {
    is?: UnitServerWhereInput
    isNot?: UnitServerWhereInput
  }

  export type CaseListRelationFilter = {
    every?: CaseWhereInput
    some?: CaseWhereInput
    none?: CaseWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type CaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type ProfessionalCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type ProfessionalMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type ProfessionalMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serverId?: SortOrder
  }

  export type EnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ProfessionalScalarRelationFilter = {
    is?: ProfessionalWhereInput
    isNot?: ProfessionalWhereInput
  }

  export type ChatNullableScalarRelationFilter = {
    is?: ChatWhereInput | null
    isNot?: ChatWhereInput | null
  }

  export type CaseCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    serverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    serverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CaseMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    serverId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type CaseScalarRelationFilter = {
    is?: CaseWhereInput
    isNot?: CaseWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
  }

  export type EnumSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Sender | EnumSenderFieldRefInput<$PrismaModel>
    in?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumSenderFilter<$PrismaModel> | $Enums.Sender
  }

  export type ChatScalarRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    date?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    date?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    date?: SortOrder
  }

  export type EnumSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sender | EnumSenderFieldRefInput<$PrismaModel>
    in?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumSenderWithAggregatesFilter<$PrismaModel> | $Enums.Sender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSenderFilter<$PrismaModel>
    _max?: NestedEnumSenderFilter<$PrismaModel>
  }

  export type ClientNullableScalarRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type ProfessionalNullableScalarRelationFilter = {
    is?: ProfessionalWhereInput | null
    isNot?: ProfessionalWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    date?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    date?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    professionalId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    date?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    clientId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type UnitServerListRelationFilter = {
    every?: UnitServerWhereInput
    some?: UnitServerWhereInput
    none?: UnitServerWhereInput
  }

  export type UnitServerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConstellationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ConstellationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ConstellationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type EnumSectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionType | EnumSectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSectionTypeFilter<$PrismaModel> | $Enums.SectionType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UnitConfigScalarRelationFilter = {
    is?: UnitConfigWhereInput
    isNot?: UnitConfigWhereInput
  }

  export type UnitServerNullableScalarRelationFilter = {
    is?: UnitServerWhereInput | null
    isNot?: UnitServerWhereInput | null
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    order?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumSectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionType | EnumSectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSectionTypeFilter<$PrismaModel>
    _max?: NestedEnumSectionTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ManualArticleCountOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    publishedAt?: SortOrder
  }

  export type ManualArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    publishedAt?: SortOrder
  }

  export type ManualArticleMinOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    publishedAt?: SortOrder
  }

  export type AutoSourceCountOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AutoSourceMaxOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AutoSourceMinOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    serverId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    configId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ConstellationScalarRelationFilter = {
    is?: ConstellationWhereInput
    isNot?: ConstellationWhereInput
  }

  export type UnitConfigNullableScalarRelationFilter = {
    is?: UnitConfigWhereInput | null
    isNot?: UnitConfigWhereInput | null
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type ManualArticleListRelationFilter = {
    every?: ManualArticleWhereInput
    some?: ManualArticleWhereInput
    none?: ManualArticleWhereInput
  }

  export type AutoSourceListRelationFilter = {
    every?: AutoSourceWhereInput
    some?: AutoSourceWhereInput
    none?: AutoSourceWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ManualArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AutoSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitServerCountOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    orchestratorToken?: SortOrder
    unitToken?: SortOrder
    requiresUpdate?: SortOrder
    constellationId?: SortOrder
    activeConfigId?: SortOrder
  }

  export type UnitServerMaxOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    orchestratorToken?: SortOrder
    unitToken?: SortOrder
    requiresUpdate?: SortOrder
    constellationId?: SortOrder
    activeConfigId?: SortOrder
  }

  export type UnitServerMinOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    orchestratorToken?: SortOrder
    unitToken?: SortOrder
    requiresUpdate?: SortOrder
    constellationId?: SortOrder
    activeConfigId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitConfigCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pageTitle?: SortOrder
    footerInfo?: SortOrder
    legalStepsCount?: SortOrder
    pageType?: SortOrder
    externalLinks?: SortOrder
    newsParams?: SortOrder
    selectedNews?: SortOrder
    infoSections?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitConfigAvgOrderByAggregateInput = {
    legalStepsCount?: SortOrder
  }

  export type UnitConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pageTitle?: SortOrder
    footerInfo?: SortOrder
    legalStepsCount?: SortOrder
    pageType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitConfigMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pageTitle?: SortOrder
    footerInfo?: SortOrder
    legalStepsCount?: SortOrder
    pageType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnitConfigSumOrderByAggregateInput = {
    legalStepsCount?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ClientCreateNestedManyWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ProfessionalCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput> | ProfessionalCreateWithoutUserInput[] | ProfessionalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutUserInput | ProfessionalCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalCreateManyUserInputEnvelope
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ProfessionalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput> | ProfessionalCreateWithoutUserInput[] | ProfessionalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutUserInput | ProfessionalCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalCreateManyUserInputEnvelope
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClientUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutUserInput | ClientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutUserInput | ClientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutUserInput | ClientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ProfessionalUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput> | ProfessionalCreateWithoutUserInput[] | ProfessionalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutUserInput | ProfessionalCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalUpsertWithWhereUniqueWithoutUserInput | ProfessionalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalCreateManyUserInputEnvelope
    set?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    disconnect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    delete?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    update?: ProfessionalUpdateWithWhereUniqueWithoutUserInput | ProfessionalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalUpdateManyWithWhereWithoutUserInput | ProfessionalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput> | ClientCreateWithoutUserInput[] | ClientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutUserInput | ClientCreateOrConnectWithoutUserInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutUserInput | ClientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClientCreateManyUserInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutUserInput | ClientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutUserInput | ClientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ProfessionalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput> | ProfessionalCreateWithoutUserInput[] | ProfessionalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutUserInput | ProfessionalCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalUpsertWithWhereUniqueWithoutUserInput | ProfessionalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalCreateManyUserInputEnvelope
    set?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    disconnect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    delete?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    update?: ProfessionalUpdateWithWhereUniqueWithoutUserInput | ProfessionalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalUpdateManyWithWhereWithoutUserInput | ProfessionalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutClientsInput = {
    create?: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientsInput
    connect?: UserWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutClientsInput = {
    create?: XOR<UnitServerCreateWithoutClientsInput, UnitServerUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutClientsInput
    connect?: UnitServerWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutClientInput = {
    create?: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput> | FileCreateWithoutClientInput[] | FileUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutClientInput | FileCreateOrConnectWithoutClientInput[]
    createMany?: FileCreateManyClientInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutClientInput = {
    create?: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput> | ReportCreateWithoutClientInput[] | ReportUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutClientInput | ReportCreateOrConnectWithoutClientInput[]
    createMany?: ReportCreateManyClientInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput> | FileCreateWithoutClientInput[] | FileUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutClientInput | FileCreateOrConnectWithoutClientInput[]
    createMany?: FileCreateManyClientInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput> | ReportCreateWithoutClientInput[] | ReportUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutClientInput | ReportCreateOrConnectWithoutClientInput[]
    createMany?: ReportCreateManyClientInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientsInput
    upsert?: UserUpsertWithoutClientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClientsInput, UserUpdateWithoutClientsInput>, UserUncheckedUpdateWithoutClientsInput>
  }

  export type UnitServerUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<UnitServerCreateWithoutClientsInput, UnitServerUncheckedCreateWithoutClientsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutClientsInput
    upsert?: UnitServerUpsertWithoutClientsInput
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutClientsInput, UnitServerUpdateWithoutClientsInput>, UnitServerUncheckedUpdateWithoutClientsInput>
  }

  export type CaseUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientInput | CaseUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientInput | CaseUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientInput | CaseUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type FileUpdateManyWithoutClientNestedInput = {
    create?: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput> | FileCreateWithoutClientInput[] | FileUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutClientInput | FileCreateOrConnectWithoutClientInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutClientInput | FileUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FileCreateManyClientInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutClientInput | FileUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FileUpdateManyWithWhereWithoutClientInput | FileUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutClientNestedInput = {
    create?: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput> | ReportCreateWithoutClientInput[] | ReportUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutClientInput | ReportCreateOrConnectWithoutClientInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutClientInput | ReportUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ReportCreateManyClientInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutClientInput | ReportUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutClientInput | ReportUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput> | CaseCreateWithoutClientInput[] | CaseUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutClientInput | CaseCreateOrConnectWithoutClientInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutClientInput | CaseUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CaseCreateManyClientInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutClientInput | CaseUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutClientInput | CaseUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput> | FileCreateWithoutClientInput[] | FileUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FileCreateOrConnectWithoutClientInput | FileCreateOrConnectWithoutClientInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutClientInput | FileUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FileCreateManyClientInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutClientInput | FileUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FileUpdateManyWithWhereWithoutClientInput | FileUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput> | ReportCreateWithoutClientInput[] | ReportUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutClientInput | ReportCreateOrConnectWithoutClientInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutClientInput | ReportUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ReportCreateManyClientInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutClientInput | ReportUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutClientInput | ReportUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfessionalsInput = {
    create?: XOR<UserCreateWithoutProfessionalsInput, UserUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalsInput
    connect?: UserWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutProfessionalsInput = {
    create?: XOR<UnitServerCreateWithoutProfessionalsInput, UnitServerUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutProfessionalsInput
    connect?: UnitServerWhereUniqueInput
  }

  export type CaseCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput> | CaseCreateWithoutProfessionalInput[] | CaseUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutProfessionalInput | CaseCreateOrConnectWithoutProfessionalInput[]
    createMany?: CaseCreateManyProfessionalInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput> | FileCreateWithoutProfessionalInput[] | FileUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutProfessionalInput | FileCreateOrConnectWithoutProfessionalInput[]
    createMany?: FileCreateManyProfessionalInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput> | CaseCreateWithoutProfessionalInput[] | CaseUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutProfessionalInput | CaseCreateOrConnectWithoutProfessionalInput[]
    createMany?: CaseCreateManyProfessionalInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput> | FileCreateWithoutProfessionalInput[] | FileUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutProfessionalInput | FileCreateOrConnectWithoutProfessionalInput[]
    createMany?: FileCreateManyProfessionalInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProfessionalsNestedInput = {
    create?: XOR<UserCreateWithoutProfessionalsInput, UserUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalsInput
    upsert?: UserUpsertWithoutProfessionalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessionalsInput, UserUpdateWithoutProfessionalsInput>, UserUncheckedUpdateWithoutProfessionalsInput>
  }

  export type UnitServerUpdateOneRequiredWithoutProfessionalsNestedInput = {
    create?: XOR<UnitServerCreateWithoutProfessionalsInput, UnitServerUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutProfessionalsInput
    upsert?: UnitServerUpsertWithoutProfessionalsInput
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutProfessionalsInput, UnitServerUpdateWithoutProfessionalsInput>, UnitServerUncheckedUpdateWithoutProfessionalsInput>
  }

  export type CaseUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput> | CaseCreateWithoutProfessionalInput[] | CaseUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutProfessionalInput | CaseCreateOrConnectWithoutProfessionalInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutProfessionalInput | CaseUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: CaseCreateManyProfessionalInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutProfessionalInput | CaseUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutProfessionalInput | CaseUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type FileUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput> | FileCreateWithoutProfessionalInput[] | FileUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutProfessionalInput | FileCreateOrConnectWithoutProfessionalInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutProfessionalInput | FileUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: FileCreateManyProfessionalInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutProfessionalInput | FileUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: FileUpdateManyWithWhereWithoutProfessionalInput | FileUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput> | CaseCreateWithoutProfessionalInput[] | CaseUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutProfessionalInput | CaseCreateOrConnectWithoutProfessionalInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutProfessionalInput | CaseUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: CaseCreateManyProfessionalInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutProfessionalInput | CaseUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutProfessionalInput | CaseUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput> | FileCreateWithoutProfessionalInput[] | FileUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: FileCreateOrConnectWithoutProfessionalInput | FileCreateOrConnectWithoutProfessionalInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutProfessionalInput | FileUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: FileCreateManyProfessionalInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutProfessionalInput | FileUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: FileUpdateManyWithWhereWithoutProfessionalInput | FileUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutCasesInput = {
    create?: XOR<ClientCreateWithoutCasesInput, ClientUncheckedCreateWithoutCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCasesInput
    connect?: ClientWhereUniqueInput
  }

  export type ProfessionalCreateNestedOneWithoutCasesInput = {
    create?: XOR<ProfessionalCreateWithoutCasesInput, ProfessionalUncheckedCreateWithoutCasesInput>
    connectOrCreate?: ProfessionalCreateOrConnectWithoutCasesInput
    connect?: ProfessionalWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutCasesInput = {
    create?: XOR<UnitServerCreateWithoutCasesInput, UnitServerUncheckedCreateWithoutCasesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutCasesInput
    connect?: UnitServerWhereUniqueInput
  }

  export type ChatCreateNestedOneWithoutCaseInput = {
    create?: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
    connectOrCreate?: ChatCreateOrConnectWithoutCaseInput
    connect?: ChatWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutCaseInput = {
    create?: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput> | ReportCreateWithoutCaseInput[] | ReportUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCaseInput | ReportCreateOrConnectWithoutCaseInput[]
    createMany?: ReportCreateManyCaseInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
    connectOrCreate?: ChatCreateOrConnectWithoutCaseInput
    connect?: ChatWhereUniqueInput
  }

  export type FileUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput> | ReportCreateWithoutCaseInput[] | ReportUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCaseInput | ReportCreateOrConnectWithoutCaseInput[]
    createMany?: ReportCreateManyCaseInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type EnumCaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CaseStatus
  }

  export type ClientUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<ClientCreateWithoutCasesInput, ClientUncheckedCreateWithoutCasesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCasesInput
    upsert?: ClientUpsertWithoutCasesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutCasesInput, ClientUpdateWithoutCasesInput>, ClientUncheckedUpdateWithoutCasesInput>
  }

  export type ProfessionalUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<ProfessionalCreateWithoutCasesInput, ProfessionalUncheckedCreateWithoutCasesInput>
    connectOrCreate?: ProfessionalCreateOrConnectWithoutCasesInput
    upsert?: ProfessionalUpsertWithoutCasesInput
    connect?: ProfessionalWhereUniqueInput
    update?: XOR<XOR<ProfessionalUpdateToOneWithWhereWithoutCasesInput, ProfessionalUpdateWithoutCasesInput>, ProfessionalUncheckedUpdateWithoutCasesInput>
  }

  export type UnitServerUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<UnitServerCreateWithoutCasesInput, UnitServerUncheckedCreateWithoutCasesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutCasesInput
    upsert?: UnitServerUpsertWithoutCasesInput
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutCasesInput, UnitServerUpdateWithoutCasesInput>, UnitServerUncheckedUpdateWithoutCasesInput>
  }

  export type ChatUpdateOneWithoutCaseNestedInput = {
    create?: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
    connectOrCreate?: ChatCreateOrConnectWithoutCaseInput
    upsert?: ChatUpsertWithoutCaseInput
    disconnect?: ChatWhereInput | boolean
    delete?: ChatWhereInput | boolean
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutCaseInput, ChatUpdateWithoutCaseInput>, ChatUncheckedUpdateWithoutCaseInput>
  }

  export type FileUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput> | ReportCreateWithoutCaseInput[] | ReportUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCaseInput | ReportCreateOrConnectWithoutCaseInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCaseInput | ReportUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ReportCreateManyCaseInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCaseInput | ReportUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCaseInput | ReportUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ChatUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
    connectOrCreate?: ChatCreateOrConnectWithoutCaseInput
    upsert?: ChatUpsertWithoutCaseInput
    disconnect?: ChatWhereInput | boolean
    delete?: ChatWhereInput | boolean
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutCaseInput, ChatUpdateWithoutCaseInput>, ChatUncheckedUpdateWithoutCaseInput>
  }

  export type FileUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput> | FileCreateWithoutCaseInput[] | FileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCaseInput | FileCreateOrConnectWithoutCaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCaseInput | FileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: FileCreateManyCaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCaseInput | FileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCaseInput | FileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput> | ReportCreateWithoutCaseInput[] | ReportUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCaseInput | ReportCreateOrConnectWithoutCaseInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCaseInput | ReportUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ReportCreateManyCaseInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCaseInput | ReportUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCaseInput | ReportUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type CaseCreateNestedOneWithoutChatInput = {
    create?: XOR<CaseCreateWithoutChatInput, CaseUncheckedCreateWithoutChatInput>
    connectOrCreate?: CaseCreateOrConnectWithoutChatInput
    connect?: CaseWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutChatInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type CaseUpdateOneRequiredWithoutChatNestedInput = {
    create?: XOR<CaseCreateWithoutChatInput, CaseUncheckedCreateWithoutChatInput>
    connectOrCreate?: CaseCreateOrConnectWithoutChatInput
    upsert?: CaseUpsertWithoutChatInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutChatInput, CaseUpdateWithoutChatInput>, CaseUncheckedUpdateWithoutChatInput>
  }

  export type MessageUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatInput | MessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatInput | MessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatInput | MessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatInput | MessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatInput | MessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatInput | MessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    connect?: ChatWhereUniqueInput
  }

  export type EnumSenderFieldUpdateOperationsInput = {
    set?: $Enums.Sender
  }

  export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    upsert?: ChatUpsertWithoutMessagesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutMessagesInput, ChatUpdateWithoutMessagesInput>, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type CaseCreateNestedOneWithoutFilesInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    connect?: CaseWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutFilesInput = {
    create?: XOR<ClientCreateWithoutFilesInput, ClientUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFilesInput
    connect?: ClientWhereUniqueInput
  }

  export type ProfessionalCreateNestedOneWithoutFilesInput = {
    create?: XOR<ProfessionalCreateWithoutFilesInput, ProfessionalUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProfessionalCreateOrConnectWithoutFilesInput
    connect?: ProfessionalWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CaseCreateOrConnectWithoutFilesInput
    upsert?: CaseUpsertWithoutFilesInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutFilesInput, CaseUpdateWithoutFilesInput>, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type ClientUpdateOneWithoutFilesNestedInput = {
    create?: XOR<ClientCreateWithoutFilesInput, ClientUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFilesInput
    upsert?: ClientUpsertWithoutFilesInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutFilesInput, ClientUpdateWithoutFilesInput>, ClientUncheckedUpdateWithoutFilesInput>
  }

  export type ProfessionalUpdateOneWithoutFilesNestedInput = {
    create?: XOR<ProfessionalCreateWithoutFilesInput, ProfessionalUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ProfessionalCreateOrConnectWithoutFilesInput
    upsert?: ProfessionalUpsertWithoutFilesInput
    disconnect?: ProfessionalWhereInput | boolean
    delete?: ProfessionalWhereInput | boolean
    connect?: ProfessionalWhereUniqueInput
    update?: XOR<XOR<ProfessionalUpdateToOneWithWhereWithoutFilesInput, ProfessionalUpdateWithoutFilesInput>, ProfessionalUncheckedUpdateWithoutFilesInput>
  }

  export type CaseCreateNestedOneWithoutReportsInput = {
    create?: XOR<CaseCreateWithoutReportsInput, CaseUncheckedCreateWithoutReportsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutReportsInput
    connect?: CaseWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutReportsInput = {
    create?: XOR<ClientCreateWithoutReportsInput, ClientUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReportsInput
    connect?: ClientWhereUniqueInput
  }

  export type CaseUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<CaseCreateWithoutReportsInput, CaseUncheckedCreateWithoutReportsInput>
    connectOrCreate?: CaseCreateOrConnectWithoutReportsInput
    upsert?: CaseUpsertWithoutReportsInput
    connect?: CaseWhereUniqueInput
    update?: XOR<XOR<CaseUpdateToOneWithWhereWithoutReportsInput, CaseUpdateWithoutReportsInput>, CaseUncheckedUpdateWithoutReportsInput>
  }

  export type ClientUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<ClientCreateWithoutReportsInput, ClientUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutReportsInput
    upsert?: ClientUpsertWithoutReportsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutReportsInput, ClientUpdateWithoutReportsInput>, ClientUncheckedUpdateWithoutReportsInput>
  }

  export type UnitServerCreateNestedManyWithoutConstellationInput = {
    create?: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput> | UnitServerCreateWithoutConstellationInput[] | UnitServerUncheckedCreateWithoutConstellationInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutConstellationInput | UnitServerCreateOrConnectWithoutConstellationInput[]
    createMany?: UnitServerCreateManyConstellationInputEnvelope
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
  }

  export type UnitServerUncheckedCreateNestedManyWithoutConstellationInput = {
    create?: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput> | UnitServerCreateWithoutConstellationInput[] | UnitServerUncheckedCreateWithoutConstellationInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutConstellationInput | UnitServerCreateOrConnectWithoutConstellationInput[]
    createMany?: UnitServerCreateManyConstellationInputEnvelope
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
  }

  export type UnitServerUpdateManyWithoutConstellationNestedInput = {
    create?: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput> | UnitServerCreateWithoutConstellationInput[] | UnitServerUncheckedCreateWithoutConstellationInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutConstellationInput | UnitServerCreateOrConnectWithoutConstellationInput[]
    upsert?: UnitServerUpsertWithWhereUniqueWithoutConstellationInput | UnitServerUpsertWithWhereUniqueWithoutConstellationInput[]
    createMany?: UnitServerCreateManyConstellationInputEnvelope
    set?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    disconnect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    delete?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    update?: UnitServerUpdateWithWhereUniqueWithoutConstellationInput | UnitServerUpdateWithWhereUniqueWithoutConstellationInput[]
    updateMany?: UnitServerUpdateManyWithWhereWithoutConstellationInput | UnitServerUpdateManyWithWhereWithoutConstellationInput[]
    deleteMany?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
  }

  export type UnitServerUncheckedUpdateManyWithoutConstellationNestedInput = {
    create?: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput> | UnitServerCreateWithoutConstellationInput[] | UnitServerUncheckedCreateWithoutConstellationInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutConstellationInput | UnitServerCreateOrConnectWithoutConstellationInput[]
    upsert?: UnitServerUpsertWithWhereUniqueWithoutConstellationInput | UnitServerUpsertWithWhereUniqueWithoutConstellationInput[]
    createMany?: UnitServerCreateManyConstellationInputEnvelope
    set?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    disconnect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    delete?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    update?: UnitServerUpdateWithWhereUniqueWithoutConstellationInput | UnitServerUpdateWithWhereUniqueWithoutConstellationInput[]
    updateMany?: UnitServerUpdateManyWithWhereWithoutConstellationInput | UnitServerUpdateManyWithWhereWithoutConstellationInput[]
    deleteMany?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
  }

  export type UnitConfigCreateNestedOneWithoutSectionsInput = {
    create?: XOR<UnitConfigCreateWithoutSectionsInput, UnitConfigUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutSectionsInput
    connect?: UnitConfigWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutSectionsInput = {
    create?: XOR<UnitServerCreateWithoutSectionsInput, UnitServerUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutSectionsInput
    connect?: UnitServerWhereUniqueInput
  }

  export type EnumSectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SectionType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UnitConfigUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<UnitConfigCreateWithoutSectionsInput, UnitConfigUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutSectionsInput
    upsert?: UnitConfigUpsertWithoutSectionsInput
    connect?: UnitConfigWhereUniqueInput
    update?: XOR<XOR<UnitConfigUpdateToOneWithWhereWithoutSectionsInput, UnitConfigUpdateWithoutSectionsInput>, UnitConfigUncheckedUpdateWithoutSectionsInput>
  }

  export type UnitServerUpdateOneWithoutSectionsNestedInput = {
    create?: XOR<UnitServerCreateWithoutSectionsInput, UnitServerUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutSectionsInput
    upsert?: UnitServerUpsertWithoutSectionsInput
    disconnect?: UnitServerWhereInput | boolean
    delete?: UnitServerWhereInput | boolean
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutSectionsInput, UnitServerUpdateWithoutSectionsInput>, UnitServerUncheckedUpdateWithoutSectionsInput>
  }

  export type UnitConfigCreateNestedOneWithoutManualArticlesInput = {
    create?: XOR<UnitConfigCreateWithoutManualArticlesInput, UnitConfigUncheckedCreateWithoutManualArticlesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutManualArticlesInput
    connect?: UnitConfigWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutManualArticlesInput = {
    create?: XOR<UnitServerCreateWithoutManualArticlesInput, UnitServerUncheckedCreateWithoutManualArticlesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutManualArticlesInput
    connect?: UnitServerWhereUniqueInput
  }

  export type UnitConfigUpdateOneRequiredWithoutManualArticlesNestedInput = {
    create?: XOR<UnitConfigCreateWithoutManualArticlesInput, UnitConfigUncheckedCreateWithoutManualArticlesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutManualArticlesInput
    upsert?: UnitConfigUpsertWithoutManualArticlesInput
    connect?: UnitConfigWhereUniqueInput
    update?: XOR<XOR<UnitConfigUpdateToOneWithWhereWithoutManualArticlesInput, UnitConfigUpdateWithoutManualArticlesInput>, UnitConfigUncheckedUpdateWithoutManualArticlesInput>
  }

  export type UnitServerUpdateOneWithoutManualArticlesNestedInput = {
    create?: XOR<UnitServerCreateWithoutManualArticlesInput, UnitServerUncheckedCreateWithoutManualArticlesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutManualArticlesInput
    upsert?: UnitServerUpsertWithoutManualArticlesInput
    disconnect?: UnitServerWhereInput | boolean
    delete?: UnitServerWhereInput | boolean
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutManualArticlesInput, UnitServerUpdateWithoutManualArticlesInput>, UnitServerUncheckedUpdateWithoutManualArticlesInput>
  }

  export type UnitConfigCreateNestedOneWithoutAutoSourcesInput = {
    create?: XOR<UnitConfigCreateWithoutAutoSourcesInput, UnitConfigUncheckedCreateWithoutAutoSourcesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutAutoSourcesInput
    connect?: UnitConfigWhereUniqueInput
  }

  export type UnitServerCreateNestedOneWithoutAutoSourcesInput = {
    create?: XOR<UnitServerCreateWithoutAutoSourcesInput, UnitServerUncheckedCreateWithoutAutoSourcesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutAutoSourcesInput
    connect?: UnitServerWhereUniqueInput
  }

  export type UnitConfigUpdateOneRequiredWithoutAutoSourcesNestedInput = {
    create?: XOR<UnitConfigCreateWithoutAutoSourcesInput, UnitConfigUncheckedCreateWithoutAutoSourcesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutAutoSourcesInput
    upsert?: UnitConfigUpsertWithoutAutoSourcesInput
    connect?: UnitConfigWhereUniqueInput
    update?: XOR<XOR<UnitConfigUpdateToOneWithWhereWithoutAutoSourcesInput, UnitConfigUpdateWithoutAutoSourcesInput>, UnitConfigUncheckedUpdateWithoutAutoSourcesInput>
  }

  export type UnitServerUpdateOneWithoutAutoSourcesNestedInput = {
    create?: XOR<UnitServerCreateWithoutAutoSourcesInput, UnitServerUncheckedCreateWithoutAutoSourcesInput>
    connectOrCreate?: UnitServerCreateOrConnectWithoutAutoSourcesInput
    upsert?: UnitServerUpsertWithoutAutoSourcesInput
    disconnect?: UnitServerWhereInput | boolean
    delete?: UnitServerWhereInput | boolean
    connect?: UnitServerWhereUniqueInput
    update?: XOR<XOR<UnitServerUpdateToOneWithWhereWithoutAutoSourcesInput, UnitServerUpdateWithoutAutoSourcesInput>, UnitServerUncheckedUpdateWithoutAutoSourcesInput>
  }

  export type UnitConfigCreateNestedOneWithoutImagesInput = {
    create?: XOR<UnitConfigCreateWithoutImagesInput, UnitConfigUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutImagesInput
    connect?: UnitConfigWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UnitConfigUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<UnitConfigCreateWithoutImagesInput, UnitConfigUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutImagesInput
    upsert?: UnitConfigUpsertWithoutImagesInput
    connect?: UnitConfigWhereUniqueInput
    update?: XOR<XOR<UnitConfigUpdateToOneWithWhereWithoutImagesInput, UnitConfigUpdateWithoutImagesInput>, UnitConfigUncheckedUpdateWithoutImagesInput>
  }

  export type ConstellationCreateNestedOneWithoutServersInput = {
    create?: XOR<ConstellationCreateWithoutServersInput, ConstellationUncheckedCreateWithoutServersInput>
    connectOrCreate?: ConstellationCreateOrConnectWithoutServersInput
    connect?: ConstellationWhereUniqueInput
  }

  export type UnitConfigCreateNestedOneWithoutServersInput = {
    create?: XOR<UnitConfigCreateWithoutServersInput, UnitConfigUncheckedCreateWithoutServersInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutServersInput
    connect?: UnitConfigWhereUniqueInput
  }

  export type ClientCreateNestedManyWithoutServerInput = {
    create?: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput> | ClientCreateWithoutServerInput[] | ClientUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutServerInput | ClientCreateOrConnectWithoutServerInput[]
    createMany?: ClientCreateManyServerInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ProfessionalCreateNestedManyWithoutServerInput = {
    create?: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput> | ProfessionalCreateWithoutServerInput[] | ProfessionalUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutServerInput | ProfessionalCreateOrConnectWithoutServerInput[]
    createMany?: ProfessionalCreateManyServerInputEnvelope
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
  }

  export type CaseCreateNestedManyWithoutServerInput = {
    create?: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput> | CaseCreateWithoutServerInput[] | CaseUncheckedCreateWithoutServerInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutServerInput | CaseCreateOrConnectWithoutServerInput[]
    createMany?: CaseCreateManyServerInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutServerInput = {
    create?: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput> | SectionCreateWithoutServerInput[] | SectionUncheckedCreateWithoutServerInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutServerInput | SectionCreateOrConnectWithoutServerInput[]
    createMany?: SectionCreateManyServerInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type ManualArticleCreateNestedManyWithoutServerInput = {
    create?: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput> | ManualArticleCreateWithoutServerInput[] | ManualArticleUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutServerInput | ManualArticleCreateOrConnectWithoutServerInput[]
    createMany?: ManualArticleCreateManyServerInputEnvelope
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
  }

  export type AutoSourceCreateNestedManyWithoutServerInput = {
    create?: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput> | AutoSourceCreateWithoutServerInput[] | AutoSourceUncheckedCreateWithoutServerInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutServerInput | AutoSourceCreateOrConnectWithoutServerInput[]
    createMany?: AutoSourceCreateManyServerInputEnvelope
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput> | ClientCreateWithoutServerInput[] | ClientUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutServerInput | ClientCreateOrConnectWithoutServerInput[]
    createMany?: ClientCreateManyServerInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ProfessionalUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput> | ProfessionalCreateWithoutServerInput[] | ProfessionalUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutServerInput | ProfessionalCreateOrConnectWithoutServerInput[]
    createMany?: ProfessionalCreateManyServerInputEnvelope
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
  }

  export type CaseUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput> | CaseCreateWithoutServerInput[] | CaseUncheckedCreateWithoutServerInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutServerInput | CaseCreateOrConnectWithoutServerInput[]
    createMany?: CaseCreateManyServerInputEnvelope
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput> | SectionCreateWithoutServerInput[] | SectionUncheckedCreateWithoutServerInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutServerInput | SectionCreateOrConnectWithoutServerInput[]
    createMany?: SectionCreateManyServerInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type ManualArticleUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput> | ManualArticleCreateWithoutServerInput[] | ManualArticleUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutServerInput | ManualArticleCreateOrConnectWithoutServerInput[]
    createMany?: ManualArticleCreateManyServerInputEnvelope
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
  }

  export type AutoSourceUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput> | AutoSourceCreateWithoutServerInput[] | AutoSourceUncheckedCreateWithoutServerInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutServerInput | AutoSourceCreateOrConnectWithoutServerInput[]
    createMany?: AutoSourceCreateManyServerInputEnvelope
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
  }

  export type ConstellationUpdateOneRequiredWithoutServersNestedInput = {
    create?: XOR<ConstellationCreateWithoutServersInput, ConstellationUncheckedCreateWithoutServersInput>
    connectOrCreate?: ConstellationCreateOrConnectWithoutServersInput
    upsert?: ConstellationUpsertWithoutServersInput
    connect?: ConstellationWhereUniqueInput
    update?: XOR<XOR<ConstellationUpdateToOneWithWhereWithoutServersInput, ConstellationUpdateWithoutServersInput>, ConstellationUncheckedUpdateWithoutServersInput>
  }

  export type UnitConfigUpdateOneWithoutServersNestedInput = {
    create?: XOR<UnitConfigCreateWithoutServersInput, UnitConfigUncheckedCreateWithoutServersInput>
    connectOrCreate?: UnitConfigCreateOrConnectWithoutServersInput
    upsert?: UnitConfigUpsertWithoutServersInput
    disconnect?: UnitConfigWhereInput | boolean
    delete?: UnitConfigWhereInput | boolean
    connect?: UnitConfigWhereUniqueInput
    update?: XOR<XOR<UnitConfigUpdateToOneWithWhereWithoutServersInput, UnitConfigUpdateWithoutServersInput>, UnitConfigUncheckedUpdateWithoutServersInput>
  }

  export type ClientUpdateManyWithoutServerNestedInput = {
    create?: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput> | ClientCreateWithoutServerInput[] | ClientUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutServerInput | ClientCreateOrConnectWithoutServerInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutServerInput | ClientUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ClientCreateManyServerInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutServerInput | ClientUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutServerInput | ClientUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ProfessionalUpdateManyWithoutServerNestedInput = {
    create?: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput> | ProfessionalCreateWithoutServerInput[] | ProfessionalUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutServerInput | ProfessionalCreateOrConnectWithoutServerInput[]
    upsert?: ProfessionalUpsertWithWhereUniqueWithoutServerInput | ProfessionalUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ProfessionalCreateManyServerInputEnvelope
    set?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    disconnect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    delete?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    update?: ProfessionalUpdateWithWhereUniqueWithoutServerInput | ProfessionalUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ProfessionalUpdateManyWithWhereWithoutServerInput | ProfessionalUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
  }

  export type CaseUpdateManyWithoutServerNestedInput = {
    create?: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput> | CaseCreateWithoutServerInput[] | CaseUncheckedCreateWithoutServerInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutServerInput | CaseCreateOrConnectWithoutServerInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutServerInput | CaseUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: CaseCreateManyServerInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutServerInput | CaseUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutServerInput | CaseUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutServerNestedInput = {
    create?: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput> | SectionCreateWithoutServerInput[] | SectionUncheckedCreateWithoutServerInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutServerInput | SectionCreateOrConnectWithoutServerInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutServerInput | SectionUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: SectionCreateManyServerInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutServerInput | SectionUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutServerInput | SectionUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ManualArticleUpdateManyWithoutServerNestedInput = {
    create?: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput> | ManualArticleCreateWithoutServerInput[] | ManualArticleUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutServerInput | ManualArticleCreateOrConnectWithoutServerInput[]
    upsert?: ManualArticleUpsertWithWhereUniqueWithoutServerInput | ManualArticleUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ManualArticleCreateManyServerInputEnvelope
    set?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    disconnect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    delete?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    update?: ManualArticleUpdateWithWhereUniqueWithoutServerInput | ManualArticleUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ManualArticleUpdateManyWithWhereWithoutServerInput | ManualArticleUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
  }

  export type AutoSourceUpdateManyWithoutServerNestedInput = {
    create?: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput> | AutoSourceCreateWithoutServerInput[] | AutoSourceUncheckedCreateWithoutServerInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutServerInput | AutoSourceCreateOrConnectWithoutServerInput[]
    upsert?: AutoSourceUpsertWithWhereUniqueWithoutServerInput | AutoSourceUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: AutoSourceCreateManyServerInputEnvelope
    set?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    disconnect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    delete?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    update?: AutoSourceUpdateWithWhereUniqueWithoutServerInput | AutoSourceUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: AutoSourceUpdateManyWithWhereWithoutServerInput | AutoSourceUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput> | ClientCreateWithoutServerInput[] | ClientUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutServerInput | ClientCreateOrConnectWithoutServerInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutServerInput | ClientUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ClientCreateManyServerInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutServerInput | ClientUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutServerInput | ClientUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ProfessionalUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput> | ProfessionalCreateWithoutServerInput[] | ProfessionalUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ProfessionalCreateOrConnectWithoutServerInput | ProfessionalCreateOrConnectWithoutServerInput[]
    upsert?: ProfessionalUpsertWithWhereUniqueWithoutServerInput | ProfessionalUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ProfessionalCreateManyServerInputEnvelope
    set?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    disconnect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    delete?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    connect?: ProfessionalWhereUniqueInput | ProfessionalWhereUniqueInput[]
    update?: ProfessionalUpdateWithWhereUniqueWithoutServerInput | ProfessionalUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ProfessionalUpdateManyWithWhereWithoutServerInput | ProfessionalUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
  }

  export type CaseUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput> | CaseCreateWithoutServerInput[] | CaseUncheckedCreateWithoutServerInput[]
    connectOrCreate?: CaseCreateOrConnectWithoutServerInput | CaseCreateOrConnectWithoutServerInput[]
    upsert?: CaseUpsertWithWhereUniqueWithoutServerInput | CaseUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: CaseCreateManyServerInputEnvelope
    set?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    disconnect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    delete?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    connect?: CaseWhereUniqueInput | CaseWhereUniqueInput[]
    update?: CaseUpdateWithWhereUniqueWithoutServerInput | CaseUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: CaseUpdateManyWithWhereWithoutServerInput | CaseUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: CaseScalarWhereInput | CaseScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput> | SectionCreateWithoutServerInput[] | SectionUncheckedCreateWithoutServerInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutServerInput | SectionCreateOrConnectWithoutServerInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutServerInput | SectionUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: SectionCreateManyServerInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutServerInput | SectionUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutServerInput | SectionUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ManualArticleUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput> | ManualArticleCreateWithoutServerInput[] | ManualArticleUncheckedCreateWithoutServerInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutServerInput | ManualArticleCreateOrConnectWithoutServerInput[]
    upsert?: ManualArticleUpsertWithWhereUniqueWithoutServerInput | ManualArticleUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: ManualArticleCreateManyServerInputEnvelope
    set?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    disconnect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    delete?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    update?: ManualArticleUpdateWithWhereUniqueWithoutServerInput | ManualArticleUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: ManualArticleUpdateManyWithWhereWithoutServerInput | ManualArticleUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
  }

  export type AutoSourceUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput> | AutoSourceCreateWithoutServerInput[] | AutoSourceUncheckedCreateWithoutServerInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutServerInput | AutoSourceCreateOrConnectWithoutServerInput[]
    upsert?: AutoSourceUpsertWithWhereUniqueWithoutServerInput | AutoSourceUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: AutoSourceCreateManyServerInputEnvelope
    set?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    disconnect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    delete?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    update?: AutoSourceUpdateWithWhereUniqueWithoutServerInput | AutoSourceUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: AutoSourceUpdateManyWithWhereWithoutServerInput | AutoSourceUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
  }

  export type UnitServerCreateNestedManyWithoutActiveConfigInput = {
    create?: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput> | UnitServerCreateWithoutActiveConfigInput[] | UnitServerUncheckedCreateWithoutActiveConfigInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutActiveConfigInput | UnitServerCreateOrConnectWithoutActiveConfigInput[]
    createMany?: UnitServerCreateManyActiveConfigInputEnvelope
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutConfigInput = {
    create?: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput> | SectionCreateWithoutConfigInput[] | SectionUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutConfigInput | SectionCreateOrConnectWithoutConfigInput[]
    createMany?: SectionCreateManyConfigInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type ManualArticleCreateNestedManyWithoutConfigInput = {
    create?: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput> | ManualArticleCreateWithoutConfigInput[] | ManualArticleUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutConfigInput | ManualArticleCreateOrConnectWithoutConfigInput[]
    createMany?: ManualArticleCreateManyConfigInputEnvelope
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
  }

  export type AutoSourceCreateNestedManyWithoutConfigInput = {
    create?: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput> | AutoSourceCreateWithoutConfigInput[] | AutoSourceUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutConfigInput | AutoSourceCreateOrConnectWithoutConfigInput[]
    createMany?: AutoSourceCreateManyConfigInputEnvelope
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutConfigInput = {
    create?: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput> | ImageCreateWithoutConfigInput[] | ImageUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutConfigInput | ImageCreateOrConnectWithoutConfigInput[]
    createMany?: ImageCreateManyConfigInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput = {
    create?: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput> | UnitServerCreateWithoutActiveConfigInput[] | UnitServerUncheckedCreateWithoutActiveConfigInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutActiveConfigInput | UnitServerCreateOrConnectWithoutActiveConfigInput[]
    createMany?: UnitServerCreateManyActiveConfigInputEnvelope
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput> | SectionCreateWithoutConfigInput[] | SectionUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutConfigInput | SectionCreateOrConnectWithoutConfigInput[]
    createMany?: SectionCreateManyConfigInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type ManualArticleUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput> | ManualArticleCreateWithoutConfigInput[] | ManualArticleUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutConfigInput | ManualArticleCreateOrConnectWithoutConfigInput[]
    createMany?: ManualArticleCreateManyConfigInputEnvelope
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
  }

  export type AutoSourceUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput> | AutoSourceCreateWithoutConfigInput[] | AutoSourceUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutConfigInput | AutoSourceCreateOrConnectWithoutConfigInput[]
    createMany?: AutoSourceCreateManyConfigInputEnvelope
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutConfigInput = {
    create?: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput> | ImageCreateWithoutConfigInput[] | ImageUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutConfigInput | ImageCreateOrConnectWithoutConfigInput[]
    createMany?: ImageCreateManyConfigInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type UnitServerUpdateManyWithoutActiveConfigNestedInput = {
    create?: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput> | UnitServerCreateWithoutActiveConfigInput[] | UnitServerUncheckedCreateWithoutActiveConfigInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutActiveConfigInput | UnitServerCreateOrConnectWithoutActiveConfigInput[]
    upsert?: UnitServerUpsertWithWhereUniqueWithoutActiveConfigInput | UnitServerUpsertWithWhereUniqueWithoutActiveConfigInput[]
    createMany?: UnitServerCreateManyActiveConfigInputEnvelope
    set?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    disconnect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    delete?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    update?: UnitServerUpdateWithWhereUniqueWithoutActiveConfigInput | UnitServerUpdateWithWhereUniqueWithoutActiveConfigInput[]
    updateMany?: UnitServerUpdateManyWithWhereWithoutActiveConfigInput | UnitServerUpdateManyWithWhereWithoutActiveConfigInput[]
    deleteMany?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutConfigNestedInput = {
    create?: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput> | SectionCreateWithoutConfigInput[] | SectionUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutConfigInput | SectionCreateOrConnectWithoutConfigInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutConfigInput | SectionUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: SectionCreateManyConfigInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutConfigInput | SectionUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutConfigInput | SectionUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ManualArticleUpdateManyWithoutConfigNestedInput = {
    create?: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput> | ManualArticleCreateWithoutConfigInput[] | ManualArticleUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutConfigInput | ManualArticleCreateOrConnectWithoutConfigInput[]
    upsert?: ManualArticleUpsertWithWhereUniqueWithoutConfigInput | ManualArticleUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: ManualArticleCreateManyConfigInputEnvelope
    set?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    disconnect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    delete?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    update?: ManualArticleUpdateWithWhereUniqueWithoutConfigInput | ManualArticleUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: ManualArticleUpdateManyWithWhereWithoutConfigInput | ManualArticleUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
  }

  export type AutoSourceUpdateManyWithoutConfigNestedInput = {
    create?: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput> | AutoSourceCreateWithoutConfigInput[] | AutoSourceUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutConfigInput | AutoSourceCreateOrConnectWithoutConfigInput[]
    upsert?: AutoSourceUpsertWithWhereUniqueWithoutConfigInput | AutoSourceUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: AutoSourceCreateManyConfigInputEnvelope
    set?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    disconnect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    delete?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    update?: AutoSourceUpdateWithWhereUniqueWithoutConfigInput | AutoSourceUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: AutoSourceUpdateManyWithWhereWithoutConfigInput | AutoSourceUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutConfigNestedInput = {
    create?: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput> | ImageCreateWithoutConfigInput[] | ImageUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutConfigInput | ImageCreateOrConnectWithoutConfigInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutConfigInput | ImageUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: ImageCreateManyConfigInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutConfigInput | ImageUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutConfigInput | ImageUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput = {
    create?: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput> | UnitServerCreateWithoutActiveConfigInput[] | UnitServerUncheckedCreateWithoutActiveConfigInput[]
    connectOrCreate?: UnitServerCreateOrConnectWithoutActiveConfigInput | UnitServerCreateOrConnectWithoutActiveConfigInput[]
    upsert?: UnitServerUpsertWithWhereUniqueWithoutActiveConfigInput | UnitServerUpsertWithWhereUniqueWithoutActiveConfigInput[]
    createMany?: UnitServerCreateManyActiveConfigInputEnvelope
    set?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    disconnect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    delete?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    connect?: UnitServerWhereUniqueInput | UnitServerWhereUniqueInput[]
    update?: UnitServerUpdateWithWhereUniqueWithoutActiveConfigInput | UnitServerUpdateWithWhereUniqueWithoutActiveConfigInput[]
    updateMany?: UnitServerUpdateManyWithWhereWithoutActiveConfigInput | UnitServerUpdateManyWithWhereWithoutActiveConfigInput[]
    deleteMany?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput> | SectionCreateWithoutConfigInput[] | SectionUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutConfigInput | SectionCreateOrConnectWithoutConfigInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutConfigInput | SectionUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: SectionCreateManyConfigInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutConfigInput | SectionUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutConfigInput | SectionUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type ManualArticleUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput> | ManualArticleCreateWithoutConfigInput[] | ManualArticleUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ManualArticleCreateOrConnectWithoutConfigInput | ManualArticleCreateOrConnectWithoutConfigInput[]
    upsert?: ManualArticleUpsertWithWhereUniqueWithoutConfigInput | ManualArticleUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: ManualArticleCreateManyConfigInputEnvelope
    set?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    disconnect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    delete?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    connect?: ManualArticleWhereUniqueInput | ManualArticleWhereUniqueInput[]
    update?: ManualArticleUpdateWithWhereUniqueWithoutConfigInput | ManualArticleUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: ManualArticleUpdateManyWithWhereWithoutConfigInput | ManualArticleUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
  }

  export type AutoSourceUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput> | AutoSourceCreateWithoutConfigInput[] | AutoSourceUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: AutoSourceCreateOrConnectWithoutConfigInput | AutoSourceCreateOrConnectWithoutConfigInput[]
    upsert?: AutoSourceUpsertWithWhereUniqueWithoutConfigInput | AutoSourceUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: AutoSourceCreateManyConfigInputEnvelope
    set?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    disconnect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    delete?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    connect?: AutoSourceWhereUniqueInput | AutoSourceWhereUniqueInput[]
    update?: AutoSourceUpdateWithWhereUniqueWithoutConfigInput | AutoSourceUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: AutoSourceUpdateManyWithWhereWithoutConfigInput | AutoSourceUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutConfigNestedInput = {
    create?: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput> | ImageCreateWithoutConfigInput[] | ImageUncheckedCreateWithoutConfigInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutConfigInput | ImageCreateOrConnectWithoutConfigInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutConfigInput | ImageUpsertWithWhereUniqueWithoutConfigInput[]
    createMany?: ImageCreateManyConfigInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutConfigInput | ImageUpdateWithWhereUniqueWithoutConfigInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutConfigInput | ImageUpdateManyWithWhereWithoutConfigInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusFilter<$PrismaModel> | $Enums.CaseStatus
  }

  export type NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseStatus | EnumCaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseStatus[] | ListEnumCaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Sender | EnumSenderFieldRefInput<$PrismaModel>
    in?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumSenderFilter<$PrismaModel> | $Enums.Sender
  }

  export type NestedEnumSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sender | EnumSenderFieldRefInput<$PrismaModel>
    in?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sender[] | ListEnumSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumSenderWithAggregatesFilter<$PrismaModel> | $Enums.Sender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSenderFilter<$PrismaModel>
    _max?: NestedEnumSenderFilter<$PrismaModel>
  }

  export type NestedEnumSectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionType | EnumSectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSectionTypeFilter<$PrismaModel> | $Enums.SectionType
  }

  export type NestedEnumSectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionType | EnumSectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SectionType[] | ListEnumSectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSectionTypeFilter<$PrismaModel>
    _max?: NestedEnumSectionTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ClientCreateWithoutUserInput = {
    id?: string
    server: UnitServerCreateNestedOneWithoutClientsInput
    cases?: CaseCreateNestedManyWithoutClientInput
    files?: FileCreateNestedManyWithoutClientInput
    reports?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
    files?: FileUncheckedCreateNestedManyWithoutClientInput
    reports?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutUserInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
  }

  export type ClientCreateManyUserInputEnvelope = {
    data: ClientCreateManyUserInput | ClientCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalCreateWithoutUserInput = {
    id?: string
    server: UnitServerCreateNestedOneWithoutProfessionalsInput
    cases?: CaseCreateNestedManyWithoutProfessionalInput
    files?: FileCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUncheckedCreateWithoutUserInput = {
    id?: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutProfessionalInput
    files?: FileUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalCreateOrConnectWithoutUserInput = {
    where: ProfessionalWhereUniqueInput
    create: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalCreateManyUserInputEnvelope = {
    data: ProfessionalCreateManyUserInput | ProfessionalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithWhereUniqueWithoutUserInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
    create: XOR<ClientCreateWithoutUserInput, ClientUncheckedCreateWithoutUserInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutUserInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutUserInput, ClientUncheckedUpdateWithoutUserInput>
  }

  export type ClientUpdateManyWithWhereWithoutUserInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutUserInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    userId?: StringFilter<"Client"> | string
    serverId?: StringFilter<"Client"> | string
  }

  export type ProfessionalUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfessionalWhereUniqueInput
    update: XOR<ProfessionalUpdateWithoutUserInput, ProfessionalUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessionalCreateWithoutUserInput, ProfessionalUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfessionalWhereUniqueInput
    data: XOR<ProfessionalUpdateWithoutUserInput, ProfessionalUncheckedUpdateWithoutUserInput>
  }

  export type ProfessionalUpdateManyWithWhereWithoutUserInput = {
    where: ProfessionalScalarWhereInput
    data: XOR<ProfessionalUpdateManyMutationInput, ProfessionalUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfessionalScalarWhereInput = {
    AND?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
    OR?: ProfessionalScalarWhereInput[]
    NOT?: ProfessionalScalarWhereInput | ProfessionalScalarWhereInput[]
    id?: StringFilter<"Professional"> | string
    userId?: StringFilter<"Professional"> | string
    serverId?: StringFilter<"Professional"> | string
  }

  export type UserCreateWithoutClientsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    professionals?: ProfessionalCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClientsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
  }

  export type UnitServerCreateWithoutClientsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutClientsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutClientsInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutClientsInput, UnitServerUncheckedCreateWithoutClientsInput>
  }

  export type CaseCreateWithoutClientInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutClientInput = {
    id?: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutClientInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput>
  }

  export type CaseCreateManyClientInputEnvelope = {
    data: CaseCreateManyClientInput | CaseCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutClientInput = {
    id?: string
    name: string
    url: string
    type: string
    date?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
    professional?: ProfessionalCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutClientInput = {
    id?: string
    caseId: string
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type FileCreateOrConnectWithoutClientInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput>
  }

  export type FileCreateManyClientInputEnvelope = {
    data: FileCreateManyClientInput | FileCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutClientInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    case: CaseCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutClientInput = {
    id?: string
    caseId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutClientInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput>
  }

  export type ReportCreateManyClientInputEnvelope = {
    data: ReportCreateManyClientInput | ReportCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutClientsInput = {
    update: XOR<UserUpdateWithoutClientsInput, UserUncheckedUpdateWithoutClientsInput>
    create: XOR<UserCreateWithoutClientsInput, UserUncheckedCreateWithoutClientsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClientsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClientsInput, UserUncheckedUpdateWithoutClientsInput>
  }

  export type UserUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professionals?: ProfessionalUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    professionals?: ProfessionalUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UnitServerUpsertWithoutClientsInput = {
    update: XOR<UnitServerUpdateWithoutClientsInput, UnitServerUncheckedUpdateWithoutClientsInput>
    create: XOR<UnitServerCreateWithoutClientsInput, UnitServerUncheckedCreateWithoutClientsInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutClientsInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutClientsInput, UnitServerUncheckedUpdateWithoutClientsInput>
  }

  export type UnitServerUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutClientInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutClientInput, CaseUncheckedUpdateWithoutClientInput>
    create: XOR<CaseCreateWithoutClientInput, CaseUncheckedCreateWithoutClientInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutClientInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutClientInput, CaseUncheckedUpdateWithoutClientInput>
  }

  export type CaseUpdateManyWithWhereWithoutClientInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutClientInput>
  }

  export type CaseScalarWhereInput = {
    AND?: CaseScalarWhereInput | CaseScalarWhereInput[]
    OR?: CaseScalarWhereInput[]
    NOT?: CaseScalarWhereInput | CaseScalarWhereInput[]
    id?: StringFilter<"Case"> | string
    clientId?: StringFilter<"Case"> | string
    professionalId?: StringFilter<"Case"> | string
    serverId?: StringFilter<"Case"> | string
    status?: EnumCaseStatusFilter<"Case"> | $Enums.CaseStatus
    createdAt?: DateTimeFilter<"Case"> | Date | string
    updatedAt?: DateTimeFilter<"Case"> | Date | string
  }

  export type FileUpsertWithWhereUniqueWithoutClientInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutClientInput, FileUncheckedUpdateWithoutClientInput>
    create: XOR<FileCreateWithoutClientInput, FileUncheckedCreateWithoutClientInput>
  }

  export type FileUpdateWithWhereUniqueWithoutClientInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutClientInput, FileUncheckedUpdateWithoutClientInput>
  }

  export type FileUpdateManyWithWhereWithoutClientInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutClientInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    caseId?: StringFilter<"File"> | string
    clientId?: StringNullableFilter<"File"> | string | null
    professionalId?: StringNullableFilter<"File"> | string | null
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    type?: StringFilter<"File"> | string
    date?: DateTimeFilter<"File"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutClientInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutClientInput, ReportUncheckedUpdateWithoutClientInput>
    create: XOR<ReportCreateWithoutClientInput, ReportUncheckedCreateWithoutClientInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutClientInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutClientInput, ReportUncheckedUpdateWithoutClientInput>
  }

  export type ReportUpdateManyWithWhereWithoutClientInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutClientInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    caseId?: StringFilter<"Report"> | string
    clientId?: StringFilter<"Report"> | string
    reason?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
  }

  export type UserCreateWithoutProfessionalsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    clients?: ClientCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessionalsInput = {
    id?: string
    email: string
    password: string
    role: $Enums.Role
    firstName: string
    lastName: string
    phone?: string | null
    address?: string | null
    avatarUrl?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    clients?: ClientUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfessionalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessionalsInput, UserUncheckedCreateWithoutProfessionalsInput>
  }

  export type UnitServerCreateWithoutProfessionalsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutProfessionalsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutProfessionalsInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutProfessionalsInput, UnitServerUncheckedCreateWithoutProfessionalsInput>
  }

  export type CaseCreateWithoutProfessionalInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutProfessionalInput = {
    id?: string
    clientId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutProfessionalInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput>
  }

  export type CaseCreateManyProfessionalInputEnvelope = {
    data: CaseCreateManyProfessionalInput | CaseCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutProfessionalInput = {
    id?: string
    name: string
    url: string
    type: string
    date?: Date | string
    case: CaseCreateNestedOneWithoutFilesInput
    client?: ClientCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutProfessionalInput = {
    id?: string
    caseId: string
    clientId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type FileCreateOrConnectWithoutProfessionalInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput>
  }

  export type FileCreateManyProfessionalInputEnvelope = {
    data: FileCreateManyProfessionalInput | FileCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfessionalsInput = {
    update: XOR<UserUpdateWithoutProfessionalsInput, UserUncheckedUpdateWithoutProfessionalsInput>
    create: XOR<UserCreateWithoutProfessionalsInput, UserUncheckedCreateWithoutProfessionalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessionalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessionalsInput, UserUncheckedUpdateWithoutProfessionalsInput>
  }

  export type UserUpdateWithoutProfessionalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: ClientUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessionalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: ClientUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UnitServerUpsertWithoutProfessionalsInput = {
    update: XOR<UnitServerUpdateWithoutProfessionalsInput, UnitServerUncheckedUpdateWithoutProfessionalsInput>
    create: XOR<UnitServerCreateWithoutProfessionalsInput, UnitServerUncheckedCreateWithoutProfessionalsInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutProfessionalsInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutProfessionalsInput, UnitServerUncheckedUpdateWithoutProfessionalsInput>
  }

  export type UnitServerUpdateWithoutProfessionalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutProfessionalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type CaseUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutProfessionalInput, CaseUncheckedUpdateWithoutProfessionalInput>
    create: XOR<CaseCreateWithoutProfessionalInput, CaseUncheckedCreateWithoutProfessionalInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutProfessionalInput, CaseUncheckedUpdateWithoutProfessionalInput>
  }

  export type CaseUpdateManyWithWhereWithoutProfessionalInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type FileUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutProfessionalInput, FileUncheckedUpdateWithoutProfessionalInput>
    create: XOR<FileCreateWithoutProfessionalInput, FileUncheckedCreateWithoutProfessionalInput>
  }

  export type FileUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutProfessionalInput, FileUncheckedUpdateWithoutProfessionalInput>
  }

  export type FileUpdateManyWithWhereWithoutProfessionalInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type ClientCreateWithoutCasesInput = {
    id?: string
    user: UserCreateNestedOneWithoutClientsInput
    server: UnitServerCreateNestedOneWithoutClientsInput
    files?: FileCreateNestedManyWithoutClientInput
    reports?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutCasesInput = {
    id?: string
    userId: string
    serverId: string
    files?: FileUncheckedCreateNestedManyWithoutClientInput
    reports?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutCasesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutCasesInput, ClientUncheckedCreateWithoutCasesInput>
  }

  export type ProfessionalCreateWithoutCasesInput = {
    id?: string
    user: UserCreateNestedOneWithoutProfessionalsInput
    server: UnitServerCreateNestedOneWithoutProfessionalsInput
    files?: FileCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUncheckedCreateWithoutCasesInput = {
    id?: string
    userId: string
    serverId: string
    files?: FileUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalCreateOrConnectWithoutCasesInput = {
    where: ProfessionalWhereUniqueInput
    create: XOR<ProfessionalCreateWithoutCasesInput, ProfessionalUncheckedCreateWithoutCasesInput>
  }

  export type UnitServerCreateWithoutCasesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutCasesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutCasesInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutCasesInput, UnitServerUncheckedCreateWithoutCasesInput>
  }

  export type ChatCreateWithoutCaseInput = {
    id?: string
    messages?: MessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutCaseInput = {
    id?: string
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutCaseInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
  }

  export type FileCreateWithoutCaseInput = {
    id?: string
    name: string
    url: string
    type: string
    date?: Date | string
    client?: ClientCreateNestedOneWithoutFilesInput
    professional?: ProfessionalCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutCaseInput = {
    id?: string
    clientId?: string | null
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type FileCreateOrConnectWithoutCaseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileCreateManyCaseInputEnvelope = {
    data: FileCreateManyCaseInput | FileCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutCaseInput = {
    id?: string
    reason: string
    createdAt?: Date | string
    client: ClientCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutCaseInput = {
    id?: string
    clientId: string
    reason: string
    createdAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutCaseInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput>
  }

  export type ReportCreateManyCaseInputEnvelope = {
    data: ReportCreateManyCaseInput | ReportCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutCasesInput = {
    update: XOR<ClientUpdateWithoutCasesInput, ClientUncheckedUpdateWithoutCasesInput>
    create: XOR<ClientCreateWithoutCasesInput, ClientUncheckedCreateWithoutCasesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutCasesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutCasesInput, ClientUncheckedUpdateWithoutCasesInput>
  }

  export type ClientUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutClientsNestedInput
    files?: FileUpdateManyWithoutClientNestedInput
    reports?: ReportUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutClientNestedInput
    reports?: ReportUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ProfessionalUpsertWithoutCasesInput = {
    update: XOR<ProfessionalUpdateWithoutCasesInput, ProfessionalUncheckedUpdateWithoutCasesInput>
    create: XOR<ProfessionalCreateWithoutCasesInput, ProfessionalUncheckedCreateWithoutCasesInput>
    where?: ProfessionalWhereInput
  }

  export type ProfessionalUpdateToOneWithWhereWithoutCasesInput = {
    where?: ProfessionalWhereInput
    data: XOR<ProfessionalUpdateWithoutCasesInput, ProfessionalUncheckedUpdateWithoutCasesInput>
  }

  export type ProfessionalUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfessionalsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutProfessionalsNestedInput
    files?: FileUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type UnitServerUpsertWithoutCasesInput = {
    update: XOR<UnitServerUpdateWithoutCasesInput, UnitServerUncheckedUpdateWithoutCasesInput>
    create: XOR<UnitServerCreateWithoutCasesInput, UnitServerUncheckedCreateWithoutCasesInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutCasesInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutCasesInput, UnitServerUncheckedUpdateWithoutCasesInput>
  }

  export type UnitServerUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type ChatUpsertWithoutCaseInput = {
    update: XOR<ChatUpdateWithoutCaseInput, ChatUncheckedUpdateWithoutCaseInput>
    create: XOR<ChatCreateWithoutCaseInput, ChatUncheckedCreateWithoutCaseInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutCaseInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutCaseInput, ChatUncheckedUpdateWithoutCaseInput>
  }

  export type ChatUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
    create: XOR<FileCreateWithoutCaseInput, FileUncheckedCreateWithoutCaseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutCaseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutCaseInput, FileUncheckedUpdateWithoutCaseInput>
  }

  export type FileUpdateManyWithWhereWithoutCaseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutCaseInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutCaseInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutCaseInput, ReportUncheckedUpdateWithoutCaseInput>
    create: XOR<ReportCreateWithoutCaseInput, ReportUncheckedCreateWithoutCaseInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutCaseInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutCaseInput, ReportUncheckedUpdateWithoutCaseInput>
  }

  export type ReportUpdateManyWithWhereWithoutCaseInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseCreateWithoutChatInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    files?: FileCreateNestedManyWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutChatInput = {
    id?: string
    clientId: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutChatInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutChatInput, CaseUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateWithoutChatInput = {
    id?: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
  }

  export type MessageUncheckedCreateWithoutChatInput = {
    id?: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
  }

  export type MessageCreateOrConnectWithoutChatInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateManyChatInputEnvelope = {
    data: MessageCreateManyChatInput | MessageCreateManyChatInput[]
    skipDuplicates?: boolean
  }

  export type CaseUpsertWithoutChatInput = {
    update: XOR<CaseUpdateWithoutChatInput, CaseUncheckedUpdateWithoutChatInput>
    create: XOR<CaseCreateWithoutChatInput, CaseUncheckedCreateWithoutChatInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutChatInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutChatInput, CaseUncheckedUpdateWithoutChatInput>
  }

  export type CaseUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    chatId?: StringFilter<"Message"> | string
    sender?: EnumSenderFilter<"Message"> | $Enums.Sender
    content?: StringFilter<"Message"> | string
    date?: DateTimeFilter<"Message"> | Date | string
  }

  export type ChatCreateWithoutMessagesInput = {
    id?: string
    case: CaseCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMessagesInput = {
    id?: string
    caseId: string
  }

  export type ChatCreateOrConnectWithoutMessagesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type ChatUpsertWithoutMessagesInput = {
    update: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    case?: CaseUpdateOneRequiredWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseCreateWithoutFilesInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutFilesInput = {
    id?: string
    clientId: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutFilesInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
  }

  export type ClientCreateWithoutFilesInput = {
    id?: string
    user: UserCreateNestedOneWithoutClientsInput
    server: UnitServerCreateNestedOneWithoutClientsInput
    cases?: CaseCreateNestedManyWithoutClientInput
    reports?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutFilesInput = {
    id?: string
    userId: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
    reports?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutFilesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutFilesInput, ClientUncheckedCreateWithoutFilesInput>
  }

  export type ProfessionalCreateWithoutFilesInput = {
    id?: string
    user: UserCreateNestedOneWithoutProfessionalsInput
    server: UnitServerCreateNestedOneWithoutProfessionalsInput
    cases?: CaseCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUncheckedCreateWithoutFilesInput = {
    id?: string
    userId: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalCreateOrConnectWithoutFilesInput = {
    where: ProfessionalWhereUniqueInput
    create: XOR<ProfessionalCreateWithoutFilesInput, ProfessionalUncheckedCreateWithoutFilesInput>
  }

  export type CaseUpsertWithoutFilesInput = {
    update: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
    create: XOR<CaseCreateWithoutFilesInput, CaseUncheckedCreateWithoutFilesInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutFilesInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutFilesInput, CaseUncheckedUpdateWithoutFilesInput>
  }

  export type CaseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type ClientUpsertWithoutFilesInput = {
    update: XOR<ClientUpdateWithoutFilesInput, ClientUncheckedUpdateWithoutFilesInput>
    create: XOR<ClientCreateWithoutFilesInput, ClientUncheckedCreateWithoutFilesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutFilesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutFilesInput, ClientUncheckedUpdateWithoutFilesInput>
  }

  export type ClientUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutClientsNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
    reports?: ReportUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
    reports?: ReportUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ProfessionalUpsertWithoutFilesInput = {
    update: XOR<ProfessionalUpdateWithoutFilesInput, ProfessionalUncheckedUpdateWithoutFilesInput>
    create: XOR<ProfessionalCreateWithoutFilesInput, ProfessionalUncheckedCreateWithoutFilesInput>
    where?: ProfessionalWhereInput
  }

  export type ProfessionalUpdateToOneWithWhereWithoutFilesInput = {
    where?: ProfessionalWhereInput
    data: XOR<ProfessionalUpdateWithoutFilesInput, ProfessionalUncheckedUpdateWithoutFilesInput>
  }

  export type ProfessionalUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfessionalsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutProfessionalsNestedInput
    cases?: CaseUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type CaseCreateWithoutReportsInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    server: UnitServerCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutReportsInput = {
    id?: string
    clientId: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutReportsInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutReportsInput, CaseUncheckedCreateWithoutReportsInput>
  }

  export type ClientCreateWithoutReportsInput = {
    id?: string
    user: UserCreateNestedOneWithoutClientsInput
    server: UnitServerCreateNestedOneWithoutClientsInput
    cases?: CaseCreateNestedManyWithoutClientInput
    files?: FileCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutReportsInput = {
    id?: string
    userId: string
    serverId: string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
    files?: FileUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutReportsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutReportsInput, ClientUncheckedCreateWithoutReportsInput>
  }

  export type CaseUpsertWithoutReportsInput = {
    update: XOR<CaseUpdateWithoutReportsInput, CaseUncheckedUpdateWithoutReportsInput>
    create: XOR<CaseCreateWithoutReportsInput, CaseUncheckedCreateWithoutReportsInput>
    where?: CaseWhereInput
  }

  export type CaseUpdateToOneWithWhereWithoutReportsInput = {
    where?: CaseWhereInput
    data: XOR<CaseUpdateWithoutReportsInput, CaseUncheckedUpdateWithoutReportsInput>
  }

  export type CaseUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type ClientUpsertWithoutReportsInput = {
    update: XOR<ClientUpdateWithoutReportsInput, ClientUncheckedUpdateWithoutReportsInput>
    create: XOR<ClientCreateWithoutReportsInput, ClientUncheckedCreateWithoutReportsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutReportsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutReportsInput, ClientUncheckedUpdateWithoutReportsInput>
  }

  export type ClientUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
    server?: UnitServerUpdateOneRequiredWithoutClientsNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
    files?: FileUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
    files?: FileUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UnitServerCreateWithoutConstellationInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutConstellationInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutConstellationInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput>
  }

  export type UnitServerCreateManyConstellationInputEnvelope = {
    data: UnitServerCreateManyConstellationInput | UnitServerCreateManyConstellationInput[]
    skipDuplicates?: boolean
  }

  export type UnitServerUpsertWithWhereUniqueWithoutConstellationInput = {
    where: UnitServerWhereUniqueInput
    update: XOR<UnitServerUpdateWithoutConstellationInput, UnitServerUncheckedUpdateWithoutConstellationInput>
    create: XOR<UnitServerCreateWithoutConstellationInput, UnitServerUncheckedCreateWithoutConstellationInput>
  }

  export type UnitServerUpdateWithWhereUniqueWithoutConstellationInput = {
    where: UnitServerWhereUniqueInput
    data: XOR<UnitServerUpdateWithoutConstellationInput, UnitServerUncheckedUpdateWithoutConstellationInput>
  }

  export type UnitServerUpdateManyWithWhereWithoutConstellationInput = {
    where: UnitServerScalarWhereInput
    data: XOR<UnitServerUpdateManyMutationInput, UnitServerUncheckedUpdateManyWithoutConstellationInput>
  }

  export type UnitServerScalarWhereInput = {
    AND?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
    OR?: UnitServerScalarWhereInput[]
    NOT?: UnitServerScalarWhereInput | UnitServerScalarWhereInput[]
    id?: StringFilter<"UnitServer"> | string
    domain?: StringFilter<"UnitServer"> | string
    name?: StringFilter<"UnitServer"> | string
    orchestratorToken?: StringFilter<"UnitServer"> | string
    unitToken?: StringFilter<"UnitServer"> | string
    requiresUpdate?: BoolFilter<"UnitServer"> | boolean
    constellationId?: StringFilter<"UnitServer"> | string
    activeConfigId?: StringNullableFilter<"UnitServer"> | string | null
  }

  export type UnitConfigCreateWithoutSectionsInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerCreateNestedManyWithoutActiveConfigInput
    manualArticles?: ManualArticleCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceCreateNestedManyWithoutConfigInput
    images?: ImageCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateWithoutSectionsInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutConfigInput
    images?: ImageUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigCreateOrConnectWithoutSectionsInput = {
    where: UnitConfigWhereUniqueInput
    create: XOR<UnitConfigCreateWithoutSectionsInput, UnitConfigUncheckedCreateWithoutSectionsInput>
  }

  export type UnitServerCreateWithoutSectionsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutSectionsInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutSectionsInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutSectionsInput, UnitServerUncheckedCreateWithoutSectionsInput>
  }

  export type UnitConfigUpsertWithoutSectionsInput = {
    update: XOR<UnitConfigUpdateWithoutSectionsInput, UnitConfigUncheckedUpdateWithoutSectionsInput>
    create: XOR<UnitConfigCreateWithoutSectionsInput, UnitConfigUncheckedCreateWithoutSectionsInput>
    where?: UnitConfigWhereInput
  }

  export type UnitConfigUpdateToOneWithWhereWithoutSectionsInput = {
    where?: UnitConfigWhereInput
    data: XOR<UnitConfigUpdateWithoutSectionsInput, UnitConfigUncheckedUpdateWithoutSectionsInput>
  }

  export type UnitConfigUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUpdateManyWithoutActiveConfigNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUpdateManyWithoutConfigNestedInput
    images?: ImageUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutConfigNestedInput
    images?: ImageUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type UnitServerUpsertWithoutSectionsInput = {
    update: XOR<UnitServerUpdateWithoutSectionsInput, UnitServerUncheckedUpdateWithoutSectionsInput>
    create: XOR<UnitServerCreateWithoutSectionsInput, UnitServerUncheckedCreateWithoutSectionsInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutSectionsInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutSectionsInput, UnitServerUncheckedUpdateWithoutSectionsInput>
  }

  export type UnitServerUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitConfigCreateWithoutManualArticlesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerCreateNestedManyWithoutActiveConfigInput
    sections?: SectionCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceCreateNestedManyWithoutConfigInput
    images?: ImageCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateWithoutManualArticlesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput
    sections?: SectionUncheckedCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutConfigInput
    images?: ImageUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigCreateOrConnectWithoutManualArticlesInput = {
    where: UnitConfigWhereUniqueInput
    create: XOR<UnitConfigCreateWithoutManualArticlesInput, UnitConfigUncheckedCreateWithoutManualArticlesInput>
  }

  export type UnitServerCreateWithoutManualArticlesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutManualArticlesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutManualArticlesInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutManualArticlesInput, UnitServerUncheckedCreateWithoutManualArticlesInput>
  }

  export type UnitConfigUpsertWithoutManualArticlesInput = {
    update: XOR<UnitConfigUpdateWithoutManualArticlesInput, UnitConfigUncheckedUpdateWithoutManualArticlesInput>
    create: XOR<UnitConfigCreateWithoutManualArticlesInput, UnitConfigUncheckedCreateWithoutManualArticlesInput>
    where?: UnitConfigWhereInput
  }

  export type UnitConfigUpdateToOneWithWhereWithoutManualArticlesInput = {
    where?: UnitConfigWhereInput
    data: XOR<UnitConfigUpdateWithoutManualArticlesInput, UnitConfigUncheckedUpdateWithoutManualArticlesInput>
  }

  export type UnitConfigUpdateWithoutManualArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUpdateManyWithoutConfigNestedInput
    images?: ImageUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateWithoutManualArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUncheckedUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutConfigNestedInput
    images?: ImageUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type UnitServerUpsertWithoutManualArticlesInput = {
    update: XOR<UnitServerUpdateWithoutManualArticlesInput, UnitServerUncheckedUpdateWithoutManualArticlesInput>
    create: XOR<UnitServerCreateWithoutManualArticlesInput, UnitServerUncheckedCreateWithoutManualArticlesInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutManualArticlesInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutManualArticlesInput, UnitServerUncheckedUpdateWithoutManualArticlesInput>
  }

  export type UnitServerUpdateWithoutManualArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutManualArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitConfigCreateWithoutAutoSourcesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerCreateNestedManyWithoutActiveConfigInput
    sections?: SectionCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleCreateNestedManyWithoutConfigInput
    images?: ImageCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateWithoutAutoSourcesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput
    sections?: SectionUncheckedCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutConfigInput
    images?: ImageUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigCreateOrConnectWithoutAutoSourcesInput = {
    where: UnitConfigWhereUniqueInput
    create: XOR<UnitConfigCreateWithoutAutoSourcesInput, UnitConfigUncheckedCreateWithoutAutoSourcesInput>
  }

  export type UnitServerCreateWithoutAutoSourcesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    activeConfig?: UnitConfigCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutAutoSourcesInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    activeConfigId?: string | null
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutAutoSourcesInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutAutoSourcesInput, UnitServerUncheckedCreateWithoutAutoSourcesInput>
  }

  export type UnitConfigUpsertWithoutAutoSourcesInput = {
    update: XOR<UnitConfigUpdateWithoutAutoSourcesInput, UnitConfigUncheckedUpdateWithoutAutoSourcesInput>
    create: XOR<UnitConfigCreateWithoutAutoSourcesInput, UnitConfigUncheckedCreateWithoutAutoSourcesInput>
    where?: UnitConfigWhereInput
  }

  export type UnitConfigUpdateToOneWithWhereWithoutAutoSourcesInput = {
    where?: UnitConfigWhereInput
    data: XOR<UnitConfigUpdateWithoutAutoSourcesInput, UnitConfigUncheckedUpdateWithoutAutoSourcesInput>
  }

  export type UnitConfigUpdateWithoutAutoSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutConfigNestedInput
    images?: ImageUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateWithoutAutoSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUncheckedUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutConfigNestedInput
    images?: ImageUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type UnitServerUpsertWithoutAutoSourcesInput = {
    update: XOR<UnitServerUpdateWithoutAutoSourcesInput, UnitServerUncheckedUpdateWithoutAutoSourcesInput>
    create: XOR<UnitServerCreateWithoutAutoSourcesInput, UnitServerUncheckedCreateWithoutAutoSourcesInput>
    where?: UnitServerWhereInput
  }

  export type UnitServerUpdateToOneWithWhereWithoutAutoSourcesInput = {
    where?: UnitServerWhereInput
    data: XOR<UnitServerUpdateWithoutAutoSourcesInput, UnitServerUncheckedUpdateWithoutAutoSourcesInput>
  }

  export type UnitServerUpdateWithoutAutoSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutAutoSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitConfigCreateWithoutImagesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerCreateNestedManyWithoutActiveConfigInput
    sections?: SectionCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    servers?: UnitServerUncheckedCreateNestedManyWithoutActiveConfigInput
    sections?: SectionUncheckedCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigCreateOrConnectWithoutImagesInput = {
    where: UnitConfigWhereUniqueInput
    create: XOR<UnitConfigCreateWithoutImagesInput, UnitConfigUncheckedCreateWithoutImagesInput>
  }

  export type UnitConfigUpsertWithoutImagesInput = {
    update: XOR<UnitConfigUpdateWithoutImagesInput, UnitConfigUncheckedUpdateWithoutImagesInput>
    create: XOR<UnitConfigCreateWithoutImagesInput, UnitConfigUncheckedCreateWithoutImagesInput>
    where?: UnitConfigWhereInput
  }

  export type UnitConfigUpdateToOneWithWhereWithoutImagesInput = {
    where?: UnitConfigWhereInput
    data: XOR<UnitConfigUpdateWithoutImagesInput, UnitConfigUncheckedUpdateWithoutImagesInput>
  }

  export type UnitConfigUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    servers?: UnitServerUncheckedUpdateManyWithoutActiveConfigNestedInput
    sections?: SectionUncheckedUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type ConstellationCreateWithoutServersInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ConstellationUncheckedCreateWithoutServersInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ConstellationCreateOrConnectWithoutServersInput = {
    where: ConstellationWhereUniqueInput
    create: XOR<ConstellationCreateWithoutServersInput, ConstellationUncheckedCreateWithoutServersInput>
  }

  export type UnitConfigCreateWithoutServersInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceCreateNestedManyWithoutConfigInput
    images?: ImageCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigUncheckedCreateWithoutServersInput = {
    id?: string
    name: string
    pageTitle: string
    footerInfo: string
    legalStepsCount: number
    pageType: string
    externalLinks: JsonNullValueInput | InputJsonValue
    newsParams: JsonNullValueInput | InputJsonValue
    selectedNews: JsonNullValueInput | InputJsonValue
    infoSections: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutConfigInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutConfigInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutConfigInput
    images?: ImageUncheckedCreateNestedManyWithoutConfigInput
  }

  export type UnitConfigCreateOrConnectWithoutServersInput = {
    where: UnitConfigWhereUniqueInput
    create: XOR<UnitConfigCreateWithoutServersInput, UnitConfigUncheckedCreateWithoutServersInput>
  }

  export type ClientCreateWithoutServerInput = {
    id?: string
    user: UserCreateNestedOneWithoutClientsInput
    cases?: CaseCreateNestedManyWithoutClientInput
    files?: FileCreateNestedManyWithoutClientInput
    reports?: ReportCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutServerInput = {
    id?: string
    userId: string
    cases?: CaseUncheckedCreateNestedManyWithoutClientInput
    files?: FileUncheckedCreateNestedManyWithoutClientInput
    reports?: ReportUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutServerInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput>
  }

  export type ClientCreateManyServerInputEnvelope = {
    data: ClientCreateManyServerInput | ClientCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalCreateWithoutServerInput = {
    id?: string
    user: UserCreateNestedOneWithoutProfessionalsInput
    cases?: CaseCreateNestedManyWithoutProfessionalInput
    files?: FileCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalUncheckedCreateWithoutServerInput = {
    id?: string
    userId: string
    cases?: CaseUncheckedCreateNestedManyWithoutProfessionalInput
    files?: FileUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type ProfessionalCreateOrConnectWithoutServerInput = {
    where: ProfessionalWhereUniqueInput
    create: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput>
  }

  export type ProfessionalCreateManyServerInputEnvelope = {
    data: ProfessionalCreateManyServerInput | ProfessionalCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type CaseCreateWithoutServerInput = {
    id?: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCasesInput
    professional: ProfessionalCreateNestedOneWithoutCasesInput
    chat?: ChatCreateNestedOneWithoutCaseInput
    files?: FileCreateNestedManyWithoutCaseInput
    reports?: ReportCreateNestedManyWithoutCaseInput
  }

  export type CaseUncheckedCreateWithoutServerInput = {
    id?: string
    clientId: string
    professionalId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chat?: ChatUncheckedCreateNestedOneWithoutCaseInput
    files?: FileUncheckedCreateNestedManyWithoutCaseInput
    reports?: ReportUncheckedCreateNestedManyWithoutCaseInput
  }

  export type CaseCreateOrConnectWithoutServerInput = {
    where: CaseWhereUniqueInput
    create: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput>
  }

  export type CaseCreateManyServerInputEnvelope = {
    data: CaseCreateManyServerInput | CaseCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutServerInput = {
    id?: string
    type: $Enums.SectionType
    title: string
    content: string
    order: number
    config: UnitConfigCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutServerInput = {
    id?: string
    configId: string
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type SectionCreateOrConnectWithoutServerInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput>
  }

  export type SectionCreateManyServerInputEnvelope = {
    data: SectionCreateManyServerInput | SectionCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type ManualArticleCreateWithoutServerInput = {
    id?: string
    title: string
    content: string
    publishedAt?: Date | string
    config: UnitConfigCreateNestedOneWithoutManualArticlesInput
  }

  export type ManualArticleUncheckedCreateWithoutServerInput = {
    id?: string
    configId: string
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type ManualArticleCreateOrConnectWithoutServerInput = {
    where: ManualArticleWhereUniqueInput
    create: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput>
  }

  export type ManualArticleCreateManyServerInputEnvelope = {
    data: ManualArticleCreateManyServerInput | ManualArticleCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type AutoSourceCreateWithoutServerInput = {
    id?: string
    name: string
    url: string
    type: string
    createdAt?: Date | string
    config: UnitConfigCreateNestedOneWithoutAutoSourcesInput
  }

  export type AutoSourceUncheckedCreateWithoutServerInput = {
    id?: string
    configId: string
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type AutoSourceCreateOrConnectWithoutServerInput = {
    where: AutoSourceWhereUniqueInput
    create: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput>
  }

  export type AutoSourceCreateManyServerInputEnvelope = {
    data: AutoSourceCreateManyServerInput | AutoSourceCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type ConstellationUpsertWithoutServersInput = {
    update: XOR<ConstellationUpdateWithoutServersInput, ConstellationUncheckedUpdateWithoutServersInput>
    create: XOR<ConstellationCreateWithoutServersInput, ConstellationUncheckedCreateWithoutServersInput>
    where?: ConstellationWhereInput
  }

  export type ConstellationUpdateToOneWithWhereWithoutServersInput = {
    where?: ConstellationWhereInput
    data: XOR<ConstellationUpdateWithoutServersInput, ConstellationUncheckedUpdateWithoutServersInput>
  }

  export type ConstellationUpdateWithoutServersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConstellationUncheckedUpdateWithoutServersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnitConfigUpsertWithoutServersInput = {
    update: XOR<UnitConfigUpdateWithoutServersInput, UnitConfigUncheckedUpdateWithoutServersInput>
    create: XOR<UnitConfigCreateWithoutServersInput, UnitConfigUncheckedCreateWithoutServersInput>
    where?: UnitConfigWhereInput
  }

  export type UnitConfigUpdateToOneWithWhereWithoutServersInput = {
    where?: UnitConfigWhereInput
    data: XOR<UnitConfigUpdateWithoutServersInput, UnitConfigUncheckedUpdateWithoutServersInput>
  }

  export type UnitConfigUpdateWithoutServersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUpdateManyWithoutConfigNestedInput
    images?: ImageUpdateManyWithoutConfigNestedInput
  }

  export type UnitConfigUncheckedUpdateWithoutServersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pageTitle?: StringFieldUpdateOperationsInput | string
    footerInfo?: StringFieldUpdateOperationsInput | string
    legalStepsCount?: IntFieldUpdateOperationsInput | number
    pageType?: StringFieldUpdateOperationsInput | string
    externalLinks?: JsonNullValueInput | InputJsonValue
    newsParams?: JsonNullValueInput | InputJsonValue
    selectedNews?: JsonNullValueInput | InputJsonValue
    infoSections?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutConfigNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutConfigNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutConfigNestedInput
    images?: ImageUncheckedUpdateManyWithoutConfigNestedInput
  }

  export type ClientUpsertWithWhereUniqueWithoutServerInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutServerInput, ClientUncheckedUpdateWithoutServerInput>
    create: XOR<ClientCreateWithoutServerInput, ClientUncheckedCreateWithoutServerInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutServerInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutServerInput, ClientUncheckedUpdateWithoutServerInput>
  }

  export type ClientUpdateManyWithWhereWithoutServerInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutServerInput>
  }

  export type ProfessionalUpsertWithWhereUniqueWithoutServerInput = {
    where: ProfessionalWhereUniqueInput
    update: XOR<ProfessionalUpdateWithoutServerInput, ProfessionalUncheckedUpdateWithoutServerInput>
    create: XOR<ProfessionalCreateWithoutServerInput, ProfessionalUncheckedCreateWithoutServerInput>
  }

  export type ProfessionalUpdateWithWhereUniqueWithoutServerInput = {
    where: ProfessionalWhereUniqueInput
    data: XOR<ProfessionalUpdateWithoutServerInput, ProfessionalUncheckedUpdateWithoutServerInput>
  }

  export type ProfessionalUpdateManyWithWhereWithoutServerInput = {
    where: ProfessionalScalarWhereInput
    data: XOR<ProfessionalUpdateManyMutationInput, ProfessionalUncheckedUpdateManyWithoutServerInput>
  }

  export type CaseUpsertWithWhereUniqueWithoutServerInput = {
    where: CaseWhereUniqueInput
    update: XOR<CaseUpdateWithoutServerInput, CaseUncheckedUpdateWithoutServerInput>
    create: XOR<CaseCreateWithoutServerInput, CaseUncheckedCreateWithoutServerInput>
  }

  export type CaseUpdateWithWhereUniqueWithoutServerInput = {
    where: CaseWhereUniqueInput
    data: XOR<CaseUpdateWithoutServerInput, CaseUncheckedUpdateWithoutServerInput>
  }

  export type CaseUpdateManyWithWhereWithoutServerInput = {
    where: CaseScalarWhereInput
    data: XOR<CaseUpdateManyMutationInput, CaseUncheckedUpdateManyWithoutServerInput>
  }

  export type SectionUpsertWithWhereUniqueWithoutServerInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutServerInput, SectionUncheckedUpdateWithoutServerInput>
    create: XOR<SectionCreateWithoutServerInput, SectionUncheckedCreateWithoutServerInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutServerInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutServerInput, SectionUncheckedUpdateWithoutServerInput>
  }

  export type SectionUpdateManyWithWhereWithoutServerInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutServerInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    configId?: StringFilter<"Section"> | string
    serverId?: StringNullableFilter<"Section"> | string | null
    type?: EnumSectionTypeFilter<"Section"> | $Enums.SectionType
    title?: StringFilter<"Section"> | string
    content?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
  }

  export type ManualArticleUpsertWithWhereUniqueWithoutServerInput = {
    where: ManualArticleWhereUniqueInput
    update: XOR<ManualArticleUpdateWithoutServerInput, ManualArticleUncheckedUpdateWithoutServerInput>
    create: XOR<ManualArticleCreateWithoutServerInput, ManualArticleUncheckedCreateWithoutServerInput>
  }

  export type ManualArticleUpdateWithWhereUniqueWithoutServerInput = {
    where: ManualArticleWhereUniqueInput
    data: XOR<ManualArticleUpdateWithoutServerInput, ManualArticleUncheckedUpdateWithoutServerInput>
  }

  export type ManualArticleUpdateManyWithWhereWithoutServerInput = {
    where: ManualArticleScalarWhereInput
    data: XOR<ManualArticleUpdateManyMutationInput, ManualArticleUncheckedUpdateManyWithoutServerInput>
  }

  export type ManualArticleScalarWhereInput = {
    AND?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
    OR?: ManualArticleScalarWhereInput[]
    NOT?: ManualArticleScalarWhereInput | ManualArticleScalarWhereInput[]
    id?: StringFilter<"ManualArticle"> | string
    configId?: StringFilter<"ManualArticle"> | string
    serverId?: StringNullableFilter<"ManualArticle"> | string | null
    title?: StringFilter<"ManualArticle"> | string
    content?: StringFilter<"ManualArticle"> | string
    publishedAt?: DateTimeFilter<"ManualArticle"> | Date | string
  }

  export type AutoSourceUpsertWithWhereUniqueWithoutServerInput = {
    where: AutoSourceWhereUniqueInput
    update: XOR<AutoSourceUpdateWithoutServerInput, AutoSourceUncheckedUpdateWithoutServerInput>
    create: XOR<AutoSourceCreateWithoutServerInput, AutoSourceUncheckedCreateWithoutServerInput>
  }

  export type AutoSourceUpdateWithWhereUniqueWithoutServerInput = {
    where: AutoSourceWhereUniqueInput
    data: XOR<AutoSourceUpdateWithoutServerInput, AutoSourceUncheckedUpdateWithoutServerInput>
  }

  export type AutoSourceUpdateManyWithWhereWithoutServerInput = {
    where: AutoSourceScalarWhereInput
    data: XOR<AutoSourceUpdateManyMutationInput, AutoSourceUncheckedUpdateManyWithoutServerInput>
  }

  export type AutoSourceScalarWhereInput = {
    AND?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
    OR?: AutoSourceScalarWhereInput[]
    NOT?: AutoSourceScalarWhereInput | AutoSourceScalarWhereInput[]
    id?: StringFilter<"AutoSource"> | string
    configId?: StringFilter<"AutoSource"> | string
    serverId?: StringNullableFilter<"AutoSource"> | string | null
    name?: StringFilter<"AutoSource"> | string
    url?: StringFilter<"AutoSource"> | string
    type?: StringFilter<"AutoSource"> | string
    createdAt?: DateTimeFilter<"AutoSource"> | Date | string
  }

  export type UnitServerCreateWithoutActiveConfigInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellation: ConstellationCreateNestedOneWithoutServersInput
    clients?: ClientCreateNestedManyWithoutServerInput
    professionals?: ProfessionalCreateNestedManyWithoutServerInput
    cases?: CaseCreateNestedManyWithoutServerInput
    sections?: SectionCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceCreateNestedManyWithoutServerInput
  }

  export type UnitServerUncheckedCreateWithoutActiveConfigInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
    clients?: ClientUncheckedCreateNestedManyWithoutServerInput
    professionals?: ProfessionalUncheckedCreateNestedManyWithoutServerInput
    cases?: CaseUncheckedCreateNestedManyWithoutServerInput
    sections?: SectionUncheckedCreateNestedManyWithoutServerInput
    manualArticles?: ManualArticleUncheckedCreateNestedManyWithoutServerInput
    autoSources?: AutoSourceUncheckedCreateNestedManyWithoutServerInput
  }

  export type UnitServerCreateOrConnectWithoutActiveConfigInput = {
    where: UnitServerWhereUniqueInput
    create: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput>
  }

  export type UnitServerCreateManyActiveConfigInputEnvelope = {
    data: UnitServerCreateManyActiveConfigInput | UnitServerCreateManyActiveConfigInput[]
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutConfigInput = {
    id?: string
    type: $Enums.SectionType
    title: string
    content: string
    order: number
    server?: UnitServerCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutConfigInput = {
    id?: string
    serverId?: string | null
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type SectionCreateOrConnectWithoutConfigInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput>
  }

  export type SectionCreateManyConfigInputEnvelope = {
    data: SectionCreateManyConfigInput | SectionCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type ManualArticleCreateWithoutConfigInput = {
    id?: string
    title: string
    content: string
    publishedAt?: Date | string
    server?: UnitServerCreateNestedOneWithoutManualArticlesInput
  }

  export type ManualArticleUncheckedCreateWithoutConfigInput = {
    id?: string
    serverId?: string | null
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type ManualArticleCreateOrConnectWithoutConfigInput = {
    where: ManualArticleWhereUniqueInput
    create: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput>
  }

  export type ManualArticleCreateManyConfigInputEnvelope = {
    data: ManualArticleCreateManyConfigInput | ManualArticleCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type AutoSourceCreateWithoutConfigInput = {
    id?: string
    name: string
    url: string
    type: string
    createdAt?: Date | string
    server?: UnitServerCreateNestedOneWithoutAutoSourcesInput
  }

  export type AutoSourceUncheckedCreateWithoutConfigInput = {
    id?: string
    serverId?: string | null
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type AutoSourceCreateOrConnectWithoutConfigInput = {
    where: AutoSourceWhereUniqueInput
    create: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput>
  }

  export type AutoSourceCreateManyConfigInputEnvelope = {
    data: AutoSourceCreateManyConfigInput | AutoSourceCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutConfigInput = {
    id?: string
    url: string
    altText: string
    type: string
    order?: number | null
  }

  export type ImageUncheckedCreateWithoutConfigInput = {
    id?: string
    url: string
    altText: string
    type: string
    order?: number | null
  }

  export type ImageCreateOrConnectWithoutConfigInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput>
  }

  export type ImageCreateManyConfigInputEnvelope = {
    data: ImageCreateManyConfigInput | ImageCreateManyConfigInput[]
    skipDuplicates?: boolean
  }

  export type UnitServerUpsertWithWhereUniqueWithoutActiveConfigInput = {
    where: UnitServerWhereUniqueInput
    update: XOR<UnitServerUpdateWithoutActiveConfigInput, UnitServerUncheckedUpdateWithoutActiveConfigInput>
    create: XOR<UnitServerCreateWithoutActiveConfigInput, UnitServerUncheckedCreateWithoutActiveConfigInput>
  }

  export type UnitServerUpdateWithWhereUniqueWithoutActiveConfigInput = {
    where: UnitServerWhereUniqueInput
    data: XOR<UnitServerUpdateWithoutActiveConfigInput, UnitServerUncheckedUpdateWithoutActiveConfigInput>
  }

  export type UnitServerUpdateManyWithWhereWithoutActiveConfigInput = {
    where: UnitServerScalarWhereInput
    data: XOR<UnitServerUpdateManyMutationInput, UnitServerUncheckedUpdateManyWithoutActiveConfigInput>
  }

  export type SectionUpsertWithWhereUniqueWithoutConfigInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutConfigInput, SectionUncheckedUpdateWithoutConfigInput>
    create: XOR<SectionCreateWithoutConfigInput, SectionUncheckedCreateWithoutConfigInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutConfigInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutConfigInput, SectionUncheckedUpdateWithoutConfigInput>
  }

  export type SectionUpdateManyWithWhereWithoutConfigInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutConfigInput>
  }

  export type ManualArticleUpsertWithWhereUniqueWithoutConfigInput = {
    where: ManualArticleWhereUniqueInput
    update: XOR<ManualArticleUpdateWithoutConfigInput, ManualArticleUncheckedUpdateWithoutConfigInput>
    create: XOR<ManualArticleCreateWithoutConfigInput, ManualArticleUncheckedCreateWithoutConfigInput>
  }

  export type ManualArticleUpdateWithWhereUniqueWithoutConfigInput = {
    where: ManualArticleWhereUniqueInput
    data: XOR<ManualArticleUpdateWithoutConfigInput, ManualArticleUncheckedUpdateWithoutConfigInput>
  }

  export type ManualArticleUpdateManyWithWhereWithoutConfigInput = {
    where: ManualArticleScalarWhereInput
    data: XOR<ManualArticleUpdateManyMutationInput, ManualArticleUncheckedUpdateManyWithoutConfigInput>
  }

  export type AutoSourceUpsertWithWhereUniqueWithoutConfigInput = {
    where: AutoSourceWhereUniqueInput
    update: XOR<AutoSourceUpdateWithoutConfigInput, AutoSourceUncheckedUpdateWithoutConfigInput>
    create: XOR<AutoSourceCreateWithoutConfigInput, AutoSourceUncheckedCreateWithoutConfigInput>
  }

  export type AutoSourceUpdateWithWhereUniqueWithoutConfigInput = {
    where: AutoSourceWhereUniqueInput
    data: XOR<AutoSourceUpdateWithoutConfigInput, AutoSourceUncheckedUpdateWithoutConfigInput>
  }

  export type AutoSourceUpdateManyWithWhereWithoutConfigInput = {
    where: AutoSourceScalarWhereInput
    data: XOR<AutoSourceUpdateManyMutationInput, AutoSourceUncheckedUpdateManyWithoutConfigInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutConfigInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutConfigInput, ImageUncheckedUpdateWithoutConfigInput>
    create: XOR<ImageCreateWithoutConfigInput, ImageUncheckedCreateWithoutConfigInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutConfigInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutConfigInput, ImageUncheckedUpdateWithoutConfigInput>
  }

  export type ImageUpdateManyWithWhereWithoutConfigInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutConfigInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: StringFilter<"Image"> | string
    configId?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    altText?: StringFilter<"Image"> | string
    type?: StringFilter<"Image"> | string
    order?: IntNullableFilter<"Image"> | number | null
  }

  export type ClientCreateManyUserInput = {
    id?: string
    serverId: string
  }

  export type ProfessionalCreateManyUserInput = {
    id?: string
    serverId: string
  }

  export type ClientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    server?: UnitServerUpdateOneRequiredWithoutClientsNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
    files?: FileUpdateManyWithoutClientNestedInput
    reports?: ReportUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
    files?: FileUncheckedUpdateManyWithoutClientNestedInput
    reports?: ReportUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    server?: UnitServerUpdateOneRequiredWithoutProfessionalsNestedInput
    cases?: CaseUpdateManyWithoutProfessionalNestedInput
    files?: FileUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutProfessionalNestedInput
    files?: FileUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseCreateManyClientInput = {
    id?: string
    professionalId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyClientInput = {
    id?: string
    caseId: string
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type ReportCreateManyClientInput = {
    id?: string
    caseId: string
    reason: string
    createdAt?: Date | string
  }

  export type CaseUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
    professional?: ProfessionalUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseCreateManyProfessionalInput = {
    id?: string
    clientId: string
    serverId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyProfessionalInput = {
    id?: string
    caseId: string
    clientId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type CaseUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    server?: UnitServerUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: CaseUpdateOneRequiredWithoutFilesNestedInput
    client?: ClientUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyCaseInput = {
    id?: string
    clientId?: string | null
    professionalId?: string | null
    name: string
    url: string
    type: string
    date?: Date | string
  }

  export type ReportCreateManyCaseInput = {
    id?: string
    clientId: string
    reason: string
    createdAt?: Date | string
  }

  export type FileUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneWithoutFilesNestedInput
    professional?: ProfessionalUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    professionalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyChatInput = {
    id?: string
    sender: $Enums.Sender
    content: string
    date?: Date | string
  }

  export type MessageUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: EnumSenderFieldUpdateOperationsInput | $Enums.Sender
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitServerCreateManyConstellationInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    activeConfigId?: string | null
  }

  export type UnitServerUpdateWithoutConstellationInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    activeConfig?: UnitConfigUpdateOneWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutConstellationInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateManyWithoutConstellationInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    activeConfigId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientCreateManyServerInput = {
    id?: string
    userId: string
  }

  export type ProfessionalCreateManyServerInput = {
    id?: string
    userId: string
  }

  export type CaseCreateManyServerInput = {
    id?: string
    clientId: string
    professionalId: string
    status?: $Enums.CaseStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateManyServerInput = {
    id?: string
    configId: string
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type ManualArticleCreateManyServerInput = {
    id?: string
    configId: string
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type AutoSourceCreateManyServerInput = {
    id?: string
    configId: string
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type ClientUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutClientsNestedInput
    cases?: CaseUpdateManyWithoutClientNestedInput
    files?: FileUpdateManyWithoutClientNestedInput
    reports?: ReportUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutClientNestedInput
    files?: FileUncheckedUpdateManyWithoutClientNestedInput
    reports?: ReportUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfessionalsNestedInput
    cases?: CaseUpdateManyWithoutProfessionalNestedInput
    files?: FileUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cases?: CaseUncheckedUpdateManyWithoutProfessionalNestedInput
    files?: FileUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type ProfessionalUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CaseUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCasesNestedInput
    professional?: ProfessionalUpdateOneRequiredWithoutCasesNestedInput
    chat?: ChatUpdateOneWithoutCaseNestedInput
    files?: FileUpdateManyWithoutCaseNestedInput
    reports?: ReportUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUncheckedUpdateOneWithoutCaseNestedInput
    files?: FileUncheckedUpdateManyWithoutCaseNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCaseNestedInput
  }

  export type CaseUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: EnumCaseStatusFieldUpdateOperationsInput | $Enums.CaseStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    config?: UnitConfigUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SectionUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ManualArticleUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    config?: UnitConfigUpdateOneRequiredWithoutManualArticlesNestedInput
  }

  export type ManualArticleUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualArticleUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    config?: UnitConfigUpdateOneRequiredWithoutAutoSourcesNestedInput
  }

  export type AutoSourceUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    configId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnitServerCreateManyActiveConfigInput = {
    id?: string
    domain: string
    name: string
    orchestratorToken: string
    unitToken: string
    requiresUpdate?: boolean
    constellationId: string
  }

  export type SectionCreateManyConfigInput = {
    id?: string
    serverId?: string | null
    type: $Enums.SectionType
    title: string
    content: string
    order: number
  }

  export type ManualArticleCreateManyConfigInput = {
    id?: string
    serverId?: string | null
    title: string
    content: string
    publishedAt?: Date | string
  }

  export type AutoSourceCreateManyConfigInput = {
    id?: string
    serverId?: string | null
    name: string
    url: string
    type: string
    createdAt?: Date | string
  }

  export type ImageCreateManyConfigInput = {
    id?: string
    url: string
    altText: string
    type: string
    order?: number | null
  }

  export type UnitServerUpdateWithoutActiveConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellation?: ConstellationUpdateOneRequiredWithoutServersNestedInput
    clients?: ClientUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUpdateManyWithoutServerNestedInput
    cases?: CaseUpdateManyWithoutServerNestedInput
    sections?: SectionUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateWithoutActiveConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
    clients?: ClientUncheckedUpdateManyWithoutServerNestedInput
    professionals?: ProfessionalUncheckedUpdateManyWithoutServerNestedInput
    cases?: CaseUncheckedUpdateManyWithoutServerNestedInput
    sections?: SectionUncheckedUpdateManyWithoutServerNestedInput
    manualArticles?: ManualArticleUncheckedUpdateManyWithoutServerNestedInput
    autoSources?: AutoSourceUncheckedUpdateManyWithoutServerNestedInput
  }

  export type UnitServerUncheckedUpdateManyWithoutActiveConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orchestratorToken?: StringFieldUpdateOperationsInput | string
    unitToken?: StringFieldUpdateOperationsInput | string
    requiresUpdate?: BoolFieldUpdateOperationsInput | boolean
    constellationId?: StringFieldUpdateOperationsInput | string
  }

  export type SectionUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    server?: UnitServerUpdateOneWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SectionUncheckedUpdateManyWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSectionTypeFieldUpdateOperationsInput | $Enums.SectionType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ManualArticleUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: UnitServerUpdateOneWithoutManualArticlesNestedInput
  }

  export type ManualArticleUncheckedUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualArticleUncheckedUpdateManyWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: UnitServerUpdateOneWithoutAutoSourcesNestedInput
  }

  export type AutoSourceUncheckedUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutoSourceUncheckedUpdateManyWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUncheckedUpdateWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUncheckedUpdateManyWithoutConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    order?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}