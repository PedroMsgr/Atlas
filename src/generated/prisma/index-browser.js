
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  address: 'address',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serverId: 'serverId',
  status: 'status'
};

exports.Prisma.ProfessionalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serverId: 'serverId'
};

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  professionalId: 'professionalId',
  serverId: 'serverId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  sender: 'sender',
  content: 'content',
  date: 'date'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  clientId: 'clientId',
  professionalId: 'professionalId',
  name: 'name',
  url: 'url',
  type: 'type',
  date: 'date'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  clientId: 'clientId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.ConstellationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  serverId: 'serverId',
  type: 'type',
  title: 'title',
  content: 'content',
  order: 'order'
};

exports.Prisma.ManualArticleScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  serverId: 'serverId',
  title: 'title',
  content: 'content',
  publishedAt: 'publishedAt'
};

exports.Prisma.AutoSourceScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  serverId: 'serverId',
  name: 'name',
  url: 'url',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  url: 'url',
  altText: 'altText',
  type: 'type',
  order: 'order'
};

exports.Prisma.UnitServerScalarFieldEnum = {
  id: 'id',
  domain: 'domain',
  name: 'name',
  orchestratorToken: 'orchestratorToken',
  unitToken: 'unitToken',
  requiresUpdate: 'requiresUpdate',
  constellationId: 'constellationId',
  activeConfigId: 'activeConfigId'
};

exports.Prisma.UnitConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pageTitle: 'pageTitle',
  footerInfo: 'footerInfo',
  legalStepsCount: 'legalStepsCount',
  pageType: 'pageType',
  externalLinks: 'externalLinks',
  newsParams: 'newsParams',
  selectedNews: 'selectedNews',
  infoSections: 'infoSections',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UpdateLogScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  configId: 'configId',
  previousConfigId: 'previousConfigId',
  status: 'status',
  initiatorId: 'initiatorId',
  description: 'description',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorDetails: 'errorDetails'
};

exports.Prisma.UserNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  isRead: 'isRead',
  createdAt: 'createdAt',
  serverId: 'serverId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  client: 'client',
  professional: 'professional',
  admin: 'admin'
};

exports.ClientStatus = exports.$Enums.ClientStatus = {
  new: 'new',
  reviewing: 'reviewing',
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

exports.CaseStatus = exports.$Enums.CaseStatus = {
  open: 'open',
  inProgress: 'inProgress',
  pending: 'pending',
  closed: 'closed'
};

exports.Sender = exports.$Enums.Sender = {
  client: 'client',
  professional: 'professional'
};

exports.SectionType = exports.$Enums.SectionType = {
  text: 'text',
  legalGuide: 'legalGuide',
  manual: 'manual',
  newsConfig: 'newsConfig'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Professional: 'Professional',
  Case: 'Case',
  Chat: 'Chat',
  Message: 'Message',
  File: 'File',
  Report: 'Report',
  Constellation: 'Constellation',
  Section: 'Section',
  ManualArticle: 'ManualArticle',
  AutoSource: 'AutoSource',
  Image: 'Image',
  UnitServer: 'UnitServer',
  UnitConfig: 'UnitConfig',
  UpdateLog: 'UpdateLog',
  UserNotification: 'UserNotification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
