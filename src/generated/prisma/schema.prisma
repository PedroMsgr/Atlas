// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  cliente
  profesional
  admin
}

enum Remitente {
  cliente
  profesional
}

enum SeccionTipo {
  texto
  guiaLegal
  manual
  noticiasConfig
}

enum CasoStatus {
  abierto
  enProceso
  enEspera
  cerrado
}

model Usuario {
  id    String @id @default(uuid())
  email String @unique
  rol   Rol

  firstName   String
  lastName    String
  telefono    String?
  direccion   String?
  avatarUrl   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  Clientes      Cliente[]
  Profesionales Profesional[]
}

model ServidorUnitario {
  id                    String  @id @default(uuid())
  dominio               String  @unique
  nombre                String
  apiToken              String  @unique
  requiereActualizacion Boolean @default(false)

  constelacion   Constelacion @relation(fields: [constelacionId], references: [id])
  constelacionId String

  secciones          Seccion[]
  noticiasConfig     NoticiasConfig?
  fuentesAutomaticas FuenteAutomatica[]
  manualArticles     ManualArticle[]
  clientes           Cliente[]
  profesionales      Profesional[]
  casos              Caso[]
}

model Cliente {
  id         String @id @default(uuid())
  usuarioId  String
  servidorId String

  usuario  Usuario          @relation(fields: [usuarioId], references: [id])
  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])

  casos    Caso[]
  archivos Archivo[]
  reportes Reporte[]
}

model Profesional {
  id         String @id @default(uuid())
  usuarioId  String
  servidorId String

  usuario  Usuario          @relation(fields: [usuarioId], references: [id])
  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])

  casos    Caso[]
  archivos Archivo[]
}

model Caso {
  id            String @id @default(uuid())
  clienteId     String
  profesionalId String
  servidorId    String

  cliente     Cliente          @relation(fields: [clienteId], references: [id])
  profesional Profesional      @relation(fields: [profesionalId], references: [id])
  servidor    ServidorUnitario @relation(fields: [servidorId], references: [id])

  status    CasoStatus @default(abierto)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  chat     Chat?
  archivos Archivo[]
  reportes Reporte[]
}

model Chat {
  id     String @id @default(uuid())
  casoId String @unique
  caso   Caso   @relation(fields: [casoId], references: [id])

  mensajes Mensaje[]
}

model Mensaje {
  id        String    @id @default(uuid())
  chatId    String
  remitente Remitente
  contenido String
  fecha     DateTime  @default(now())

  chat Chat @relation(fields: [chatId], references: [id])
}

model NoticiasConfig {
  id           String @id @default(uuid())
  servidorId   String @unique
  palabraClave String
  limite       Int    @default(10)

  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])
}

model FuenteAutomatica {
  id         String @id @default(uuid())
  servidorId String
  nombre     String
  url        String
  tipo       String

  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])
}

model ManualArticle {
  id          String   @id @default(uuid())
  servidorId  String
  titulo      String
  contenido   String
  publishedAt DateTime

  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])
}

model Archivo {
  id            String   @id @default(uuid())
  casoId        String
  clienteId     String?
  profesionalId String?
  nombre        String
  url           String
  tipo          String
  fecha         DateTime @default(now())

  caso        Caso         @relation(fields: [casoId], references: [id])
  cliente     Cliente?     @relation(fields: [clienteId], references: [id])
  profesional Profesional? @relation(fields: [profesionalId], references: [id])
}

model Reporte {
  id        String   @id @default(uuid())
  casoId    String
  clienteId String
  razon     String
  createdAt DateTime @default(now())

  caso    Caso    @relation(fields: [casoId], references: [id])
  cliente Cliente @relation(fields: [clienteId], references: [id])
}

model Constelacion {
  id          String             @id @default(uuid())
  nombre      String
  descripcion String?
  servidores  ServidorUnitario[]
}

model Seccion {
  id         String      @id @default(uuid())
  servidorId String
  tipo       SeccionTipo
  titulo     String
  contenido  String
  orden      Int

  servidor ServidorUnitario @relation(fields: [servidorId], references: [id])
}
