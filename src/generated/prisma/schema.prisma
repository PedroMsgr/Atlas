// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  client
  professional
  admin
}

enum Sender {
  client
  professional
}

enum CaseStatus {
  open
  inProgress
  pending
  closed
}

/// Tipos de sección mostrados en la landing del servidor unitario
enum SectionType {
  text // párrafo o bloque HTML
  legalGuide // listado de pasos/FAQ legales
  manual // contenido curado manualmente
  newsConfig // bloque de noticias automáticas
}

// ---------- Modelos de identidad ----------
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  role        Role
  firstName   String
  lastName    String
  phone       String?
  address     String?
  avatarUrl   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  clients          Client[]
  professionals    Professional[]
  sessions         Session[]
  notifications    UserNotification[]
  initiatedUpdates UpdateLog[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  serverId  String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  isActive  Boolean  @default(true)

  user   User        @relation(fields: [userId], references: [id])
  server UnitServer? @relation(fields: [serverId], references: [id])

  @@index([token])
  @@index([userId])
  @@index([serverId])
}

model Client {
  id       String @id @default(uuid())
  userId   String
  serverId String

  user   User       @relation(fields: [userId], references: [id])
  server UnitServer @relation(fields: [serverId], references: [id])

  cases   Case[]
  files   File[]
  reports Report[]
}

model Professional {
  id       String @id @default(uuid())
  userId   String
  serverId String

  user   User       @relation(fields: [userId], references: [id])
  server UnitServer @relation(fields: [serverId], references: [id])

  cases Case[]
  files File[]
}

// ---------- Casos y comunicación ----------
model Case {
  id             String     @id @default(uuid())
  clientId       String
  professionalId String
  serverId       String
  status         CaseStatus @default(open)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  client       Client       @relation(fields: [clientId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])
  server       UnitServer   @relation(fields: [serverId], references: [id])

  chat    Chat?
  files   File[]
  reports Report[]
}

model Chat {
  id     String @id @default(uuid())
  caseId String @unique

  case     Case      @relation(fields: [caseId], references: [id])
  messages Message[]
}

model Message {
  id      String   @id @default(uuid())
  chatId  String
  sender  Sender
  content String
  date    DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id])
}

model File {
  id             String   @id @default(uuid())
  caseId         String
  clientId       String?
  professionalId String?
  name           String
  url            String
  type           String
  date           DateTime @default(now())

  case         Case          @relation(fields: [caseId], references: [id])
  client       Client?       @relation(fields: [clientId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])
}

model Report {
  id        String   @id @default(uuid())
  caseId    String
  clientId  String
  reason    String
  createdAt DateTime @default(now())

  case   Case   @relation(fields: [caseId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
}

// ---------- Estructura de servidores ----------
model Constellation {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  servers UnitServer[]
}

// ---------- Contenido de las landings ----------
model Section {
  id       String      @id @default(uuid())
  configId String
  serverId String?
  type     SectionType
  title    String
  content  String
  order    Int

  config UnitConfig  @relation(fields: [configId], references: [id])
  server UnitServer? @relation(fields: [serverId], references: [id])
}

model ManualArticle {
  id          String   @id @default(uuid())
  configId    String
  serverId    String?
  title       String
  content     String
  publishedAt DateTime @default(now())

  config UnitConfig  @relation(fields: [configId], references: [id])
  server UnitServer? @relation(fields: [serverId], references: [id])
}

model AutoSource {
  id        String   @id @default(uuid())
  configId  String
  serverId  String?
  name      String
  url       String
  type      String // RSS, Sitemap, HTML, etc.
  createdAt DateTime @default(now())

  config UnitConfig  @relation(fields: [configId], references: [id])
  server UnitServer? @relation(fields: [serverId], references: [id])
}

model Image {
  id       String @id @default(uuid())
  configId String
  url      String
  altText  String
  type     String // hero, gallery, icon…
  order    Int?

  config UnitConfig @relation(fields: [configId], references: [id])
}

model UnitServer {
  id                String  @id @default(uuid())
  domain            String  @unique
  name              String
  orchestratorToken String  @unique
  unitToken         String  @unique
  requiresUpdate    Boolean @default(false)
  constellationId   String
  activeConfigId    String?

  constellation Constellation @relation(fields: [constellationId], references: [id])
  activeConfig  UnitConfig?   @relation(fields: [activeConfigId], references: [id], name: "ConfigInServers")

  clients        Client[]
  professionals  Professional[]
  cases          Case[]
  sections       Section[]
  manualArticles ManualArticle[]
  autoSources    AutoSource[]
  sessions       Session[]
  updateLogs     UpdateLog[]
  notifications  UserNotification[]
}

model UnitConfig {
  id              String   @id @default(uuid())
  name            String   @unique
  pageTitle       String
  footerInfo      String
  legalStepsCount Int
  pageType        String // landing, wiget, etc.
  externalLinks   Json // { facebook, twitter, … }
  newsParams      Json // { keyword, limit }
  selectedNews    Json // [{ title, url }]
  infoSections    Json // textos estáticos (FAQ, cómo trabajamos…)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  servers         UnitServer[]    @relation("ConfigInServers")
  sections        Section[]
  manualArticles  ManualArticle[]
  autoSources     AutoSource[]
  images          Image[]
  updates         UpdateLog[]     @relation("ConfigInUpdates")
  previousUpdates UpdateLog[]     @relation("PreviousConfig")
}

// ---------- Logs y notificaciones ----------
model UpdateLog {
  id               String    @id @default(uuid())
  serverId         String
  configId         String
  previousConfigId String?
  status           String
  initiatorId      String
  description      String?
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  errorDetails     String?

  server         UnitServer  @relation(fields: [serverId], references: [id])
  config         UnitConfig  @relation("ConfigInUpdates", fields: [configId], references: [id])
  previousConfig UnitConfig? @relation("PreviousConfig", fields: [previousConfigId], references: [id])
  initiator      User        @relation(fields: [initiatorId], references: [id])
}

model UserNotification {
  id                String   @id @default(uuid())
  userId            String
  title             String
  message           String
  type              String // info, warning, error, success
  relatedEntityId   String?
  relatedEntityType String? // Case, Chat, Message, etc.
  isRead            Boolean  @default(false)
  createdAt         DateTime @default(now())
  serverId          String?

  user   User        @relation(fields: [userId], references: [id])
  server UnitServer? @relation(fields: [serverId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([serverId])
}
