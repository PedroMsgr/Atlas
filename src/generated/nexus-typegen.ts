/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../pages/api/graphql"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * DateTime custom scalar type
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * JSON custom scalar type
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * DateTime custom scalar type
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * JSON custom scalar type
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
}

export interface NexusGenObjects {
  Case: { // root type
    clientId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    professionalId: string; // String!
    serverId: string; // String!
    status: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Client: { // root type
    id: string; // String!
    serverId: string; // String!
    status: string; // String!
    userId: string; // String!
  }
  Constellation: { // root type
    description: string; // String!
    id: string; // String!
    name: string; // String!
  }
  Mutation: {};
  Professional: { // root type
    id: string; // String!
    serverId: string; // String!
    userId: string; // String!
  }
  Query: {};
  Section: { // root type
    configId: string; // String!
    content: string; // String!
    id: string; // String!
    order: number; // Int!
    serverId: string; // String!
    title: string; // String!
    type: string; // String!
  }
  UnitConfig: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    externalLinks: NexusGenScalars['JSON']; // JSON!
    footerInfo: string; // String!
    id: string; // String!
    infoSections: NexusGenScalars['JSON']; // JSON!
    legalStepsCount: number; // Int!
    name: string; // String!
    newsParams: NexusGenScalars['JSON']; // JSON!
    pageTitle: string; // String!
    pageType: string; // String!
    selectedNews: NexusGenScalars['JSON']; // JSON!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UnitServer: { // root type
    activeConfigId: string; // String!
    constellationId: string; // String!
    domain: string; // String!
    id: string; // String!
    name: string; // String!
    orchestratorToken: string; // String!
    requiresUpdate: boolean; // Boolean!
    unitToken: string; // String!
  }
  User: { // root type
    address: string; // String!
    avatarUrl: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // String!
    isActive: boolean; // Boolean!
    lastLoginAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    phone: string; // String!
    role: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Case: { // field return type
    client: NexusGenRootTypes['Client']; // Client!
    clientId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    professional: NexusGenRootTypes['Professional']; // Professional!
    professionalId: string; // String!
    server: NexusGenRootTypes['UnitServer']; // UnitServer!
    serverId: string; // String!
    status: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Client: { // field return type
    cases: NexusGenRootTypes['Case'][]; // [Case!]!
    id: string; // String!
    server: NexusGenRootTypes['UnitServer']; // UnitServer!
    serverId: string; // String!
    status: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Constellation: { // field return type
    description: string; // String!
    id: string; // String!
    name: string; // String!
    servers: NexusGenRootTypes['UnitServer'][]; // [UnitServer!]!
  }
  Mutation: { // field return type
    createCase: NexusGenRootTypes['Case']; // Case!
    createClient: NexusGenRootTypes['Client']; // Client!
    createConstellation: NexusGenRootTypes['Constellation']; // Constellation!
    createProfessional: NexusGenRootTypes['Professional']; // Professional!
    createUnitServer: NexusGenRootTypes['UnitServer']; // UnitServer!
    createUser: NexusGenRootTypes['User']; // User!
    updateCase: NexusGenRootTypes['Case']; // Case!
    updateClient: NexusGenRootTypes['Client']; // Client!
    updateConstellation: NexusGenRootTypes['Constellation']; // Constellation!
    updateUnitServer: NexusGenRootTypes['UnitServer']; // UnitServer!
    updateUser: NexusGenRootTypes['User']; // User!
  }
  Professional: { // field return type
    cases: NexusGenRootTypes['Case'][]; // [Case!]!
    id: string; // String!
    server: NexusGenRootTypes['UnitServer']; // UnitServer!
    serverId: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Query: { // field return type
    case: NexusGenRootTypes['Case']; // Case!
    cases: NexusGenRootTypes['Case'][]; // [Case!]!
    client: NexusGenRootTypes['Client']; // Client!
    clients: NexusGenRootTypes['Client'][]; // [Client!]!
    constellation: NexusGenRootTypes['Constellation']; // Constellation!
    constellations: NexusGenRootTypes['Constellation'][]; // [Constellation!]!
    professional: NexusGenRootTypes['Professional']; // Professional!
    professionals: NexusGenRootTypes['Professional'][]; // [Professional!]!
    unitConfig: NexusGenRootTypes['UnitConfig']; // UnitConfig!
    unitConfigs: NexusGenRootTypes['UnitConfig'][]; // [UnitConfig!]!
    unitServer: NexusGenRootTypes['UnitServer']; // UnitServer!
    unitServers: NexusGenRootTypes['UnitServer'][]; // [UnitServer!]!
    user: NexusGenRootTypes['User']; // User!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Section: { // field return type
    config: NexusGenRootTypes['UnitConfig']; // UnitConfig!
    configId: string; // String!
    content: string; // String!
    id: string; // String!
    order: number; // Int!
    server: NexusGenRootTypes['UnitServer']; // UnitServer!
    serverId: string; // String!
    title: string; // String!
    type: string; // String!
  }
  UnitConfig: { // field return type
    activeInServers: NexusGenRootTypes['UnitServer'][]; // [UnitServer!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    externalLinks: NexusGenScalars['JSON']; // JSON!
    footerInfo: string; // String!
    id: string; // String!
    infoSections: NexusGenScalars['JSON']; // JSON!
    legalStepsCount: number; // Int!
    name: string; // String!
    newsParams: NexusGenScalars['JSON']; // JSON!
    pageTitle: string; // String!
    pageType: string; // String!
    sections: NexusGenRootTypes['Section'][]; // [Section!]!
    selectedNews: NexusGenScalars['JSON']; // JSON!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UnitServer: { // field return type
    activeConfig: NexusGenRootTypes['UnitConfig']; // UnitConfig!
    activeConfigId: string; // String!
    constellation: NexusGenRootTypes['Constellation']; // Constellation!
    constellationId: string; // String!
    domain: string; // String!
    id: string; // String!
    name: string; // String!
    orchestratorToken: string; // String!
    requiresUpdate: boolean; // Boolean!
    unitToken: string; // String!
  }
  User: { // field return type
    address: string; // String!
    avatarUrl: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // String!
    isActive: boolean; // Boolean!
    lastLoginAt: NexusGenScalars['DateTime']; // DateTime!
    lastName: string; // String!
    phone: string; // String!
    role: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Case: { // field return type name
    client: 'Client'
    clientId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    professional: 'Professional'
    professionalId: 'String'
    server: 'UnitServer'
    serverId: 'String'
    status: 'String'
    updatedAt: 'DateTime'
  }
  Client: { // field return type name
    cases: 'Case'
    id: 'String'
    server: 'UnitServer'
    serverId: 'String'
    status: 'String'
    user: 'User'
    userId: 'String'
  }
  Constellation: { // field return type name
    description: 'String'
    id: 'String'
    name: 'String'
    servers: 'UnitServer'
  }
  Mutation: { // field return type name
    createCase: 'Case'
    createClient: 'Client'
    createConstellation: 'Constellation'
    createProfessional: 'Professional'
    createUnitServer: 'UnitServer'
    createUser: 'User'
    updateCase: 'Case'
    updateClient: 'Client'
    updateConstellation: 'Constellation'
    updateUnitServer: 'UnitServer'
    updateUser: 'User'
  }
  Professional: { // field return type name
    cases: 'Case'
    id: 'String'
    server: 'UnitServer'
    serverId: 'String'
    user: 'User'
    userId: 'String'
  }
  Query: { // field return type name
    case: 'Case'
    cases: 'Case'
    client: 'Client'
    clients: 'Client'
    constellation: 'Constellation'
    constellations: 'Constellation'
    professional: 'Professional'
    professionals: 'Professional'
    unitConfig: 'UnitConfig'
    unitConfigs: 'UnitConfig'
    unitServer: 'UnitServer'
    unitServers: 'UnitServer'
    user: 'User'
    users: 'User'
  }
  Section: { // field return type name
    config: 'UnitConfig'
    configId: 'String'
    content: 'String'
    id: 'String'
    order: 'Int'
    server: 'UnitServer'
    serverId: 'String'
    title: 'String'
    type: 'String'
  }
  UnitConfig: { // field return type name
    activeInServers: 'UnitServer'
    createdAt: 'DateTime'
    externalLinks: 'JSON'
    footerInfo: 'String'
    id: 'String'
    infoSections: 'JSON'
    legalStepsCount: 'Int'
    name: 'String'
    newsParams: 'JSON'
    pageTitle: 'String'
    pageType: 'String'
    sections: 'Section'
    selectedNews: 'JSON'
    updatedAt: 'DateTime'
  }
  UnitServer: { // field return type name
    activeConfig: 'UnitConfig'
    activeConfigId: 'String'
    constellation: 'Constellation'
    constellationId: 'String'
    domain: 'String'
    id: 'String'
    name: 'String'
    orchestratorToken: 'String'
    requiresUpdate: 'Boolean'
    unitToken: 'String'
  }
  User: { // field return type name
    address: 'String'
    avatarUrl: 'String'
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    id: 'String'
    isActive: 'Boolean'
    lastLoginAt: 'DateTime'
    lastName: 'String'
    phone: 'String'
    role: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCase: { // args
      clientId: string; // String!
      professionalId?: string | null; // String
      serverId: string; // String!
      status?: string | null; // String
    }
    createClient: { // args
      serverId: string; // String!
      status?: string | null; // String
      userId: string; // String!
    }
    createConstellation: { // args
      description?: string | null; // String
      name: string; // String!
    }
    createProfessional: { // args
      serverId: string; // String!
      userId: string; // String!
    }
    createUnitServer: { // args
      constellationId?: string | null; // String
      domain: string; // String!
      name: string; // String!
    }
    createUser: { // args
      address?: string | null; // String
      email: string; // String!
      firstName?: string | null; // String
      lastName?: string | null; // String
      phone?: string | null; // String
      role?: string | null; // String
    }
    updateCase: { // args
      id: string; // String!
      professionalId?: string | null; // String
      status?: string | null; // String
    }
    updateClient: { // args
      id: string; // String!
      status?: string | null; // String
    }
    updateConstellation: { // args
      description?: string | null; // String
      id: string; // String!
      name?: string | null; // String
    }
    updateUnitServer: { // args
      activeConfigId?: string | null; // String
      constellationId?: string | null; // String
      domain?: string | null; // String
      id: string; // String!
      name?: string | null; // String
      requiresUpdate?: boolean | null; // Boolean
    }
    updateUser: { // args
      address?: string | null; // String
      email?: string | null; // String
      firstName?: string | null; // String
      id: string; // String!
      isActive?: boolean | null; // Boolean
      lastName?: string | null; // String
      phone?: string | null; // String
      role?: string | null; // String
    }
  }
  Query: {
    case: { // args
      id: string; // String!
    }
    cases: { // args
      clientId?: string | null; // String
      professionalId?: string | null; // String
      status?: string | null; // String
    }
    client: { // args
      id: string; // String!
    }
    clients: { // args
      serverId?: string | null; // String
    }
    constellation: { // args
      id: string; // String!
    }
    professional: { // args
      id: string; // String!
    }
    professionals: { // args
      serverId?: string | null; // String
    }
    unitConfig: { // args
      id: string; // String!
    }
    unitServer: { // args
      id: string; // String!
    }
    user: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}